(window.webpackJsonp=window.webpackJsonp||[]).push([[152],{650:function(s,n,t){"use strict";t.r(n);var e=t(2),a=Object(e.a)({},(function(){var s=this,n=s.$createElement,t=s._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[t("p",[s._v("「这是我参与2022首次更文挑战的第13天，活动详情查看："),t("a",{attrs:{href:"https://juejin.cn/post/7052884569032392740",target:"_blank",rel:"noopener noreferrer"}},[s._v("2022首次更文挑战"),t("OutboundLink")],1),s._v("」")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("「这是我参与2022首次更文挑战的第14天，活动详情查看："),t("a",{attrs:{href:"https://juejin.cn/post/7052884569032392740",target:"_blank",rel:"noopener noreferrer"}},[s._v("2022首次更文挑战"),t("OutboundLink")],1),s._v("」")]),s._v(" "),t("hr"),s._v(" "),t("p",[s._v("今天是除夕，大家新年快乐哈~虎年行大运~~")]),s._v(" "),t("p",[s._v("算法继续，本篇带来的是非常典型的一道题：“判断子序列”，采用的是双指针的解法~")]),s._v(" "),t("p",[s._v("冲就完事了~")]),s._v(" "),t("p",[t("strong",[s._v("题：")])]),s._v(" "),t("p",[s._v("给定字符串 s 和 t ，判断 s 是否为 t 的子序列。")]),s._v(" "),t("p",[s._v('字符串的一个子序列是原始字符串删除一些（也可以不删除）字符而不改变剩余字符相对位置形成的新字符串。（例如，"ace"是"abcde"的一个子序列，而"aec"不是）。')]),s._v(" "),t("p",[s._v("进阶：")]),s._v(" "),t("p",[s._v("如果有大量输入的 S，称作 S1, S2, ... , Sk 其中 k >= 10亿，你需要依次检查它们是否为 T 的子序列。在这种情况下，你会怎样改变代码？")]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v('示例 1：\n\n输入：s = "abc", t = "ahbgdc"\n输出：true\n\n示例 2：\n\n输入：s = "axc", t = "ahbgdc"\n输出：false\n')])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br")])]),t("ul",[t("li",[s._v("0 <= s.length <= 100")]),s._v(" "),t("li",[s._v("0 <= t.length <= 10^4")]),s._v(" "),t("li",[s._v("两个字符串都只由小写字符组成。")])]),s._v(" "),t("p",[t("strong",[s._v("解题思路：")])]),s._v(" "),t("p",[s._v("本题询问的是，s是否是t的子序列，因此只要能找到任意一种s在t中出现的方式，即可认为s是t的子序列。\n而当我们从前往后匹配，可以发现每次贪心地匹配靠前的字符是最优决策。")]),s._v(" "),t("p",[s._v("假定当前需要匹配字符c，而字符c在t中的位置x1和x2出现（x1 < x2），那么贪心取x1是最优解，因为x2后面能取到的字符，x1也都能取到，并且通过x1与x2之间的可选字符，更有希望能匹配成功。")]),s._v(" "),t("p",[s._v("这样，我们初始化两个指针i和j，分别指向s和t的初始位置。每次贪心地匹配，匹配成功则i和j同时右移，匹配s的下一个位置，匹配失败则j右移，i不变，尝试用t的下一个字符匹配s。最终如果i移动到s的末尾，就说明s是t的子序列。")]),s._v(" "),t("p",[t("strong",[s._v("JavaScript 实现：")])]),s._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[s._v("// isSubSequence 时间复杂度O(N)，空间复杂度O(1)\nfunc isSubSequence(s, t string) bool {\n\tm, n := len(s), len(t)\n\ti, j := 0, 0\n\tfor i < m && j < n {\n\t\tif s[i] == t[j] {\n\t\t\ti++\n\t\t}\n\t\tj++\n\t}\n\treturn i == m\n}\n")])]),s._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[s._v("1")]),t("br"),t("span",{staticClass:"line-number"},[s._v("2")]),t("br"),t("span",{staticClass:"line-number"},[s._v("3")]),t("br"),t("span",{staticClass:"line-number"},[s._v("4")]),t("br"),t("span",{staticClass:"line-number"},[s._v("5")]),t("br"),t("span",{staticClass:"line-number"},[s._v("6")]),t("br"),t("span",{staticClass:"line-number"},[s._v("7")]),t("br"),t("span",{staticClass:"line-number"},[s._v("8")]),t("br"),t("span",{staticClass:"line-number"},[s._v("9")]),t("br"),t("span",{staticClass:"line-number"},[s._v("10")]),t("br"),t("span",{staticClass:"line-number"},[s._v("11")]),t("br"),t("span",{staticClass:"line-number"},[s._v("12")]),t("br")])]),t("hr"),s._v(" "),t("p",[s._v("以上~")]),s._v(" "),t("blockquote",[t("p",[s._v("我是掘金安东尼，输出暴露输入，技术洞见生活，再会~")])])])}),[],!1,null,null,null);n.default=a.exports}}]);