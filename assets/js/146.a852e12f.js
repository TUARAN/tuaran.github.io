(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{645:function(s,n,a){"use strict";a.r(n);var t=a(2),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("「这是我参与2022首次更文挑战的第8天，活动详情查看："),a("a",{attrs:{href:"https://juejin.cn/post/7052884569032392740",target:"_blank",rel:"noopener noreferrer"}},[s._v("2022首次更文挑战"),a("OutboundLink")],1),s._v("」")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("双指针从广义上来说，是指用两个变量在线性结构上遍历而解决的问题。狭义上说，")]),s._v(" "),a("ul",[a("li",[s._v("对于数组，指两个变量在数组上相向移动解决的问题；")]),s._v(" "),a("li",[s._v("对于链表，指两个变量在链表上同向移动解决的问题，也称为「快慢指针」问题。")])]),s._v(" "),a("p",[s._v("双指针算法通常不难，双指针算法是基于暴力解法的优化，它是很好的学习算法的入门问题。")]),s._v(" "),a("p",[s._v("本篇带来两道相似的、有递进关系的“双指针”算法题。")]),s._v(" "),a("p",[s._v("冲就完事了吼~~")]),s._v(" "),a("h2",{attrs:{id:"最接近的三数之和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#最接近的三数之和"}},[s._v("#")]),s._v(" “最接近的三数之和”")]),s._v(" "),a("blockquote",[a("p",[s._v("给你一个长度为 n 的整数数组 nums 和 一个目标值 target。请你从 nums 中选出三个整数，使它们的和与 target 最接近。")]),s._v(" "),a("p",[s._v("返回这三个数的和。")]),s._v(" "),a("p",[s._v("假定每组输入只存在恰好一个解。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("示例 1：\n输入：nums = [-1,2,1,-4], target = 1\n输出：2\n解释：与 target 最接近的和是 2 (-1 + 2 + 1 = 2) 。\n\n示例 2：\n输入： nums = [0,0,0], target = 1\n输出： 0\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("双指针解法：")]),s._v(" "),a("p",[s._v("数组先升序排序，初始化一个最小和；遍历数组，定义双指针，如果当前和更接近，更新最小值；根据当前三数之和和target的关系，移动指针；若在遍历过程中，三数之和等于target，直接返回当前的和即可。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const threeSumClosest = (nums, target) => {\n    // 升序排序\n    nums.sort((a, b) => a - b);\n    // 初始化一个最小值\n    let min = Infinity;\n    const len = nums.length;\n    for (let i = 0; i < len; i++) {\n        // 定义左右指针\n        let [left, right] = [i + 1, len - 1];\n        while (left < right) {\n            // 当前三数之和\n            const sum = nums[i] + nums[left] + nums[right];\n            // 如果当前和更接近，更新最小值\n            if (Math.abs(sum - target) < Math.abs(min - target)) {\n                min = sum;\n            }\n            // 根据sum和target的关系，移动指针\n            if (sum < target) {\n                left++;\n            } else if (sum > target) {\n                right--;\n            } else {\n                // sum和target相等，直接返回sum，肯定是最小的了\n                return sum;\n            }\n        }\n    }\n    // 遍历结束，返回最接近的和\n    return min;\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f4f5517c2445475dabcf658e559e79fe~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("h2",{attrs:{id:"四数之和"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四数之和"}},[s._v("#")]),s._v(" “四数之和”")]),s._v(" "),a("blockquote",[a("p",[s._v("给你一个由 n 个整数组成的数组 nums ，和一个目标值 target 。请你找出并返回满足下述全部条件且不重复的四元组 [nums[a], nums[b], nums[c], nums[d]] （若两个四元组元素一一对应，则认为两个四元组重复）：")])]),s._v(" "),a("ul",[a("li",[s._v("0 <= a, b, c, d < n")]),s._v(" "),a("li",[s._v("a、b、c 和 d 互不相同")]),s._v(" "),a("li",[s._v("nums[a] + nums[b] + nums[c] + nums[d] == target\n你可以按 任意顺序 返回答案 。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("示例 1：\n输入：nums = [1,0,-1,0,-2,2], target = 0\n输出：[[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\n\n示例 2：\n输入：nums = [2,2,2,2,2], target = 8\n输出：[[2,2,2,2]]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("双指针解法：")]),s._v(" "),a("p",[s._v("先给数组从小到大排序，然后双指针lo和hi分别在数组开头和结尾，这样就可以控制nums[lo]和nums[hi]这两数之和的大小；如果你想让它俩的和大一些，就让lo++，如果你想让它俩的和小一些，就让hi--。")]),s._v(" "),a("p",[s._v("基于两数之和可以得到一个万能函数nSumTarget，具体思路可见题解 "),a("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzAxODQxMDM0Mw==&mid=2247485789&idx=1&sn=efc1167b85011c019e05d2c3db1039e6&scene=21#wechat_redirect",target:"_blank",rel:"noopener noreferrer"}},[s._v("一个函数秒杀 2Sum 3Sum 4Sum 问题'"),a("OutboundLink")],1)]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[][]}\n */\nvar fourSum = function (nums, target) {\n  // 先排序\n  nums.sort((a, b) => a - b);\n  /*\n  注意：调用这个函数之前一定要先给 nums 排序\n  n 填写想求的是几数之和，start 从哪个索引开始计算（一般填 0），target 填想凑出的目标和\n   */\n  const nSumTarget = (nums, n, start, target) => {\n    let size = nums.length;\n    let res = [];\n    // 至少是 2Sum，且数组大小不应该小于 n\n    if (n < 2 || size < n) return res;\n    // 2Sum 是 base case\n    if (n == 2) {\n      // 双指针那一套操作\n      let lo = start,\n        hi = size - 1;\n      while (lo < hi) {\n        let sum = nums[lo] + nums[hi];\n        let left = nums[lo],\n          right = nums[hi];\n        if (sum < target) {\n          while (lo < hi && nums[lo] == left) lo++;\n        } else if (sum > target) {\n          while (lo < hi && nums[hi] == right) hi--;\n        } else {\n          res.push([left, right]);\n          while (lo < hi && nums[lo] == left) lo++;\n          while (lo < hi && nums[hi] == right) hi--;\n        }\n      }\n    } else {\n      // n > 2 时，递归计算 (n-1)Sum 的结果\n      for (let i = start; i < size; i++) {\n        let sub = nSumTarget(nums, n - 1, i + 1, target - nums[i]);\n        for (let arr of sub) {\n          arr.push(nums[i]);\n          res.push(arr);\n        }\n        while (i < size - 1 && nums[i] == nums[i + 1]) i++;\n      }\n    }\n    return res;\n  };\n  // n 为 4，从 nums[0] 开始计算和为 target 的四元组\n  return nSumTarget(nums, 4, 0, target);\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8ec6fe27daaf47768fcea39094d7547f~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("以上~~ 后续会持续带来双指针相关题目；")]),s._v(" "),a("blockquote",[a("p",[s._v("我是掘金安东尼，输出暴露输入，技术洞见生活，再会~")])])])}),[],!1,null,null,null);n.default=e.exports}}]);