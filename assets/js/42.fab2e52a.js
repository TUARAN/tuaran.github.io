(window.webpackJsonp=window.webpackJsonp||[]).push([[42],{534:function(s,n,a){"use strict";a.r(n);var t=a(2),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("本文首发在掘金"),a("a",{attrs:{href:"https://juejin.im/post/6857455079130464263",target:"_blank",rel:"noopener noreferrer"}},[s._v("关于 JS 原型你必须要知道的二三"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"小引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小引"}},[s._v("#")]),s._v(" 小引")]),s._v(" "),a("p",[s._v("本瓜一向认为：学习不是一蹴而就的事情。一定是要求学习者对知识点进行反复咀嚼拿捏、不断打破重塑，长此以往，才以期达到融会贯通、为我所用的程度。所谓："),a("strong",[s._v("温故知新，不亦乐乎？")])]),s._v(" "),a("p",[s._v("对于 JS 技能拥有者这来说，"),a("strong",[s._v("原型")]),s._v("这个概念一定是值得刻在心里去反复玩味的。此篇且暂让本瓜带你再看 JS 原型二三，也许会有新收获，何乐不为？")]),s._v(" "),a("blockquote",[a("p",[s._v("撰文不易✍ 还需鼓励💪 小手一点👍 好运连连🤞")])]),s._v(" "),a("h2",{attrs:{id:"原型的本意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型的本意"}},[s._v("#")]),s._v(" 原型的本意")]),s._v(" "),a("h3",{attrs:{id:"原型概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型概念"}},[s._v("#")]),s._v(" 原型概念")]),s._v(" "),a("p",[s._v("JavaScript 常被描述为一种"),a("strong",[s._v("基于原型")]),s._v("的语言 (prototype-based language) —— 每个对象拥有一个原型对象，对象以其原型为模板、从原型继承方法和属性。（MDN）")]),s._v(" "),a("p",[s._v("几乎所有 JavaScript 中的对象都是位于原型链顶端的 Object 的实例，这便是“万物皆对象”的一种解释。")]),s._v(" "),a("p",[s._v("原型是我们自然思维的产物。常言道：“照葫芦画瓢”、“照猫画虎”，这里的“葫芦”就是瓢的原型，“猫”就是“虎”的原型。（ps:上周末看了电影《多力特的奇幻冒险》，老虎也喜欢去抓动的光点，太搞笑了，原型继承实锤了！）")]),s._v(" "),a("h3",{attrs:{id:"原型和类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型和类"}},[s._v("#")]),s._v(" 原型和类")]),s._v(" "),a("p",[s._v("既然万物皆对象？那你肯定产生过这样的疑问：JavaScript 是面向对象语言（OOP）吗？它为什么没有像 Java 中"),a("strong",[s._v("类")]),s._v("的概念？")]),s._v(" "),a("p",[s._v("JavaScript 作者 Brendan Eich（布兰登·艾奇）曾说过：“JavaScript 是 C 语言和 Self 语言一夜情的产物。”（os:的确一夜情，谁能想到，有着百万学习者的语言地创造只花了 10 天？）")]),s._v(" "),a("p",[s._v("他的设计思路是这样的：")]),s._v(" "),a("ol",[a("li",[s._v("借鉴 C 语言的基本语法；")]),s._v(" "),a("li",[s._v("借鉴 Java 语言的数据类型和内存管理；")]),s._v(" "),a("li",[s._v('借鉴 Scheme 语言，将函数提升到"第一等公民"（first class）的地位；')]),s._v(" "),a("li",[s._v("借鉴 Self 语言，使用基于原型（prototype）的继承机制。")])]),s._v(" "),a("p",[s._v("所以，JavaScript 非严格意义上的面向对象（它没有封装成类），"),a("strong",[s._v("基于原型的继承机制")]),s._v("是 JS 深入骨髓、嵌入灵魂的特性。")]),s._v(" "),a("ul",[a("li",[s._v("注：ECMAScript 2015（ES6） 中引入的 JavaScript 类实质上是 JavaScript 现有的基于原型的继承的语法糖。类语法不会为JavaScript 引入新的面向对象的继承模型。")])]),s._v(" "),a("h3",{attrs:{id:"typescript-大法好"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#typescript-大法好"}},[s._v("#")]),s._v(" TypeScript 大法好")]),s._v(" "),a("p",[s._v("小广告:本瓜最近在浅入深出 TypeScript，已撰文部分，不如点个关注呗，后续更新。")]),s._v(" "),a("p",[s._v("TypeScript 是 JavaScript 的超集，支持面向对象的所有特性，比如 类、接口等。")]),s._v(" "),a("p",[s._v("此处列一小例：")]),s._v(" "),a("p",[s._v("// TypeScript")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Car { \n    // 字段 \n    engine:string; \n \n    // 构造函数 \n    constructor(engine:string) { \n        this.engine = engine \n    }  \n \n    // 方法 \n    disp():void { \n        console.log("发动机为 :   "+this.engine) \n    } \n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("// 编译成 JavaScript（亲测）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var Car = /** @class */ (function () {\n    // 构造函数 \n    function Car(engine) {\n        this.engine = engine;\n    }\n    // 方法 \n    Car.prototype.disp = function () {\n        console.log("发动机为 :   " + this.engine);\n    };\n    return Car;\n}());\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("可以看到 TypeScript 类的定义像极了 Java，编译成 JavaScript 后依然是转成了在原型链上进行操作。")]),s._v(" "),a("p",[s._v("此处本瓜抛一个小问题：基于类一定比基于原型要好吗？它们各自的优势是什么？欢迎讨论~")]),s._v(" "),a("h2",{attrs:{id:"call、apply、bind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call、apply、bind"}},[s._v("#")]),s._v(" call、apply、bind")]),s._v(" "),a("p",[s._v("在讲基于原型的继承方式之前，要先知道这三位。我想你一定不会陌生，它们可是手中利器。")]),s._v(" "),a("h3",{attrs:{id:"call、apply"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#call、apply"}},[s._v("#")]),s._v(" call、apply")]),s._v(" "),a("p",[s._v("call 和 apply 是为了动态改变 this 而出现的，当一个 object 没有某个方法，但是其他函数的有，我们可以借助 call 或apply 用其它对象的方法来操作。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Free() {\n    this.free=\"free\"\n}\n\nfunction Food(name1,name2) {// call 接收的是单独的参数\n    Free.call(this, name1,name2);\n}\nconsole.log(new Food('banana','apple').free);\n\nfunction Foods(arr){ // apply 接收的是数组\n    Free.apply(this, arr);\n}\n\nconsole.log(new Food(['banana','apple']).free);\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("h3",{attrs:{id:"bind"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bind"}},[s._v("#")]),s._v(" bind")]),s._v(" "),a("p",[s._v("bind 用法和 call 类似，只不过调用 bind 后方法不能立即执行（因为其返回的是函数），需要再次调用，其实就是柯里化的一个语法糖。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var food={name:\"apple\",func:function(val){console.log(this.name + val)}}\n\nvar banana=food.func.bind({name:'banana'},'good taste')\n\nbanana()\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这里为"),a("strong",[s._v("函数柯里化")]),s._v("挖一个坑，待填。")]),s._v(" "),a("h2",{attrs:{id:"继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#继承"}},[s._v("#")]),s._v(" 继承")]),s._v(" "),a("p",[s._v("重点来啦！如果你想掌握好 JS 原型基础，以下的五种继承方式，请一定烂熟于心。自己动动小手，F12 在控制台上调一下吧？")]),s._v(" "),a("h3",{attrs:{id:"原型链继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型链继承"}},[s._v("#")]),s._v(" 原型链继承")]),s._v(" "),a("ul",[a("li",[s._v("原型链")])]),s._v(" "),a("p",[s._v("原型链？不要那些繁琐的官方解释。")]),s._v(" "),a("p",[s._v("本瓜只记住一个：当查找某一个对象的属性/方法的时候，如果自己没有这个属性/方法，则去找创建这个对象的构造函数里面去找，还找不到，就继续向上找，直到查到 "),a("code",[s._v("Object.prototype."),a("strong",[s._v("proto")])]),s._v("，这样一个链式查找的过程，就是原型链。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let obj = new Object()\nobj.__proto__ === Object.prototype // true\n\nObject.prototype.__proto__=null // 万物皆空有木有\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("原型链继承")])]),s._v(" "),a("p",[s._v("优点：能够继承父类的原型方法。（示例一）")]),s._v(" "),a("p",[s._v("缺点：原型上的所有属性都是共享的，所以任何一个子类实例修改了原型中的属性（引用类型），其他实例获取到的属性值也会引起变化。（示例二）")]),s._v(" "),a("p",[a("strong",[s._v("示例一:")])]),s._v(" "),a("p",[s._v("// 你父母有房，你就有房")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Parent(){\n    this.house='我有房'\n}\nfunction Son(){\n    \n}\n\nSon.prototype = new Parent()\nSon.prototype.constructor=Son // 为了更严谨，更改默认指回\nvar son1=new Son()\nconsole.log(son1.house) // 我有房\nSon.prototype.constructor\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("舒服啦，《我的区长父亲》系列。")]),s._v(" "),a("p",[a("strong",[s._v("示例二:")])]),s._v(" "),a("p",[s._v("// 如果有两个儿子，父母只一套房，他们各自想刷不同颜色的墙")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Parent(){\n    this.houseColor=[]\n}\nfunction Son(){\n    \n}\nSon.prototype = new Parent()\nSon.prototype.constructor=Son\n\nvar son1=new Son()\nson1.houseColor.push('刷白墙')\n\nvar son2=new Son()\nson2.houseColor.push('刷红墙')\n\nconsole.log(son1.houseColor) // [\"刷白墙\", \"刷红墙\"]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("这下估计就要干仗了！老大刚刷的白墙，被老二又给刷红了。。。")]),s._v(" "),a("h3",{attrs:{id:"构造继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造继承"}},[s._v("#")]),s._v(" 构造继承")]),s._v(" "),a("p",[s._v("优点：解决父类属性是引用类型被所有实例共享的问题和给子类传参的问题。（示例三）")]),s._v(" "),a("p",[s._v("缺点：不能继承父类超类型的原型方法。（示例四）")]),s._v(" "),a("p",[a("strong",[s._v("示例三：")])]),s._v(" "),a("p",[s._v("// 解决两个儿子刷墙问题")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Parent(){\n    this.houseColor=[]\n}\nfunction Son(){\n    Parent.call(this) // 更改 this 指向\n}\nvar son1 = new Son()\nson1.houseColor.push('刷白墙')\n\nvar son2 = new Son()\nson2.houseColor.push('刷红墙')\n\nconsole.log(son1.houseColor) // [\"刷白墙\"]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("这下大儿子不会生气了，他刷的白墙还是白墙。")]),s._v(" "),a("p",[a("strong",[s._v("示例四：")])]),s._v(" "),a("p",[s._v("// 一波刚平，一波又起。这下没有继承原型对象。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function Parent(){\n}\nfunction Son(){\n    Parent.call(this) // 更改 this 指向\n}\n\nParent.prototype.getCar = function(){\n    return '我有车'\n}\n\nvar son1 = new Son()\nson1.getCar() // getCar is not a function\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("h3",{attrs:{id:"组合继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合继承"}},[s._v("#")]),s._v(" 组合继承")]),s._v(" "),a("p",[s._v("组合继承 == 原型链继承 + 构造继承")]),s._v(" "),a("p",[s._v("优点：二者优点")]),s._v(" "),a("p",[s._v("缺点：父类构造函数执行两次的问题。（示例五）")]),s._v(" "),a("p",[a("strong",[s._v("示例五：")])]),s._v(" "),a("p",[s._v("// 组合继承：我全都要。（os:全都要，开销就大。。。）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function Parent(){\n    this.houseColor=[]\n}\nfunction Son(){\n    Parent.call(this) // 更改 this 指向\n}\n\nParent.prototype.getCar = function(){\n    return \'我有车\'\n}\n\nSon.prototype = new Parent()\nSon.prototype.constructor = Son\n\nvar son1 = new Son()\nson1.houseColor.push(\'刷白墙\')\n\nvar son2 = new Son()\nson2.houseColor.push(\'刷红墙\')\n\nconsole.log(son1.houseColor,son1.getCar()) // ["刷白墙"] "我有车"\nconsole.log(son2.houseColor,son2.getCar()) // ["刷红墙"] "我有车"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("p",[s._v("这样又刷了墙，又获得了车。一家人其乐融融，就是父母的压力有点大。")]),s._v(" "),a("h3",{attrs:{id:"寄生组合继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#寄生组合继承"}},[s._v("#")]),s._v(" 寄生组合继承")]),s._v(" "),a("p",[s._v("为了解决组合继承的缺点，于是有了寄生组合继承。")]),s._v(" "),a("p",[s._v("实质是：通过Object.create(obj)创建一个原型是 obj 的空对象赋值给子类的原型。")]),s._v(" "),a("p",[a("strong",[s._v("示例六：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function Parent(){\n    this.houseColor=[]\n}\nfunction Son(){\n    Parent.call(this) // 更改 this 指向\n}\n\nParent.prototype.getCar = function(){\n    return \'我有车\'\n}\n\nSon.prototype =  Object.create(Parent.prototype)\nSon.prototype.constructor = Son\n\nvar son1 = new Son()\nson1.houseColor.push(\'刷白墙\')\n\nvar son2 = new Son()\nson2.houseColor.push(\'刷红墙\')\n\nconsole.log(son1.houseColor,son1.getCar()) // ["刷白墙"] "我有车"\nconsole.log(son2.houseColor,son2.getCar()) // ["刷红墙"] "我有车"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h3",{attrs:{id:"es6-继承"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#es6-继承"}},[s._v("#")]),s._v(" ES6 继承")]),s._v(" "),a("p",[s._v("通过 class,extends 关键字实现继承。需要清楚的是：ES6 中的类是一个语法糖，本质上还是由 ES5 的语法实现的。")]),s._v(" "),a("p",[a("strong",[s._v("示例七：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Parent{\n    constructor(){\n        this.houseColor = []\n    }\n    getCar(){\n        return \'我有旧车\'\n    }\n}\n\nclass Son extends Parent{\n    constructor(color){\n        super()\n        this.houseColor = color\n    }\n    getCar(){\n        return "我有新车"\n    }\n}\nconst son1 = new Son("刷白墙")\nconst son2 = new Son("刷红墙")\nconsole.log(son1.houseColor,son1.getCar()) // ["刷白墙"] "我有车"\nconsole.log(son2.houseColor,son2.getCar()) // ["刷红墙"] "我有车"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br")])]),a("h2",{attrs:{id:"发布订阅模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#发布订阅模式"}},[s._v("#")]),s._v(" 发布订阅模式")]),s._v(" "),a("p",[s._v("这里为什么要把发布订阅模式点出来呢？")]),s._v(" "),a("p",[s._v("因为它也涉及多种情况。")]),s._v(" "),a("ol",[a("li",[s._v("多人订阅一个发布。")]),s._v(" "),a("li",[s._v("多人订阅多个发布。")]),s._v(" "),a("li",[s._v("一人订阅一个发布（示例八）。")]),s._v(" "),a("li",[s._v("一人订阅多个发布。")])]),s._v(" "),a("p",[s._v("每一种都值得动手去写一些，玩一玩。")]),s._v(" "),a("p",[a("strong",[s._v("示例八：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/*paper*/     \nvar paper={\n    listen:\'\',\n    addlisten:function(fn){//增加订阅者\n        this.listenList=fn;\n    },\n    trigger:function(){//发布消息\n        this.listenList.apply(this,arguments);\n    }\n}\n\n/*订阅*/\npaper.addlisten(function(val){\n    console.log("小王订阅消息："+val); \n}); \n\n/*发布*/\npaper.trigger("新闻周刊到了");\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("这里为"),a("strong",[s._v("24 种设计模式")]),s._v("挖一个坑，待填。")]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("本篇是本瓜"),a("strong",[s._v("浅入深出")]),s._v(" TS 过程中的衍生篇，这些老生常谈的东西偶尔拿出来再看看，其实感觉真的还不错！（还有比如this、作用域这些没细说）最重要的是自己能在控制台写一写。旧的知识点和新的知识点产生碰撞的时候，便是收获的时候。")]),s._v(" "),a("p",[s._v("进一寸有进一寸的欢喜，如是而已。")]),s._v(" "),a("blockquote",[a("p",[s._v("我是掘金安东尼，与你同行！")])]),s._v(" "),a("h2",{attrs:{id:"参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[s._v("#")]),s._v(" 参考")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Object_prototypes",target:"_blank",rel:"noopener noreferrer"}},[s._v("对象原型"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain",target:"_blank",rel:"noopener noreferrer"}},[s._v("继承与原型链"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.infoq.cn/article/3*8POPcRSClQh1Cp9Sqg",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript 到底是面向对象还是基于对象？-winter"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2011/06/birth_of_javascript.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("Javascript 诞生记"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://laixiazheteng.com/article/page/id/omIoPb1AIBPu",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript 实现继承的方式"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=e.exports}}]);