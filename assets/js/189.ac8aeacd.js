(window.webpackJsonp=window.webpackJsonp||[]).push([[189],{682:function(s,e,n){"use strict";n.r(e);var a=n(2),r=Object(a.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("一起养成写作习惯！这是我参与「掘金日新计划 · 4 月更文挑战」的第2天，"),n("a",{attrs:{href:"https://juejin.cn/post/7080800226365145118",title:"https://juejin.cn/post/7080800226365145118",target:"_blank",rel:"noopener noreferrer"}},[s._v("点击查看活动详情"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("RxJS 转换操作符，继续冲冲冲！熟悉的温故知新，不熟悉的混个脸熟先~")]),s._v(" "),n("h3",{attrs:{id:"buffer"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#buffer"}},[s._v("#")]),s._v(" buffer")]),s._v(" "),n("p",[n("code",[s._v("buffer")]),s._v(" 顾名思义就是“缓存”，可以在某些条件下进行值的收集，然后再在某些条件下，将收集的值发出。除了 "),n("code",[s._v("buffer")]),s._v(" 同类的还有：")]),s._v(" "),n("ul",[n("li",[s._v("bufferCount：收集发出的值，直到收集完提供的数量的值才将其作为数组发出。")]),s._v(" "),n("li",[s._v("bufferTime：收集发出的值，直到经过了提供的时间才将其作为数组发出。")]),s._v(" "),n("li",[s._v("bufferToggle：开启开关以捕获源 observable 所发出的值，关闭开关以将缓冲的值作为数组发出。")]),s._v(" "),n("li",[s._v("bufferWhen：收集值，直到关闭选择器发出值才发出缓冲的值")])]),s._v(" "),n("p",[s._v("使用方法大同小异，简单理解为：车站安检，人很多的时候，就有专人在那设卡，控制流量，当设卡的人觉得在某个条件下可以了，就放卡，这里的条件可以是：数量、时间、自定义开启、其它条件值；")]),s._v(" "),n("p",[s._v("e.g.")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 创建每1秒发出值的 observable\nconst myInterval = interval(1000);\n// 创建页面点击事件的 observable\nconst bufferBy = fromEvent(document, 'click');\n\n/*\n  收集由 myInterval 发出的所有值，直到我们点击页面。此时 bufferBy 会发出值以完成缓存。\n  将自上次缓冲以来收集的所有值传递给数组。\n*/\nconst myBufferedInterval = myInterval.pipe(buffer(bufferBy));\n// 打印值到控制台\n\n// 例如 输出: [1,2,3] ... [4,5,6,7,8]\nconst subscribe = myBufferedInterval.subscribe(val =>\n  console.log(' Buffered Values:', val)\n);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("h3",{attrs:{id:"concatmap"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#concatmap"}},[s._v("#")]),s._v(" concatMap")]),s._v(" "),n("p",[n("code",[s._v("concatMap")]),s._v(" 可以将值进行映射，还有一个与之相似的是 "),n("code",[s._v("mergeMap")]),s._v("，类比来说：一个是 reduce promise，一个是 PromiseAll；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// concatMap\n// 发出 'Hello' 和 'Goodbye'\nconst source = of('Hello', 'Goodbye');\n\n// 使用 promise 的示例\nconst examplePromise = val => new Promise(resolve => resolve(`${val} World!`));\n\n// 将 source 的值映射成内部 observable，当一个完成发出结果后再继续下一个\nconst example = source.pipe(concatMap(val => examplePromise(val)));\n\n// 输出: 'Example w/ Promise: 'Hello World', Example w/ Promise: 'Goodbye World'\nconst subscribe = example.subscribe(val =>\n  console.log('Example w/ Promise:', val)\n);\n\n\n// mergeMap\n// 发出 'Hello'\nconst source = of('Hello');\n\n// mergeMap 还会发出 promise 的结果\nconst myPromise = val =>\n  new Promise(resolve => resolve(`${val} World From Promise!`));\n  \n// 映射成 promise 并发出结果\nconst example = source.pipe(mergeMap(val => myPromise(val)));\n\n// 输出: 'Hello World From Promise'\nconst subscribe = example.subscribe(val => console.log(val));\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br")])]),n("h3",{attrs:{id:"map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[s._v("#")]),s._v(" map")]),s._v(" "),n("p",[n("code",[s._v("map")]),s._v(" 最关键了，它能对源 observable 的每个值应用投射函数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 发出 (1,2,3,4,5)\nconst source = from([1, 2, 3, 4, 5]);\n// 每个数字加10\nconst example = source.pipe(map(val => val + 10));\n// 输出: 11,12,13,14,15\nconst subscribe = example.subscribe(val => console.log(val));\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("h3",{attrs:{id:"reduce"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[s._v("#")]),s._v(" reduce")]),s._v(" "),n("p",[s._v("常见的还有 "),n("code",[s._v("reduce")]),s._v("，它能将源 observalbe 的值归并为单个值，当源 observable 完成时将这个值发出。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const source = of(1, 2, 3, 4);\nconst example = source.pipe(reduce((acc, val) => acc + val));\n\n// 输出: Sum: 10'\nconst subscribe = example.subscribe(val => console.log('Sum:', val));\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("h3",{attrs:{id:"window"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#window"}},[s._v("#")]),s._v(" window")]),s._v(" "),n("p",[s._v("还有："),n("code",[s._v("window")]),s._v(" 操作符，是时间窗口值的 observable；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// RxJS v6+\nimport { timer, interval } from 'rxjs';\nimport { window, scan, mergeAll } from 'rxjs/operators';\n\n// 立即发出值，然后每秒发出值\nconst source = timer(0, 1000);\nconst example = source.pipe(window(interval(3000)));\nconst count = example.pipe(scan((acc, curr) => acc + 1, 0));\n/*\n  \"Window 1:\"\n  0\n  1\n  2\n  \"Window 2:\"\n  3\n  4\n  5\n  ...\n*/\nconst subscribe = count.subscribe(val => console.log(`Window ${val}:`));\nconst subscribeTwo = example\n  .pipe(mergeAll())\n  .subscribe(val => console.log(val));\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[s._v("其实除了："),n("code",[s._v("window")]),s._v("，还有其衍生的 windowCount、windowTime、windowToggle、windowWhen。与 "),n("code",[s._v("buffer")]),s._v(" 的衍生也很像。")]),s._v(" "),n("hr"),s._v("\nOK，以上便是本篇分享，往期关于 RxJS 的内容：\n"),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.cn/post/7081464046678966302",target:"_blank",rel:"noopener noreferrer"}},[s._v("3 分钟温故知新 RxJS 创建实例操作符"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/7070312956713500703",title:"https://juejin.cn/post/7070312956713500703",target:"_blank",rel:"noopener noreferrer"}},[s._v("你就是函数响应式编程（FRP）啊？!【附 RxJS 实战】"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/7072898729388277797",title:"https://juejin.cn/post/7072898729388277797",target:"_blank",rel:"noopener noreferrer"}},[s._v("为什么说：被观察者是 push 数据，迭代者是 pull 数据？"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/7074726064966582309",title:"https://juejin.cn/post/7074726064966582309",target:"_blank",rel:"noopener noreferrer"}},[s._v("探秘 RxJS Observable 为什么要长成这个样子？！"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/7029093184332365855",title:"https://juejin.cn/post/7029093184332365855",target:"_blank",rel:"noopener noreferrer"}},[s._v("Js 异步处理演进，Callback=>Promise=>Observer"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.cn/post/7029465648174465055",title:"https://juejin.cn/post/7029465648174465055",target:"_blank",rel:"noopener noreferrer"}},[s._v("继续解惑，异步处理 —— RxJS Observable"),n("OutboundLink")],1)])]),s._v(" "),n("blockquote",[n("p",[s._v("我是掘金安东尼，输出暴露输入，技术洞见生活，再会~ 👍👍👍")])])])}),[],!1,null,null,null);e.default=r.exports}}]);