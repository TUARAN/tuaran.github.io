(window.webpackJsonp=window.webpackJsonp||[]).push([[77],{570:function(n,s,a){"use strict";a.r(s);var e=a(2),t=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[a("strong",[n._v("算法系列， 日拱一卒。")]),n._v(" 更多精彩，请关注我的 "),a("a",{attrs:{href:"https://juejin.cn/column/7026262697683451917",target:"_blank",rel:"noopener noreferrer"}},[n._v("算法专栏"),a("OutboundLink")],1),n._v(" (●'◡'●)")]),n._v(" "),a("p",[a("strong",[n._v("本篇带来利用大小堆解决“获取数据流的中位数”的问题。")])]),n._v(" "),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-median-from-data-stream",target:"_blank",rel:"noopener noreferrer"}},[n._v("题目"),a("OutboundLink")],1),n._v("：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("中位数是有序列表中间的数。如果列表长度是偶数，中位数则是中间两个数的平均值。\n\n例如，\n\n[2,3,4] 的中位数是 3\n\n[2,3] 的中位数是 (2 + 3) / 2 = 2.5\n\n设计一个支持以下两种操作的数据结构：\n\nvoid addNum(int num) - 从数据流中添加一个整数到数据结构中。\ndouble findMedian() - 返回目前所有元素的中位数。\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("进阶:\n\n如果数据流中所有整数都在 0 到 100 范围内，你将如何优化你的算法？\n如果数据流中 99% 的整数都在 0 到 100 范围内，你将如何优化你的算法？\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[a("strong",[n._v("解题思路：")])]),n._v(" "),a("p",[n._v("在数据流中，数据会不断涌入结构中，那么也就面临着需要多次动态调整以获得中位数。 因此实现的数据结构需要既需要快速找到中位数，也需要做到快速调整。")]),n._v(" "),a("p",[n._v("首先能想到就是"),a("strong",[n._v("二叉搜索树，在平衡状态下，树顶必定是中间数，然后再根据长度的奇偶性决定是否取两个数。")])]),n._v(" "),a("p",[n._v("此方法效率高，但是手动编写较费时费力。")]),n._v(" "),a("p",[n._v("根据只需获得中间数的想法，可以将数据分为左右两边，一边以最大堆的形式实现，可以快速获得左侧最大数， 另一边则以最小堆的形式实现。其中需要注意的一点就是左右侧数据的长度差不能超过1。 这种实现方式的效率与AVL平衡二叉搜索树的效率相近，但编写更快；")]),n._v(" "),a("ul",[a("li",[n._v("AVL 平衡二叉搜索树")])]),n._v(" "),a("blockquote",[a("p",[a("strong",[n._v("平衡二叉查找树")]),n._v("：简称平衡二叉树。由前苏联的数学家 "),a("strong",[n._v("A")]),n._v("delse-"),a("strong",[n._v("V")]),n._v("elskil 和 "),a("strong",[n._v("L")]),n._v("andis 在 1962 年提出的高度平衡的二叉树，根据科学家的英文名也称为 AVL 树。它具有如下几个性质：")]),n._v(" "),a("ol",[a("li",[n._v("可以是空树。")]),n._v(" "),a("li",[n._v("假如不是空树，任何一个结点的左子树与右子树都是平衡二叉树，并且高度之差的绝对值不超过 1。")])])]),n._v(" "),a("p",[n._v("查找、插入和删除在平均和最坏情况下的时间复杂度都是 O(log n)；")]),n._v(" "),a("p",[a("strong",[n._v("图解：")]),n._v("（"),a("a",{attrs:{href:"https://leetcode-cn.com/problems/find-median-from-data-stream/solution/tu-jie-zui-da-dui-zui-xiao-dui-jszi-ding-gwpy/",target:"_blank",rel:"noopener noreferrer"}},[n._v("图解来源-Maple"),a("OutboundLink")],1),n._v("）")]),n._v(" "),a("p",[n._v("动态维护一个最大堆和最小堆，最大堆存储一半数据，最小堆存储一半数据，维持最大堆的堆顶比最小堆的堆顶小，并且两个堆的大小最多相差1。")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a7c1c66667c34d9bb46e8cb5a1a819c1~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),n._v(" "),a("p",[n._v("插入新元素时，具体情况分析如下：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c71e54ba01d84c4a832faf01bcfb197f~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),n._v(" "),a("p",[a("strong",[n._v("JS 实现：")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("const MedianFinder = function () {\n    // 默认最大堆\n    const defaultCmp = (x, y) => x > y;\n    // 交换元素\n    const swap = (arr, i, j) => ([arr[i], arr[j]] = [arr[j], arr[i]]);\n    // 堆类，默认最大堆\n    class Heap {\n        constructor(cmp = defaultCmp) {\n            this.container = [];\n            this.cmp = cmp;\n        }\n        // 插入\n        insert(data) {\n            const { container, cmp } = this;\n            container.push(data);\n            let index = this.size() - 1;\n            while (index) {\n                let parent = (index - 1) >> 1;\n                if (!cmp(container[index], container[parent])) {\n                    return;\n                }\n                swap(container, index, parent);\n                index = parent;\n            }\n        }\n        // 弹出堆顶，并返回\n        pop() {\n            const { container, cmp } = this;\n            if (!this.size()) {\n                return null;\n            }\n            swap(container, 0, this.size() - 1);\n            const res = container.pop();\n            const length = this.size();\n            let index = 0,\n                exchange = index * 2 + 1;\n            while (exchange < length) {\n                // // 以最大堆的情况来说：如果有右节点，并且右节点的值大于左节点的值\n                let right = index * 2 + 2;\n                if (right < length && cmp(container[right], container[exchange])) {\n                    exchange = right;\n                }\n                if (!cmp(container[exchange], container[index])) {\n                    break;\n                }\n                swap(container, exchange, index);\n                index = exchange;\n                exchange = index * 2 + 1;\n            }\n            return res;\n        }\n        // 获取堆大小\n        size() {\n            return this.container.length;\n        }\n        // 获取堆顶\n        peek() {\n            if (this.size()) return this.container[0];\n            return null;\n        }\n    }\n    // 最大堆\n    this.A = new Heap();\n    // 最小堆\n    this.B = new Heap((x, y) => x < y);\n};\nMedianFinder.prototype.addNum = function (num) {\n    if (this.A.size() !== this.B.size()) {\n        // 当N为奇数，需要向B添加一个元素\n        // 先将num插入A，再将A堆顶弹出，插入B\n        this.A.insert(num);\n        this.B.insert(this.A.pop());\n    } else {\n        // 当N为偶数，需要向A添加一个元素\n        // 先将num插入B，再将B堆顶弹出，插入A\n        this.B.insert(num);\n        this.A.insert(this.B.pop());\n    }\n};\nMedianFinder.prototype.findMedian = function () {\n    // 若总和为偶数，返回两个堆顶的平均数\n    // 若总和为奇数，返回A的堆顶\n    return this.A.container.length === this.B.container.length\n        ? (this.A.peek() + this.B.peek()) / 2\n        : this.A.peek();\n};\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br"),a("span",{staticClass:"line-number"},[n._v("22")]),a("br"),a("span",{staticClass:"line-number"},[n._v("23")]),a("br"),a("span",{staticClass:"line-number"},[n._v("24")]),a("br"),a("span",{staticClass:"line-number"},[n._v("25")]),a("br"),a("span",{staticClass:"line-number"},[n._v("26")]),a("br"),a("span",{staticClass:"line-number"},[n._v("27")]),a("br"),a("span",{staticClass:"line-number"},[n._v("28")]),a("br"),a("span",{staticClass:"line-number"},[n._v("29")]),a("br"),a("span",{staticClass:"line-number"},[n._v("30")]),a("br"),a("span",{staticClass:"line-number"},[n._v("31")]),a("br"),a("span",{staticClass:"line-number"},[n._v("32")]),a("br"),a("span",{staticClass:"line-number"},[n._v("33")]),a("br"),a("span",{staticClass:"line-number"},[n._v("34")]),a("br"),a("span",{staticClass:"line-number"},[n._v("35")]),a("br"),a("span",{staticClass:"line-number"},[n._v("36")]),a("br"),a("span",{staticClass:"line-number"},[n._v("37")]),a("br"),a("span",{staticClass:"line-number"},[n._v("38")]),a("br"),a("span",{staticClass:"line-number"},[n._v("39")]),a("br"),a("span",{staticClass:"line-number"},[n._v("40")]),a("br"),a("span",{staticClass:"line-number"},[n._v("41")]),a("br"),a("span",{staticClass:"line-number"},[n._v("42")]),a("br"),a("span",{staticClass:"line-number"},[n._v("43")]),a("br"),a("span",{staticClass:"line-number"},[n._v("44")]),a("br"),a("span",{staticClass:"line-number"},[n._v("45")]),a("br"),a("span",{staticClass:"line-number"},[n._v("46")]),a("br"),a("span",{staticClass:"line-number"},[n._v("47")]),a("br"),a("span",{staticClass:"line-number"},[n._v("48")]),a("br"),a("span",{staticClass:"line-number"},[n._v("49")]),a("br"),a("span",{staticClass:"line-number"},[n._v("50")]),a("br"),a("span",{staticClass:"line-number"},[n._v("51")]),a("br"),a("span",{staticClass:"line-number"},[n._v("52")]),a("br"),a("span",{staticClass:"line-number"},[n._v("53")]),a("br"),a("span",{staticClass:"line-number"},[n._v("54")]),a("br"),a("span",{staticClass:"line-number"},[n._v("55")]),a("br"),a("span",{staticClass:"line-number"},[n._v("56")]),a("br"),a("span",{staticClass:"line-number"},[n._v("57")]),a("br"),a("span",{staticClass:"line-number"},[n._v("58")]),a("br"),a("span",{staticClass:"line-number"},[n._v("59")]),a("br"),a("span",{staticClass:"line-number"},[n._v("60")]),a("br"),a("span",{staticClass:"line-number"},[n._v("61")]),a("br"),a("span",{staticClass:"line-number"},[n._v("62")]),a("br"),a("span",{staticClass:"line-number"},[n._v("63")]),a("br"),a("span",{staticClass:"line-number"},[n._v("64")]),a("br"),a("span",{staticClass:"line-number"},[n._v("65")]),a("br"),a("span",{staticClass:"line-number"},[n._v("66")]),a("br"),a("span",{staticClass:"line-number"},[n._v("67")]),a("br"),a("span",{staticClass:"line-number"},[n._v("68")]),a("br"),a("span",{staticClass:"line-number"},[n._v("69")]),a("br"),a("span",{staticClass:"line-number"},[n._v("70")]),a("br"),a("span",{staticClass:"line-number"},[n._v("71")]),a("br"),a("span",{staticClass:"line-number"},[n._v("72")]),a("br"),a("span",{staticClass:"line-number"},[n._v("73")]),a("br"),a("span",{staticClass:"line-number"},[n._v("74")]),a("br"),a("span",{staticClass:"line-number"},[n._v("75")]),a("br"),a("span",{staticClass:"line-number"},[n._v("76")]),a("br"),a("span",{staticClass:"line-number"},[n._v("77")]),a("br"),a("span",{staticClass:"line-number"},[n._v("78")]),a("br"),a("span",{staticClass:"line-number"},[n._v("79")]),a("br"),a("span",{staticClass:"line-number"},[n._v("80")]),a("br"),a("span",{staticClass:"line-number"},[n._v("81")]),a("br"),a("span",{staticClass:"line-number"},[n._v("82")]),a("br"),a("span",{staticClass:"line-number"},[n._v("83")]),a("br"),a("span",{staticClass:"line-number"},[n._v("84")]),a("br"),a("span",{staticClass:"line-number"},[n._v("85")]),a("br"),a("span",{staticClass:"line-number"},[n._v("86")]),a("br")])]),a("p",[n._v("基于图解再看代码实现，就太清晰了~~")]),n._v(" "),a("hr"),n._v(" "),a("p",[n._v("OK，以上就是本篇分享~ 撰文不易，点赞鼓励👍👍👍")]),n._v(" "),a("p",[n._v("我是掘金安东尼，公众号同名，日拱一卒、日掘一金，再会~")])])}),[],!1,null,null,null);s.default=t.exports}}]);