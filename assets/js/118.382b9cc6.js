(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{619:function(s,a,n){"use strict";n.r(a);var e=n(2),r=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("本篇是《JS如何函数式编程》系列第五篇！共七篇，似乎已经能望见胜利的彼岸了！！！")]),s._v(" "),n("p",[s._v("纪伯伦曾说过：我们走的太久，以至于忘了为什么出发。")]),s._v(" "),n("blockquote",[n("p",[s._v("We already walked too far, down to we had forgotten why embarked.")])]),s._v(" "),n("p",[s._v("所以，第五篇开始前，咱们不如先来一个对每篇的梳理：")]),s._v(" "),n("h2",{attrs:{id:"前文梳理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前文梳理"}},[s._v("#")]),s._v(" 前文梳理")]),s._v(" "),n("h3",{attrs:{id:"第一篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第一篇"}},[s._v("#")]),s._v(" 第一篇")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6968259661304692750",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（一）》"),n("OutboundLink")],1),s._v("，作为“纲要篇”，重点解释了:")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("本系列是基于"),n("a",{attrs:{href:"https://juejin.cn/post/6950878916135354398",target:"_blank",rel:"noopener noreferrer"}},[s._v("《medium 五万赞好文-《我永远不懂 JS 闭包》》"),n("OutboundLink")],1),s._v("和"),n("a",{attrs:{href:"https://juejin.cn/post/6964649946238681125",target:"_blank",rel:"noopener noreferrer"}},[s._v("《“类”设计模式和“原型”设计模式——“复制”和“委托”的差异》"),n("OutboundLink")],1),s._v("的延伸探索，推荐阅读。")])]),s._v(" "),n("li",[n("p",[s._v("为什么要进行函数式编程？—— 只是为了代码更加可读！！")])]),s._v(" "),n("li",[n("p",[s._v("开发人员喜欢【显式】输入输出而不是【隐式】输入输出，要明白何为显式，何为隐式！！")])]),s._v(" "),n("li",[n("p",[s._v("一个函数如果可以接受或返回一个甚至多个函数，它被叫做高阶函数。闭包是最强大的高阶函数！！")])])]),s._v(" "),n("h3",{attrs:{id:"第二篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第二篇"}},[s._v("#")]),s._v(" 第二篇")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6969016132741103624",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（二）》"),n("OutboundLink")],1),s._v("，讲了重要的两个概念："),n("strong",[s._v("偏函数")]),s._v("、"),n("strong",[s._v("柯里化")])]),s._v(" "),n("ol",[n("li",[n("p",[s._v("函数组装是函数式编程最重要的实现方式！而熟练运用偏函数、柯里化，以及它们的变体，是函数组装的基础。")])]),s._v(" "),n("li",[n("p",[s._v("偏函数表现形式："),n("code",[s._v("partial(sum,1,2)(3)")])])]),s._v(" "),n("li",[n("p",[s._v("柯里化表现形式："),n("code",[s._v("sum(1)(2)(3)")])])])]),s._v(" "),n("h3",{attrs:{id:"第三篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第三篇"}},[s._v("#")]),s._v(" 第三篇")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6971260867300032525",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（三）》"),n("OutboundLink")],1),s._v("，来到了“函数组装”这一重点：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("再次重申，函数组装是函数式编程最重要的实现方式！！")])]),s._v(" "),n("li",[n("p",[s._v("函数组装符合“声明式编程风格”，即声明的时候你就知道了它“是什么”！而不用知道它具体“干了什么”（命令式函数风格）！")])]),s._v(" "),n("li",[n("p",[s._v("比如：当你看到组装后的函数调用是这样，"),n("code",[s._v("compose( skipShortWords, unique, words )( text )")]),s._v("，就知道了它是先将 text 变成 words，然后 unique 去重，然后过滤较短长度的 words。非常清晰！")])]),s._v(" "),n("li",[n("p",[n("code",[s._v("compose(..)")]),s._v(" 函数和 "),n("code",[s._v("partial(..)")]),s._v(" 函数结合，可以实现丰富多彩的组装形式！")])]),s._v(" "),n("li",[n("p",[s._v("封装抽象成函数是一门技术活！不能不够，也不宜太过！")])])]),s._v(" "),n("h3",{attrs:{id:"第四篇"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#第四篇"}},[s._v("#")]),s._v(" 第四篇")]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.cn/post/6974301728426426399",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（四）》"),n("OutboundLink")],1),s._v("，我们再细扣了下“副作用”：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("开发人员喜欢显式输入输出而不是隐式输入输出，学函数式编程，这句话要深入骨髓的记忆！")])]),s._v(" "),n("li",[n("p",[s._v("解决副作用的方法有：定义常量、明确 I/O、明确依赖、运用幂等，记得对幂等留个心眼！")])]),s._v(" "),n("li",[n("p",[s._v("我们喜欢没有副作用的函数，即纯函数！！")])]),s._v(" "),n("li",[n("p",[s._v("假如一棵树在森林里倒下而没有人在附近听见，它有没有发出声音？——对于这个问题的理解就是：假如你封装了一个高级函数，在内部即使有副作用的情况下，外界会知道这个信息吗，它还算是纯函数吗？")])])]),s._v(" "),n("p",[s._v("以上！")]),s._v(" "),n("p",[s._v("我们可能还需要更多时间去实践和体会：")]),s._v(" "),n("ol",[n("li",[s._v("偏函数 "),n("code",[s._v("partial(..)")]),s._v(" 和函数组装 "),n("code",[s._v("compose(..)")]),s._v(" 的变体及应用；")]),s._v(" "),n("li",[s._v("抽象的能力；")]),s._v(" "),n("li",[s._v("封装高级的纯函数；")])]),s._v(" "),n("p",[s._v("OK！自此，我们算是把前几篇全温故一遍了！温故知新，yyds！")]),s._v(" "),n("h2",{attrs:{id:"数组遍历三剑客"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#数组遍历三剑客"}},[s._v("#")]),s._v(" 数组遍历三剑客")]),s._v(" "),n("h3",{attrs:{id:"map"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#map"}},[s._v("#")]),s._v(" map")]),s._v(" "),n("p",[s._v("// todo")]),s._v(" "),n("p",[s._v("我们都会用 ES6 "),n("code",[s._v("map(..)")]),s._v(" , 它“是什么”，我们非常清楚！")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://s3.jpg.cm/2021/06/18/IPh9Cy.md.png",alt:"IPh9Cy.md.png"}})]),s._v(" "),n("p",[s._v("轻松写一个 "),n("code",[s._v("map(..)")]),s._v(" 的使用：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[1,2,3].map(item => item + 1)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("但是，"),n("code",[s._v("map(..)")]),s._v(" “干了什么”，它的内部是怎样的，你知道吗？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function map(mapperFn,arr) {\n    var newList = [];\n\n    for (let idx = 0; idx < arr.length; idx++) {\n        newList.push(\n            mapperFn( arr[idx], idx, arr )\n        );\n    }\n\n    return newList;\n}\n\nmap(item=>item+1,[1,2,3])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("我们把一个 "),n("code",[s._v("mapperFn(..)")]),s._v(" 封装进模拟的 "),n("code",[s._v("map(..)")]),s._v(" 函数内，这也是 ES6 map 的基本原理。")]),s._v(" "),n("p",[s._v("我们还可以用 "),n("code",[s._v("map(..)")]),s._v(" 做更多：")]),s._v(" "),n("p",[s._v("比如先将函数放在列表中，然后组合列表中的每一个函数，最后执行它们，像这样：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var increment = v => ++v;\nvar decrement = v => --v;\nvar square = v => v * v;\n\nvar double = v => v * 2;\n\n[increment,decrement,square]\n.map( fn => compose( fn, double ) )\n.map( fn => fn( 3 ) );\n// [7,5,36]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br")])]),n("h3",{attrs:{id:"filter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#filter"}},[s._v("#")]),s._v(" filter")]),s._v(" "),n("p",[s._v("如果说"),n("code",[s._v("map(..)")]),s._v("的本质是映射值，"),n("code",[s._v("filter(..)")]),s._v("的本质是过滤值。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://s3.jpg.cm/2021/06/18/IPjRKX.md.png",alt:"IPjRKX.md.png"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[1,2,3].filter(item => item>2)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("手写一个 "),n("code",[s._v("filter(..)")]),s._v(" 函数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function filter(predicateFn,arr) {\n    var newList = [];\n\n    for (let idx = 0; idx < arr.length; idx++) {\n        if (predicateFn( arr[idx], idx, arr )) {\n            newList.push( arr[idx] );\n        }\n    }\n\n    return newList;\n}\n\nfilter(item=>item>2,[1,2,3])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("同样也是将一个函数作为入参，处理同样传入的 arr，遍历过滤得到目标数组；")]),s._v(" "),n("h3",{attrs:{id:"reduce"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reduce"}},[s._v("#")]),s._v(" reduce")]),s._v(" "),n("p",[n("code",[s._v("map(..)")]),s._v(" 和 "),n("code",[s._v("filter(..)")]),s._v(" 都会产生新的数组，而第三种操作（reduce(..)）则是典型地将列表中的值合并（或减少）到单个值（非列表）。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://s3.jpg.cm/2021/06/18/IPjYsk.md.png",alt:"IPjYsk.md.png"}})]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[5,10,15].reduce( (product,v) => product * v, 3 );\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("过程：")]),s._v(" "),n("ol",[n("li",[s._v("3 * 5 = 15")]),s._v(" "),n("li",[s._v("15 * 10 = 150")]),s._v(" "),n("li",[s._v("150 * 15 = 2250")])]),s._v(" "),n("p",[s._v("手动实现 reduce 函数相较前两个，要稍微复杂些：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function reduce(reducerFn,initialValue,arr) {\n    var acc, startIdx;\n\n    if (arguments.length == 3) {\n        acc = initialValue;\n        startIdx = 0;\n    }\n    else if (arr.length > 0) {\n        acc = arr[0];\n        startIdx = 1;\n    }\n    else {\n        throw new Error( "Must provide at least one value." );\n    }\n\n    for (let idx = startIdx; idx < arr.length; idx++) {\n        acc = reducerFn( acc, arr[idx], idx, arr );\n    }\n\n    return acc;\n}\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br")])]),n("p",[s._v("不像 "),n("code",[s._v("map(..)")]),s._v(" 和 "),n("code",[s._v("filter(..)")]),s._v(" ，对传入数组的次序没有要求。"),n("code",[s._v("reduce(..)")]),s._v(" 明确要采用从左到右的处理方式。")]),s._v(" "),n("h2",{attrs:{id:"高级操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#高级操作"}},[s._v("#")]),s._v(" 高级操作")]),s._v(" "),n("p",[s._v("基于 "),n("code",[s._v("map(..)")]),s._v("、"),n("code",[s._v("filter(..)")]),s._v(" 和 "),n("code",[s._v("reduce(..)")]),s._v("，我们再看些更复杂的操作；")]),s._v(" "),n("h3",{attrs:{id:"去重"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#去重"}},[s._v("#")]),s._v(" 去重")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var unique =\n    arr =>\n        arr.filter(\n            (v,idx) =>\n                arr.indexOf( v ) == idx\n        );\n\nunique( [1,4,7,1,3,1,7,9,2,6,4,0,5,3] );        \n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[s._v("原理是，当从左往右筛选元素时，列表项的 idx 位置和 indexOf(..) 找到的位置相等时，表明该列表项第一次出现，在这种情况下，将列表项加入到新数组中。")]),s._v(" "),n("p",[s._v("当然，去重方式有很多，但是，这种方式的优点是，"),n("strong",[s._v("它们使用了内建的列表操作，它们能更方便的和其他列表操作链式／组合调用。")])]),s._v(" "),n("p",[n("code",[s._v("reduce(..)")]),s._v(" 实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var unique =\n    arr =>\n        arr.reduce(\n            (list,v) =>\n                list.indexOf( v ) == -1 ?\n                    ( list.push( v ), list ) : list\n        , [] );\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("h3",{attrs:{id:"降维"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#降维"}},[s._v("#")]),s._v(" 降维")]),s._v(" "),n("p",[s._v("二位数组转一维数组")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("[ [1, 2, 3], 4, 5, [6, [7, 8]] ] => [ 1, 2, 3, 4, 5, 6, 7, 8 ]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("实现：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var flatten =\n    arr =>\n        arr.reduce(\n            (list,v) =>\n                list.concat( Array.isArray( v ) ? flatten( v ) : v )\n        , [] );\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("p",[s._v("你还可以加一个参数 depth 来指定降维的层数：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var flatten =\n    (arr,depth = Infinity) =>\n        arr.reduce(\n            (list,v) =>\n                list.concat(\n                    depth > 0 ?\n                        (depth > 1 && Array.isArray( v ) ?\n                            flatten( v, depth - 1 ) :\n                            v\n                        ) :\n                        [v]\n                )\n        , [] );\n\nflatten( [[0,1],2,3,[4,[5,6,7],[8,[9,[10,[11,12],13]]]]], 2 );\n// [0,1,2,3,4,5,6,7,8,[9,[10,[11,12],13]]]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br")])]),n("p",[s._v("如果觉得复杂，你可以把它作为一个库来调用即可。实际上，我们后续还会专门来介绍各类函数式编程函数库！")]),s._v(" "),n("h2",{attrs:{id:"融合"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#融合"}},[s._v("#")]),s._v(" 融合")]),s._v(" "),n("p",[s._v("仔细体会下，以下给出的三段代码，哪段你觉得你更容易看懂？哪一段更符合函数式编程？")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 实现 1\n[1,2,3,4,5]\n.filter( isOdd )\n.map( double )\n.reduce( sum, 0 );                    // 18\n\n// 实现 2\nreduce(\n    map(\n        filter( [1,2,3,4,5], isOdd ),\n        double\n    ),\n    sum,\n    0\n);                                    // 18\n\n// 实现 3\ncompose(\n    partialRight( reduce, sum, 0 ),\n    partialRight( map, double ),\n    partialRight( filter, isOdd )\n)\n( [1,2,3,4,5] );                     // 18\n\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br")])]),n("p",[s._v("在片段 1 和 片段 3 中无法抉择？")]),s._v(" "),n("p",[s._v("再看一例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('\n\nvar removeInvalidChars = str => str.replace( /[^\\w]*/g, "" );\n\nvar upper = str => str.toUpperCase();\n\nvar elide = str =>\n    str.length > 10 ?\n        str.substr( 0, 7 ) + "..." :\n        str;\n\nvar words = "Mr. Jones isn\'t responsible for this disaster!"\n    .split( /\\s/ );\n\nwords;\n// ["Mr.","Jones","isn\'t","responsible","for","this","disaster!"]\n\n// 片段 1\nwords\n.map( removeInvalidChars )\n.map( upper )\n.map( elide );\n// ["MR","JONES","ISNT","RESPONS...","FOR","THIS","DISASTER"]\n\n// 片段 3\nwords\n.map(\n    compose( elide, upper, removeInvalidChars )\n);\n// ["MR","JONES","ISNT","RESPONS...","FOR","THIS","DISASTER"]\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br")])]),n("p",[s._v("重点就是：")]),s._v(" "),n("p",[s._v("我们可以将那三个独立的相邻的 map(..) 调用步骤看成一个转换组合。因为它们都是一元函数，并且每一个返回值都是下一个点输入值。我们可以采用 compose(..) 执行映射功能，并将这个组合函数传入到单个 map(..) 中调用：")]),s._v(" "),n("p",[s._v("所以：片段 3 这种"),n("strong",[s._v("融合")]),s._v("的技术，是常见的性能优化方式。")]),s._v(" "),n("h2",{attrs:{id:"阶段小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#阶段小结"}},[s._v("#")]),s._v(" 阶段小结")]),s._v(" "),n("p",[s._v("三个强大通用的列表操作：")]),s._v(" "),n("ol",[n("li",[s._v("map(..): 转换列表项的值到新列表。")]),s._v(" "),n("li",[s._v("filter(..): 选择或过滤掉列表项的值到新数组。")]),s._v(" "),n("li",[s._v("reduce(..): 合并列表中的值，并且产生一个其他的值（经常但不总是非列表的值）。")])]),s._v(" "),n("p",[s._v("其他一些非常有用的处理列表的高级操作：unique(..)、flatten(..) 等；")])])}),[],!1,null,null,null);a.default=r.exports}}]);