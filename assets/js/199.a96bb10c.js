(window.webpackJsonp=window.webpackJsonp||[]).push([[199],{693:function(n,s,t){"use strict";t.r(s);var a=t(2),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("持续创作，加速成长！这是我参与「掘金日新计划 · 6 月更文挑战」的第3天，"),t("a",{attrs:{href:"https://juejin.cn/post/7099702781094674468",target:"_blank",rel:"noopener noreferrer"}},[n._v("点击查看活动详情"),t("OutboundLink")],1)]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("JavaScript 高级程序设计第 4 版（后简称高程4），相较于第 3 版，增加了 ES6 至 ES10 的全新内容，删除了旧版过时的内容，并在原有基础上充实了更加翔实的内容。")]),n._v(" "),t("p",[n._v("中文译版于 2020 年发售，妥妥的“新鲜出炉”，你要是问本瓜："),t("strong",[n._v("当今学 JavaScript 哪家强，我只能说：红宝书第 4 版最在行。")])]),n._v(" "),t("p",[n._v("于是乎，借着更文契机，本瓜将开启一个小系列，带你重看一遍高级程序设计4（先前只是跳着跳着看），将抽取精华，用最简单的话解释核心点、尽量把握全局、快速过一遍的同时，记录与工友们分享~~")]),n._v(" "),t("h3",{attrs:{id:"正文"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#正文"}},[n._v("#")]),n._v(" 正文")]),n._v(" "),t("p",[n._v("第三章："),t("strong",[n._v("语法")]),n._v("是任何语言的核心所在！")]),n._v(" "),t("p",[n._v("第一句：")]),n._v(" "),t("blockquote",[t("p",[n._v("ECMAScript 的语法很大程度上借鉴了 C 语言和其他类 C 语言，如 Java 和 Perl。")])]),n._v(" "),t("p",[n._v("这句计算机语言之间的历史沿革关系很重要，做“全干“程序员，一定要知晓它们，触类旁通。")]),n._v(" "),t("p",[n._v("有兴趣的同学一定要去看看 编程语言历史，维基词条："),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E6%AD%B7%E5%8F%B2",target:"_blank",rel:"noopener noreferrer"}},[t("OutboundLink")],1),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80%E6%AD%B7%E5%8F%B2",target:"_blank",rel:"noopener noreferrer"}},[n._v("https://zh.wikipedia.org/wiki/程式語言歷史"),t("OutboundLink")],1),n._v("；")]),n._v(" "),t("p",[n._v("本瓜找到一张很棒的高级语言发展史的图：实线表示 直接"),t("strong",[n._v("继承")]),n._v(" 关系，虚线表示 "),t("strong",[n._v("参考借鉴")]),n._v(" 关系")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/091a5783d9aa4dac9bfa582fb6e07296~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),n._v(" "),t("p",[n._v("接着，行文就讲到：JS 的注释、严格模式（我在实际工作中用得很少）、语句、关键保留字，这些都比较基础，不做赘述。")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("然后，讲到变量，"),t("strong",[n._v("变量提升")]),n._v("，var 的变量提升我相信大家都很清楚，另外：还有一个"),t("strong",[n._v("函数的提升")]),n._v("，不知道你清楚吗？一起提一下：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("fn()\nconst fn = function(){\n\n    console.log(1)\n}\n\n// 这样写，会报错：fn is not defined\n\nfn()\nfunction fn(){\n\n    console.log(1)\n}\n// 这样写，则不会报错，因为函数提升\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br")])]),t("p",[n._v("本瓜更倾向使用“没有提升的变量声明或函数声明”，由上自下，代码结构清晰，不然，写这种隐式的提升，会造成很多困扰！！")]),n._v(" "),t("p",[n._v("比如看这种代码，根本没有食欲，还容易出错：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("function hoistFunction() {\n  foo();\n  var foo = function() {\n    console.log(1);\n  };\n  foo();\n  function foo() {\n    console.log(2);\n  }\n  foo();\n}\n\nhoistFunction();\n\n// 2\n// 1\n// 1\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br")])]),t("p",[n._v("但就老老实实写成这样，不要提升，不就清晰多了吗？")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let foo = undefined\nfunction hoistFunction() {\n  foo = function foo() {\n    console.log(2);\n  }\n  foo();\n  foo = function() {\n      console.log(1);\n  };\n  foo(); // 1\n  foo(); // 1\n}\n\nhoistFunction();\n\n// 2\n// 1\n// 1\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br")])]),t("p",[n._v("然后，var、let、const 区别就不作展开了。")]),n._v(" "),t("ul",[t("li",[n._v("有个小 trick，问：通过 const 声明了，真的就不能再被修改了吗？？")])]),n._v(" "),t("blockquote",[t("p",[n._v("再问：为什么要在 ES6 推出 let 和 const ??")]),n._v(" "),t("p",[n._v("本瓜认为有一个回答的方向：使用 let 或 const 是声明式的代码风格！！什么意思？即我们推崇：变量声明了就不要修改了！那有人问：用 let 声明，也会被修改啊；当然，但是至少 let 的修改只影响局部的快，能减少影响的范围，这就是一种进步；实际也是如此，我们推荐使用 const > let > var。")])]),n._v(" "),t("p",[n._v("至于，为什么推荐变量声明了，就不要再修改了，这其实是函数式编程的思想，可以了解下 immutable.js 以及 λ 变量计算等，这里先不作展开；")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("然后，行文来到 JavaScript 数据类型：")]),n._v(" "),t("ol",[t("li",[n._v('"undefined"表示值未定义；')]),n._v(" "),t("li",[n._v('"boolean"表示值为布尔值；')]),n._v(" "),t("li",[n._v('"string"表示值为字符串；')]),n._v(" "),t("li",[n._v('"number"表示值为数值；')]),n._v(" "),t("li",[n._v('"object"表示值为对象（而不是函数）或 null；')]),n._v(" "),t("li",[n._v('"function"表示值为函数；')]),n._v(" "),t("li",[n._v('"symbol"表示值为符号。')])]),n._v(" "),t("p",[n._v("变量值可以用 typeof 来检查，结果就是以上 7 种的任一一种；")]),n._v(" "),t("p",[n._v("老前端知道 typeof 来检查类型是远不够的，它不能检查出 array、正则、内置对象等，会将它们都返回为 Object")]),n._v(" "),t("p",[n._v("这个时候，就需要用到：")]),n._v(" "),t("p",[t("code",[n._v("Object.prototype.toString.call()")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("typeof([]) // 'object'\ntypeof(/\\g/) // 'object'\n\nObject.prototype.toString.call([]) // '[object Array]'\nObject.prototype.toString.call(/\\g/) // '[object RegExp]'\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br")])]),t("p",[n._v("具体各类型下的细节，就不一一展开啦：")]),n._v(" "),t("p",[n._v("抛个经典的面试考点：为什么"),t("strong",[t("strong",[n._v("0.1+0.2不等于0.3？")])])]),n._v(" "),t("p",[n._v("因为：JS Number 是二进制浮点数，0.1 和 0.2 转换成二进制后会无限循环，")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("0.1 -> 0.0001100110011001...(无限循环)\n0.2 -> 0.0011001100110011...(无限循环)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br")])]),t("p",[n._v("二者相加时，会根据 IEEE 754 尾数位数限制，将后面多余的位截掉，导致了精度缺失，使得不等于 0.3；")]),n._v(" "),t("hr"),n._v(" "),t("p",[n._v("还有 Object 对象要拿出来说说："),t("strong",[n._v("在 ECMAScript 中 Object 是所有对象的基类")])]),n._v(" "),t("p",[n._v("怎么理解？")]),n._v(" "),t("p",[n._v("任何基础的类型都可以通原型链找到 Object")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("String.prototype.__proto__===Object.prototype // true\n\nNumber.prototype.__proto__===Object.prototype // true\n\nFunction.prototype.__proto__===Object.prototype // true\n\nArray.prototype.__proto__===Object.prototype // true\n\n......\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br")])]),t("p",[n._v("所以说：万事万物皆由对象构造的，一点没错，万物皆对象！！")]),n._v(" "),t("p",[n._v("所以，Object 有的属性，基本的类型也有，这些属性是：")]),n._v(" "),t("ol",[t("li",[n._v("constructor：用于创建当前对象的函数。在前面的例子中，这个属性的值就是 Object() 函数。")]),n._v(" "),t("li",[n._v('hasOwnProperty(propertyName)：用于判断当前对象实例（不是原型）上是否存在给定的属 性。要检查的属性名必须是字符串（如 o.hasOwnProperty("name")）或符号。')]),n._v(" "),t("li",[n._v("isPrototypeOf(object)：用于判断当前对象是否为另一个对象的原型。（第 8 章将详细介绍 原型。）")]),n._v(" "),t("li",[n._v("propertyIsEnumerable(propertyName)：用于判断给定的属性是否可以使用（本章稍后讨 论的）for-in 语句枚举。与 hasOwnProperty()一样，属性名必须是字符串。")]),n._v(" "),t("li",[n._v("toLocaleString()：返回对象的字符串表示，该字符串反映对象所在的本地化执行环境。")]),n._v(" "),t("li",[n._v("toString()：返回对象的字符串表示。")]),n._v(" "),t("li",[n._v("valueOf()：返回对象对应的字符串、数值或布尔值表示。通常与 toString()的返回值相同。")])]),n._v(" "),t("p",[n._v("OK，写到这里，关于类型就暂时不继续展开了；")]),n._v(" "),t("p",[n._v("然后，书行文来到了："),t("strong",[n._v("操作符")]),n._v("，一元操作符、位操作符等等，一共有 11 个，讲的比较详细。")]),n._v(" "),t("p",[n._v("重点嘛，个人认为有：++x 和 x++ 问题、位操作、解构赋值这些；")]),n._v(" "),t("p",[n._v("然后，行文来到："),t("strong",[n._v("语句，")]),n._v(" if、for、while、switch，和 C 基本一致啦")]),n._v(" "),t("p",[n._v("最后讲到："),t("strong",[n._v("函数，")]),n._v(" 这是我们感兴趣的。函数对任何语言来说都是核心组件，因为它们可以封装语句，然后在任何地方、任何时间执行。")]),n._v(" "),t("p",[n._v("ECMAScript 使用 function 关键字声明函数。神奇的是，ECMAScript 中的函数不需要指定是否返回值，也就是没有强制 return 也可以；")]),n._v(" "),t("p",[t("strong",[n._v("本瓜认为，没有强制 return , 会给我们代码的可读性造成困扰。")])]),n._v(" "),t("p",[n._v("比如：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("let sum1,sum2,sum3\nfunction sum(){\n    sum1 = xx\n    sum2 = sum1 + xx\n    sum3 = sum2 * 2 + xxx\n    sum1 = xxx\n}\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br")])]),t("p",[n._v("函数内部对函数外部的变量做了多次修改。实际代码中，没有通过函数 return 修改外部变量的情况，比这个要复杂很多很多。一定会给变量的改动的溯源造成困扰。")]),n._v(" "),t("p",[n._v("如果我们强制用return，只用 return 修改外部变量，那它是这样的：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("\nfunction sum(){\n    let tmp1,tmp2,tmp3\n    tmp1= xx\n    tmp2= sum1 + xx\n    tmp3= sum2 * 2 + xxx\n    tmp1= xxx\n    return [tmp1,tmp2,tmp3]\n}\n\nlet [sum1,sum2,sum3] = sum()\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br")])]),t("p",[n._v("我们可以清晰地去查询，这个函数对于外部数据到底做了什么，看 return 就可以了。")]),n._v(" "),t("h3",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),t("p",[n._v("第三章，关于基础语法！！就这么多了，相对于前两章，内容已经多了很多，后面也会更加精细，复杂，但是基本把要点都标粗了，然后附加了自己的一点体会。")]),n._v(" "),t("blockquote",[t("p",[n._v("OK，以上便是本篇分享。 觉得不错点个赞吧👍👍👍，您的鼓励，我的动力，坚持原创质量好文~~ 欢迎评论留言 我是掘金安东尼，输出暴露输入，技术洞见生活。再会吧~~ 👋👋👋")])])])}),[],!1,null,null,null);s.default=e.exports}}]);