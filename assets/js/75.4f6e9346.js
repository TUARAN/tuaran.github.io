(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{575:function(n,s,e){"use strict";e.r(s);var t=e(2),a=Object(t.a)({},(function(){var n=this,s=n.$createElement,e=n._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[e("p",[n._v("接月初算法系列，思路：")]),n._v(" "),e("p",[n._v("滑动窗口 => BFS、DFS => 回溯法，各个经典！")]),n._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7025475800623218702",target:"_blank",rel:"noopener noreferrer"}},[n._v("《温故知新 —— Sliding Window》"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7026259253866266654",target:"_blank",rel:"noopener noreferrer"}},[n._v("《辛辣天塞！滑动窗口之【和的最大值】&【最大值集合】》"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7026648421494685726",target:"_blank",rel:"noopener noreferrer"}},[n._v("《keep move！滑动窗口中位数与滑动魔方》"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7026987512543313934",target:"_blank",rel:"noopener noreferrer"}},[n._v("《好的，BFS，又学废了！》"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7027369616024272926",target:"_blank",rel:"noopener noreferrer"}},[n._v("《好的，DFS，也学废了！》"),e("OutboundLink")],1)]),n._v(" "),e("li",[e("a",{attrs:{href:"https://juejin.cn/post/7027695862390194212",target:"_blank",rel:"noopener noreferrer"}},[n._v("《从 DFS 到回溯法，再看 N 皇后问题》"),e("OutboundLink")],1)])]),n._v(" "),e("p",[n._v("本篇将继续深入回溯法！")]),n._v(" "),e("p",[n._v("经典题目之："),e("a",{attrs:{href:"https://leetcode-cn.com/problems/letter-combinations-of-a-phone-number/",target:"_blank",rel:"noopener noreferrer"}},[n._v("电话号码的字母组合"),e("OutboundLink")],1)]),n._v(" "),e("p",[n._v("题目：")]),n._v(" "),e("blockquote",[e("p",[n._v("给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。答案可以按 任意顺序 返回。")]),n._v(" "),e("p",[n._v("给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。")])]),n._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/c4d8181301ce4ce0a16d9cc00e453d8d~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v('示例 1：\n输入：digits = "23"\n输出：["ad","ae","af","bd","be","bf","cd","ce","cf"]\n\n示例 2：\n输入：digits = ""\n输出：[]\n\n示例 3：\n输入：digits = "2"\n输出：["a","b","c"]\n')])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br")])]),e("p",[n._v("解题思路：")]),n._v(" "),e("ol",[e("li",[n._v("用map保存数字对应的字母")]),n._v(" "),e("li",[n._v("从第一个数字开始遍历，取一个字母，然后从第二个数字，取一个字母，第三个数字，取一个字母...")]),n._v(" "),e("li",[n._v("数字遍历完了，将拼接好的字符串str加入结果数组res")]),n._v(" "),e("li",[n._v("回溯，修改最后一个数字对应的字母")]),n._v(" "),e("li",[n._v("重复2-4过程")])]),n._v(" "),e("p",[n._v("JS 实现：")]),n._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[n._v("var letterCombinations = function (digits) {\n  // 为空特殊处理\n  if (digits.length === 0) return [];\n  let numMap = new Map([\n    ['0', ''],\n    ['1', ''],\n    ['2', 'abc'],\n    ['3', 'def'],\n    ['4', 'ghi'],\n    ['5', 'jkl'],\n    ['6', 'mno'],\n    ['7', 'pqrs'],\n    ['8', 'tuv'],\n    ['9', 'wxyz']\n  ])\n  let res = [];\n  dfs(\"\", digits);\n  return res;\n\n  function dfs(str, digit) {\n    // 如果字符串为空了，将拼接好的字符加入数组\n    if (digit.length === 0) res.push(str);\n    else {\n      // 拿到字符串第一个字符，拿到其对应的数字\n      let numstr = numMap.get(digit[0]);\n      // 对可能性进行组合\n      for (let i = 0; i < numstr.length; i++) {\n        str += numstr[i];\n        // 递归组好的 str和下一段字符串\n        dfs(str, digit.slice(1))\n        // 回溯\n        str = str.slice(0, -1);\n      }\n    }\n  }\n};\n")])]),n._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[n._v("1")]),e("br"),e("span",{staticClass:"line-number"},[n._v("2")]),e("br"),e("span",{staticClass:"line-number"},[n._v("3")]),e("br"),e("span",{staticClass:"line-number"},[n._v("4")]),e("br"),e("span",{staticClass:"line-number"},[n._v("5")]),e("br"),e("span",{staticClass:"line-number"},[n._v("6")]),e("br"),e("span",{staticClass:"line-number"},[n._v("7")]),e("br"),e("span",{staticClass:"line-number"},[n._v("8")]),e("br"),e("span",{staticClass:"line-number"},[n._v("9")]),e("br"),e("span",{staticClass:"line-number"},[n._v("10")]),e("br"),e("span",{staticClass:"line-number"},[n._v("11")]),e("br"),e("span",{staticClass:"line-number"},[n._v("12")]),e("br"),e("span",{staticClass:"line-number"},[n._v("13")]),e("br"),e("span",{staticClass:"line-number"},[n._v("14")]),e("br"),e("span",{staticClass:"line-number"},[n._v("15")]),e("br"),e("span",{staticClass:"line-number"},[n._v("16")]),e("br"),e("span",{staticClass:"line-number"},[n._v("17")]),e("br"),e("span",{staticClass:"line-number"},[n._v("18")]),e("br"),e("span",{staticClass:"line-number"},[n._v("19")]),e("br"),e("span",{staticClass:"line-number"},[n._v("20")]),e("br"),e("span",{staticClass:"line-number"},[n._v("21")]),e("br"),e("span",{staticClass:"line-number"},[n._v("22")]),e("br"),e("span",{staticClass:"line-number"},[n._v("23")]),e("br"),e("span",{staticClass:"line-number"},[n._v("24")]),e("br"),e("span",{staticClass:"line-number"},[n._v("25")]),e("br"),e("span",{staticClass:"line-number"},[n._v("26")]),e("br"),e("span",{staticClass:"line-number"},[n._v("27")]),e("br"),e("span",{staticClass:"line-number"},[n._v("28")]),e("br"),e("span",{staticClass:"line-number"},[n._v("29")]),e("br"),e("span",{staticClass:"line-number"},[n._v("30")]),e("br"),e("span",{staticClass:"line-number"},[n._v("31")]),e("br"),e("span",{staticClass:"line-number"},[n._v("32")]),e("br"),e("span",{staticClass:"line-number"},[n._v("33")]),e("br"),e("span",{staticClass:"line-number"},[n._v("34")]),e("br"),e("span",{staticClass:"line-number"},[n._v("35")]),e("br"),e("span",{staticClass:"line-number"},[n._v("36")]),e("br")])]),e("p",[n._v("小结："),e("strong",[n._v("回溯本质是暴力搜索")]),n._v("，在问题的解空间树中，用 DFS 的方式，从根节点出发搜索整个解空间。\n如果要找出所有的解，则要搜索整个子树，如果只用找出一个解，则搜到一个解就可以结束搜索。")]),n._v(" "),e("p",[e("strong",[n._v("“找出所有可能的组合”的问题，适合用回溯算法。")])]),n._v(" "),e("hr"),n._v(" "),e("p",[n._v("OK，以上就是本篇分享~ 撰文不易，点赞鼓励👍👍👍")]),n._v(" "),e("p",[n._v("我是掘金安东尼，公众号同名，日拱一卒、日掘一金，再会~")])])}),[],!1,null,null,null);s.default=a.exports}}]);