(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{585:function(n,s,t){"use strict";t.r(s);var a=t(2),e=Object(a.a)({},(function(){var n=this,s=n.$createElement,t=n._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("p",[n._v("最近由于要做测评，遂整理"),t("strong",[n._v("算法设计与分析")]),n._v("这一块的内容，复习的同时，与大家分享交流~")]),n._v(" "),t("p",[n._v("喂！算法！逃不掉的！All Right?")]),n._v(" "),t("p",[t("img",{attrs:{src:"https://s3.jpg.cm/2021/06/13/IP6w5G.th.png",alt:"IP6w5G.th.png"}})]),n._v(" "),t("h2",{attrs:{id:"分治法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分治法"}},[n._v("#")]),n._v(" 分治法")]),n._v(" "),t("blockquote",[t("p",[n._v("分治法是建基于多项分支递归的一种很重要的算法范型。字面上的解释是“分而治之”，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。")])]),n._v(" "),t("p",[n._v("比较典型的有：排序算法（归并排序、快速排序）、傅立叶变换（快速傅立叶变换）等；")]),n._v(" "),t("p",[n._v("其中最重要最常考的是"),t("strong",[n._v("快排")]),n._v("，应该都很熟悉了，快速过一遍：")]),n._v(" "),t("ol",[t("li",[n._v('选择一个元素作为"基准"（pivot）。')]),n._v(" "),t("li",[n._v('于"基准"的元素，都移到"基准"的左边；所有大于"基准"的元素，都移到"基准"的右边。')]),n._v(" "),t("li",[n._v('准"左边和右边的两个子集，不断重复第一步和第二步，直到所有子集只剩下一个元素为止。')])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var quickSort = function(arr) {\n　　if (arr.length <= 1) { return arr; }\n　　var pivotIndex = Math.floor(arr.length / 2);\n　　var pivot = arr.splice(pivotIndex, 1)[0];\n　　var left = [];\n　　var right = [];\n　　for (var i = 0; i < arr.length; i++){\n　　　　if (arr[i] < pivot) {\n　　　　　　left.push(arr[i]);\n　　　　} else {\n　　　　　　right.push(arr[i]);\n　　　　}\n　　}\n　　return quickSort(left).concat([pivot], quickSort(right));\n};\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br")])]),t("p",[n._v("其次，我们需了解下"),t("strong",[n._v("傅立叶变换")]),n._v("的基本概念：即它能将满足一定条件的某个函数表示成三角函数（正弦和/或余弦函数）或者它们的积分的线性组合。")]),n._v(" "),t("ul",[t("li",[t("p",[t("a",{attrs:{href:"https://www.youtube.com/watch?v=0LuyxzqI3Hk",target:"_blank",rel:"noopener noreferrer"}},[n._v("李永乐老师视频讲解传送门"),t("OutboundLink")],1)])]),n._v(" "),t("li",[t("p",[t("a",{attrs:{href:"https://www.zhihu.com/question/20460630",target:"_blank",rel:"noopener noreferrer"}},[n._v("傅里叶变换有哪些具体的应用？"),t("OutboundLink")],1),n._v("（OS：太强了！）")])])]),n._v(" "),t("h2",{attrs:{id:"动态规划法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#动态规划法"}},[n._v("#")]),n._v(" 动态规划法")]),n._v(" "),t("p",[n._v("动态规划太重要了！动态规划于算法，可能相对于杜兰特于篮网吧~ ORZ")]),n._v(" "),t("blockquote",[t("p",[n._v("动态规划（简称DP）背后的基本思想非常简单。即：大致上，若要解一个给定问题，我们需要解其不同部分（即子问题），再根据子问题的解以得出原问题的解。")])]),n._v(" "),t("p",[n._v("其中最著名的有"),t("strong",[n._v("背包问题")]),n._v("、"),t("strong",[n._v("爬梯子问题（斐波那契数列）")]),n._v("、"),t("strong",[n._v("寻找最长公共子串")]),n._v(" 这三个（每个都是重点常考！）。")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("背包问题")])])]),n._v(" "),t("p",[n._v("背包问题的基础是【0-1背包问题】，先吃透它：")]),n._v(" "),t("p",[n._v("题目：有 N 件物品和一个容量为 C 的背包。第 i 件物品的重量是 w[i]，价值是 v[i]。求解将哪些物品装入背包可使价值总和最大。")]),n._v(" "),t("p",[n._v("解：：每种物品仅有一件，可以选择放或不放。用 "),t("em",[n._v("子问题定义状态")]),n._v("：即 f[i][w] 表示前 i 件物品恰放入一个容量为 c 的背包可以获得的最大价值。则其状态转移方程便是：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("f[i][c] = max{f[i-1][c], f[i-1][c-w[i]]+v[i]} \n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br")])]),t("p",[n._v("这个方程的释义，即分别对应两种情况：")]),n._v(" "),t("ol",[t("li",[t("p",[n._v("如果背包不放第 i 件物品，那么问题就转化为 前 i-1 件物品放入容量为 v 的背包中，价值为 f[i-1][c]；")])]),n._v(" "),t("li",[t("p",[n._v("如果放第i件物品，那么问题就转化为 前 i-1 件物品放入剩下的容量为 c-w[i] 的背包中，此时能获得的最大价值就是 f[i-1][c-w[i]]再加上通过放入第 i 件物品获得的价值 v[i]，即f[i-1][c-w[i]]+v[i]。")])])]),n._v(" "),t("p",[n._v("这两者的最大值就是我们最终的解！")]),n._v(" "),t("blockquote",[t("p",[n._v("物品一个一个选，容量也一点一点增加去考虑，这一点是「动态规划」的思想。")])]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v(" function knapsack(weights, values, W){\n    var n = weights.length -1\n    var f = [[]]\n    for(var j = 0; j <= W; j++){\n        // 边界情况\n        if(j < weights[0]){\n           f[0][j] = 0\n        }else{\n           f[0][j] = values[0]\n        }\n    }\n    for(var j = 0; j <= W; j++){\n        for(var i = 1; i <= n; i++ ){\n            if(!f[i]){ //创建新一行\n                f[i] = []\n            }\n            if(j < weights[i]){ //等于之前的最优值\n                f[i][j] = f[i-1][j]\n            }else{\n                f[i][j] = Math.max(f[i-1][j], f[i-1][j-weights[i]] + values[i]) \n            }\n        }\n    }\n    return f[n][W]\n}\nvar a = knapsack([2,2,6,5,4],[6,3,5,4,6],10)\nconsole.log(a)\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br")])]),t("p",[n._v("进一步，自行了解 "),t("a",{attrs:{href:"https://juejin.cn/post/6844903686888488967#heading-7",target:"_blank",rel:"noopener noreferrer"}},[n._v("完全背包问题"),t("OutboundLink")],1),n._v(" 。")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("爬梯子问题")])])]),n._v(" "),t("p",[n._v("爬梯子也是算法高频考点无疑了！")]),n._v(" "),t("p",[n._v("题目：你准备要爬楼梯。你面对的是一个 n 步可以走上去的楼梯。你每次可以走一步或者两步，那么你有几种不同的方式可以爬上去吗？")]),n._v(" "),t("p",[n._v("解：每次只能爬 1 步或 2 步，爬到第 n 层的方法要么是从第 n-1 层 1 步上来的，要不就是从 n-2 层 2 步上来的。采用递归！但要注意避免递归中运算重复的部分：")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var temp = []\nvar climbStairs = function(n) {\n    if(n <= 0){\n        return 0\n    }\n    if(n <= 2){\n        return n\n    }\n    if(temp[n]){\n        return temp[n]\n    }\n    temp[n] = climbStairs(n-2) + climbStairs(n-1)\n    return temp[n]\n};\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br")])]),t("p",[n._v("爬梯子问题又可称是 "),t("strong",[n._v("“斐波那契数列”")]),n._v("。")]),n._v(" "),t("p",[n._v("斐波那契数列指的是这样一个数列从第3项开始，每一项都等于前两项之和，比如：1, 2, 3, 5, 8, 13, 21......，用到递归无疑了，但是一定要记得缓存递归项，否则会内存溢出（比如"),t("code",[n._v("climbStairs(5)")]),n._v("分解为"),t("code",[n._v("climbStairs(3)")]),n._v("和"),t("code",[n._v("climbStairs(4)")]),n._v("，"),t("code",[n._v("climbStairs(4)")]),n._v("又分解为"),t("code",[n._v("climbStairs(2)")]),n._v("和"),t("code",[n._v("climbStairs(3)")]),n._v("，这样就有两个重复的"),t("code",[n._v("climbStairs(3)")]),n._v("了）。")]),n._v(" "),t("ul",[t("li",[t("strong",[n._v("寻找最长公共子串")])])]),n._v(" "),t("p",[n._v("也称为 "),t("strong",[n._v("“LCS 问题”")])]),n._v(" "),t("p",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-common-subsequence/",target:"_blank",rel:"noopener noreferrer"}},[n._v("leetcode#1143"),t("OutboundLink")],1)]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("var longestCommonSubsequence = function(text1, text2) {\n    const m = text1.length, n = text2.length;\n    const dp = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n    for (let i = 1; i <= m; i++) {\n        const c1 = text1[i - 1];\n        for (let j = 1; j <= n; j++) {\n            const c2 = text2[j - 1];\n            if (c1 === c2) {\n                dp[i][j] = dp[i - 1][j - 1] + 1;\n            } else {\n                dp[i][j] = Math.max(dp[i - 1][j], dp[i][j - 1]);\n            }\n        }\n    }\n    return dp[m][n];\n};\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br")])]),t("p",[n._v("不过这个问题也勾起了本瓜当初面腾讯 WXG 的最后一题 "),t("a",{attrs:{href:"https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"}},[n._v("leetcode#3"),t("OutboundLink")],1),n._v(" 回忆。（OS：最长子串问题真的是必考！）")]),n._v(" "),t("h2",{attrs:{id:"贪心法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#贪心法"}},[n._v("#")]),n._v(" 贪心法")]),n._v(" "),t("p",[n._v("贪心算法，即使你不怎么用，一定也听过它的大名！")]),n._v(" "),t("blockquote",[t("p",[n._v("贪心算法（英语：greedy algorithm），又称贪婪算法，是一种在每一步选择中都采取在当前状态下最好或最优（即最有利）的选择，从而希望导致结果是最好或最优的算法。")])]),n._v(" "),t("p",[n._v("最典型的例子有：旅行商问题（最短路径问题）（TSP）")]),n._v(" "),t("p",[n._v("之前有写过一篇关于最短路径问题的文章："),t("a",{attrs:{href:"https://juejin.cn/post/6905692756190953480",target:"_blank",rel:"noopener noreferrer"}},[n._v("《会一会改变世界的图算法——Dijkstra（狄克斯特拉）算法》"),t("OutboundLink")],1),n._v("。")]),n._v(" "),t("p",[n._v("与之最大不同的是，旅行商问题是一个 "),t("em",[n._v("NP 问题")]),n._v("，即只是一个近似算法，没有完全准确的解，所以需要尽可能的“贪心”。")]),n._v(" "),t("p",[n._v("题目：给定一系列城市和每对城市之间的距离，求解访问每一座城市一次并回到起始城市的最短回路。")]),n._v(" "),t("p",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/shortest-path-visiting-all-nodes/solution/lu-xing-shang-wen-ti-by-liyongjia-li-lue/",target:"_blank",rel:"noopener noreferrer"}},[n._v("leetcode#847"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"回溯法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#回溯法"}},[n._v("#")]),n._v(" 回溯法")]),n._v(" "),t("blockquote",[t("p",[n._v("回溯算法实际上一个类似枚举的搜索尝试过程，主要是在搜索尝试过程中寻找问题的解，当发现已不满足求解条件时，就“回溯”返回，尝试别的路径。\n回溯算法和穷举法很像，都是树的深度优先遍历，但回溯法会进行'剪枝'，比如第 5 层某 i 叶子结点时发现该节点已经无意义，会直接跳过该节点下面的遍历，提高了效率。")])]),n._v(" "),t("p",[n._v("回溯法通常用最简单的递归方法来实现，在反复重复上述的步骤后可能出现两种情况：")]),n._v(" "),t("ul",[t("li",[n._v("找到一个可能存在的正确的答案")]),n._v(" "),t("li",[n._v("在尝试了所有可能的分步方法后宣告该问题没有答案\n在最坏的情况下，回溯法会导致一次复杂度为指数时间的计算。")])]),n._v(" "),t("p",[n._v("著名的是 "),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[n._v("八皇后问题"),t("OutboundLink")],1),n._v("。像这种"),t("strong",[n._v("棋盘问题")]),n._v("也是高频考点。（面试腾讯 PCG 遇到过）")]),n._v(" "),t("p",[n._v("题目：在 8×8 的国际象棋棋盘上放置八个皇后，使得任何一个皇后都无法直接吃掉其他的皇后。为了达到此目的，任两个皇后都不能处于同一条横行、纵行或斜线上。问，一共有多少情况可满足？")]),n._v(" "),t("p",[n._v("解：\n由于一行只能有一个皇后，所以选择一行一行地填写皇后。在填第n行的皇后时不能与[0, n-1]行已填写的皇后在同一列、同一正对角线与反对角线上。若满足条件则继续递归，否则回溯重新选择下一列。")]),n._v(" "),t("div",{staticClass:"language- line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[n._v("class Queen {\n  constructor(num) {\n    this.num = num;\n    this.arr = [];\n    this.result = [];\n    this.initList();\n    this.buildList(this.arr, 0);\n  }\n\n  initList() {// 设置 num * num 的矩形方阵\n    let num = this.num;\n    for (let i = 0; i < num; i++) {\n      this.arr[i] = [];\n      for (let j = 0; j < num; j++) {\n        this.arr[i][j] = 0;\n      }\n    }\n    console.log(this.arr);\n  }\n\n  buildList(list, row) {\n    // 递归中止条件,找到一个解缓存起来\n    if (row === list.length) {\n      this.result.push(JSON.parse(JSON.stringify(list)));\n      return;\n    }\n    for (let col = 0, len = list.length; col < len; col++) {\n      if (this.isSafe(list, row, col)) {\n        list[row][col] = 1; // 1 表示设置该位置有皇后\n        this.buildList(list, row + 1);\n        // 走到这里，说明该次递归已经结束，不管找没找到，都需要重置\n        list[row][col] = 0;\n      }\n    }\n  }\n\n  isSafe(list, row, col) {\n    const len = list.length;\n    // 同一列\n    for (let i = 0; i < len; i++) {\n      if (list[i][col] === 1) return false;\n    }\n    // 斜右上方\n    for (let i = row - 1, j = col + 1; i >= 0 && j < len; i--, j++) {\n      if (list[i][j] === 1) return false;\n    }\n    // 斜左上方\n    for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n      if (list[i][j] === 1) return false;\n    }\n    return true;\n  }\n}\nconst queen = new Queen(8);\nconsole.log(queen.result);\n")])]),n._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[n._v("1")]),t("br"),t("span",{staticClass:"line-number"},[n._v("2")]),t("br"),t("span",{staticClass:"line-number"},[n._v("3")]),t("br"),t("span",{staticClass:"line-number"},[n._v("4")]),t("br"),t("span",{staticClass:"line-number"},[n._v("5")]),t("br"),t("span",{staticClass:"line-number"},[n._v("6")]),t("br"),t("span",{staticClass:"line-number"},[n._v("7")]),t("br"),t("span",{staticClass:"line-number"},[n._v("8")]),t("br"),t("span",{staticClass:"line-number"},[n._v("9")]),t("br"),t("span",{staticClass:"line-number"},[n._v("10")]),t("br"),t("span",{staticClass:"line-number"},[n._v("11")]),t("br"),t("span",{staticClass:"line-number"},[n._v("12")]),t("br"),t("span",{staticClass:"line-number"},[n._v("13")]),t("br"),t("span",{staticClass:"line-number"},[n._v("14")]),t("br"),t("span",{staticClass:"line-number"},[n._v("15")]),t("br"),t("span",{staticClass:"line-number"},[n._v("16")]),t("br"),t("span",{staticClass:"line-number"},[n._v("17")]),t("br"),t("span",{staticClass:"line-number"},[n._v("18")]),t("br"),t("span",{staticClass:"line-number"},[n._v("19")]),t("br"),t("span",{staticClass:"line-number"},[n._v("20")]),t("br"),t("span",{staticClass:"line-number"},[n._v("21")]),t("br"),t("span",{staticClass:"line-number"},[n._v("22")]),t("br"),t("span",{staticClass:"line-number"},[n._v("23")]),t("br"),t("span",{staticClass:"line-number"},[n._v("24")]),t("br"),t("span",{staticClass:"line-number"},[n._v("25")]),t("br"),t("span",{staticClass:"line-number"},[n._v("26")]),t("br"),t("span",{staticClass:"line-number"},[n._v("27")]),t("br"),t("span",{staticClass:"line-number"},[n._v("28")]),t("br"),t("span",{staticClass:"line-number"},[n._v("29")]),t("br"),t("span",{staticClass:"line-number"},[n._v("30")]),t("br"),t("span",{staticClass:"line-number"},[n._v("31")]),t("br"),t("span",{staticClass:"line-number"},[n._v("32")]),t("br"),t("span",{staticClass:"line-number"},[n._v("33")]),t("br"),t("span",{staticClass:"line-number"},[n._v("34")]),t("br"),t("span",{staticClass:"line-number"},[n._v("35")]),t("br"),t("span",{staticClass:"line-number"},[n._v("36")]),t("br"),t("span",{staticClass:"line-number"},[n._v("37")]),t("br"),t("span",{staticClass:"line-number"},[n._v("38")]),t("br"),t("span",{staticClass:"line-number"},[n._v("39")]),t("br"),t("span",{staticClass:"line-number"},[n._v("40")]),t("br"),t("span",{staticClass:"line-number"},[n._v("41")]),t("br"),t("span",{staticClass:"line-number"},[n._v("42")]),t("br"),t("span",{staticClass:"line-number"},[n._v("43")]),t("br"),t("span",{staticClass:"line-number"},[n._v("44")]),t("br"),t("span",{staticClass:"line-number"},[n._v("45")]),t("br"),t("span",{staticClass:"line-number"},[n._v("46")]),t("br"),t("span",{staticClass:"line-number"},[n._v("47")]),t("br"),t("span",{staticClass:"line-number"},[n._v("48")]),t("br"),t("span",{staticClass:"line-number"},[n._v("49")]),t("br"),t("span",{staticClass:"line-number"},[n._v("50")]),t("br"),t("span",{staticClass:"line-number"},[n._v("51")]),t("br"),t("span",{staticClass:"line-number"},[n._v("52")]),t("br"),t("span",{staticClass:"line-number"},[n._v("53")]),t("br"),t("span",{staticClass:"line-number"},[n._v("54")]),t("br"),t("span",{staticClass:"line-number"},[n._v("55")]),t("br")])]),t("p",[t("a",{attrs:{href:"https://segmentfault.com/a/1190000022796572",target:"_blank",rel:"noopener noreferrer"}},[n._v("参考"),t("OutboundLink")],1)]),n._v(" "),t("p",[t("a",{attrs:{href:"https://leetcode-cn.com/problems/eight-queens-lcci/",target:"_blank",rel:"noopener noreferrer"}},[n._v("面试题 08.12. 八皇后"),t("OutboundLink")],1)]),n._v(" "),t("h2",{attrs:{id:"分支限界法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#分支限界法"}},[n._v("#")]),n._v(" 分支限界法")]),n._v(" "),t("blockquote",[t("p",[n._v("回溯法是深度优先策略遍历问题的解空间树。分支限界法按广度优先策略遍历问题的解空间树。")])]),n._v(" "),t("p",[n._v("还记得我们前文有提到的 01 背包问题吗？"),t("a",{attrs:{href:"https://blog.csdn.net/weixin_42260102/article/details/96008327",target:"_blank",rel:"noopener noreferrer"}},[n._v("【分支限界法】也能求解 01 背包问题"),t("OutboundLink")],1)]),n._v(" "),t("p",[t("sup",[n._v("难受啊胸dei！到这里有点被劝退的赶脚（QAQ），算法确实是计算机技术的护城河！！继续啃吧！")])]),n._v(" "),t("h2",{attrs:{id:"概率算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概率算法"}},[n._v("#")]),n._v(" 概率算法")]),n._v(" "),t("blockquote",[t("p",[n._v("概率算法也叫随机化算法。 概率算法允许算法在执行过程中随机地选择下一个计算步骤。 在很多情况下，算法在执行过程中面临选择时，随机性选择比最优选择省时，因此概率算法可以在很大程度上降低算法的复杂度。")])]),n._v(" "),t("p",[n._v("概率算法又大致分为四类：")]),n._v(" "),t("ol",[t("li",[n._v("数值概率算法")]),n._v(" "),t("li",[n._v("蒙特卡罗（Monte Carlo）算法")]),n._v(" "),t("li",[n._v("拉斯维加斯（Las Vegas）算法")]),n._v(" "),t("li",[n._v("舍伍德（Sherwood）算法")])]),n._v(" "),t("p",[n._v("先混个眼熟吧......更多自行探索。")]),n._v(" "),t("h2",{attrs:{id:"近似算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#近似算法"}},[n._v("#")]),n._v(" 近似算法")]),n._v(" "),t("blockquote",[t("p",[n._v("近似算法是计算机科学中算法研究的一个重要方向。所谓“近似”，就是指结果不一定是最优的，但是也在可以承受的范围内，而且可以比精确求解消耗更少的资源。这里的资源是计算复杂性理论中的标准，可以是时间，空间或者询问次数等。")])]),n._v(" "),t("p",[n._v("前面提到过的旅行商问题也是近似算法。")]),n._v(" "),t("p",[n._v("更多可了解："),t("a",{attrs:{href:"https://zh.wikipedia.org/wiki/P/NP%E9%97%AE%E9%A2%98",target:"_blank",rel:"noopener noreferrer"}},[n._v("P/NP问题"),t("OutboundLink")],1),n._v("，P/NP 问题是一个在理论信息学中计算复杂度理论领域里至今未被解决的问题，也是克雷数学研究所七个千禧年大奖难题之一。（哇！有一种触及人类数学天花板的错觉）")]),n._v(" "),t("h2",{attrs:{id:"数据挖掘算法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#数据挖掘算法"}},[n._v("#")]),n._v(" 数据挖掘算法")]),n._v(" "),t("blockquote",[t("p",[n._v("数据挖掘算法是根据数据创建数据挖掘模型的一组试探法和计算。为了创建模型，算法将首先分析您提供的数据，并查找特定类型的模式和趋势。")])]),n._v(" "),t("p",[n._v("数据挖掘算法底下又细分十大算法，更多："),t("a",{attrs:{href:"https://wizardforcel.gitbooks.io/dm-algo-top10/content/index.html",target:"_blank",rel:"noopener noreferrer"}},[n._v("数据挖掘十大算法详解"),t("OutboundLink")],1)]),n._v(" "),t("p",[n._v("本瓜先告辞，mark 一下，后面或许有空再来。")]),n._v(" "),t("h2",{attrs:{id:"小结"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[n._v("#")]),n._v(" 小结")]),n._v(" "),t("p",[n._v("以上笔试面试中常见的有：快排、最长子串问题系列、最短路径查找问题系列、棋盘问题系列、深度优先遍历系列、广度优秀遍历系列。")]),n._v(" "),t("p",[n._v("后面四种算法只需大致了解~")]),n._v(" "),t("p",[n._v("不过其中随处可见且最最核心的递归思想，真的太重要辣~")]),n._v(" "),t("p",[n._v("怎么说呢？")]),n._v(" "),t("p",[n._v("简单是最迷人的，这一点不会变。")]),n._v(" "),t("p",[t("strong",[n._v("算法确实很难，但或许难得东西，才有你让它变简单的价值吧~")])]),n._v(" "),t("p",[n._v("我是掘金安东尼，公众号【掘金安东尼】，输出暴露输入，技术洞见生活。")]),n._v(" "),t("p",[n._v("大家端午安康！")])])}),[],!1,null,null,null);s.default=e.exports}}]);