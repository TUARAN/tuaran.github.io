(window.webpackJsonp=window.webpackJsonp||[]).push([[117],{614:function(s,n,a){"use strict";a.r(n);var e=a(2),r=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("不知不觉，我们已经来到了《JS如何函数式编程》系列的【第四篇】。")]),s._v(" "),a("p",[s._v("前三篇：")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6968259661304692750",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（一）》"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6969016132741103624",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（二）》"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6971260867300032525",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（三）》"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("经过前几篇的历练，本瓜相信你的心中一定对函数编程有了基本的蓝图。")]),s._v(" "),a("p",[s._v("本篇会将这个蓝图再具象一下，谈谈函数编程中一个很重要的细节 —— "),a("strong",[s._v("“副作用”")]),s._v("。")]),s._v(" "),a("p",[s._v("维基上关于副作用的解释：")]),s._v(" "),a("blockquote",[a("p",[s._v("函数内部有隐式（Implicit）的数据流，这种情况叫做副作用（Side Effect）。")])]),s._v(" "),a("p",[s._v("咱们前文也提到过："),a("strong",[s._v("开发人员喜欢显式输入输出而不是隐式输入输出。")])]),s._v(" "),a("p",[s._v("所以我们将细致的看看副作用中【隐式】和【显式】的区别!")]),s._v(" "),a("h2",{attrs:{id:"何为副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为副作用"}},[s._v("#")]),s._v(" 何为副作用？")]),s._v(" "),a("p",[s._v("先来个小例子作开胃菜：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 片段 1\nfunction foo(x) {\n    return x * 2;\n}\n\nvar y = foo( 3 );\n\n// 片段 2\nfunction foo(x) {\n    y = x * 2;\n}\n\nvar y;\n\nfoo( 3 );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("片段 1 和片段 2 实现的最终效果是一致的，即 y = 3 * 2 ，但是片段 1 是显示的，片段 2 是隐式的。")]),s._v(" "),a("p",[s._v("原因是：片段 2 在函数内引用了外部变量 y。")]),s._v(" "),a("p",[s._v("片段 2 ，当我们调用 "),a("code",[s._v("foo( 3 )")]),s._v(" 时，并不知道其内部是否会修改外部变量 y。它的修改是隐式的，即产生了副作用！")]),s._v(" "),a("p",[a("strong",[s._v("有副作用的函数可读性更低，我们需要更多的阅读来理解程序。")])]),s._v(" "),a("p",[s._v("再举一例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var x = 1;\n\nfoo();\n\nconsole.log( x );\n\nbar();\n\nconsole.log( x );\n\nbaz();\n\nconsole.log( x );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("如果每个函数内都引用了 x ，有可能对其赋值修改，那么我们很难知道每一步 x 的值是怎样的，要每一步去追踪！")]),s._v(" "),a("p",[s._v("选择在一个或多个函数调用中编写带有（潜在）副作用的代码，那么这意味着你代码的读者必须将你的程序完整地执行到某一行，逐步理解。")]),s._v(" "),a("p",[s._v("如果 "),a("code",[s._v("foo()")]),s._v("、"),a("code",[s._v("bar()")]),s._v("、和 "),a("code",[s._v("baz()")]),s._v(" 这三个函数没有（潜在）副作用，x 的值一眼可见！")]),s._v(" "),a("p",[s._v("一定是修改外部变量才是产生副作用了吗？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(x) {\n    return x + y;\n}\n\nvar y = 3;\n\nfoo( 1 ); \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这段代码中，我们没有修改外部变量 y ，但是引用了它，也是会产生副作用的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("y = 5;\n\n// ..\n\nfoo( 1 );   \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("两次 foo( 1 ) 的结果却不一样，又增大了阅读的负担。相信我，这是个最简单抽象的例子，实际的影响将远大于此。")]),s._v(" "),a("h2",{attrs:{id:"何解副作用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何解副作用"}},[s._v("#")]),s._v(" 何解副作用？")]),s._v(" "),a("ol",[a("li",[s._v("const")])]),s._v(" "),a("p",[s._v("以上面的例子来说：这样写，foo( 1 ) 的结果当然是确定的，因为用到了 const 来固定外部变量。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const y = 5;\n\n// ..\n\nfoo( 1 );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("I/O")])]),s._v(" "),a("p",[s._v("一个没有 I/O 的程序是完全没有意义的，因为它的工作不能以任何方式被观察到。一个有用的程序必须最少有一个输出，并且也需要输入。输入会产生输出。")]),s._v(" "),a("p",[s._v("还记得 foo(..) 函数片段 2 吗？没有输出 return，这是不太可取的。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 片段 2\nfunction foo(x) {\n    y = x * 2;\n}\n\nvar y;\n\nfoo( 3 );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("明确依赖")])]),s._v(" "),a("p",[s._v("我们经常会由于函数的异步问题导致数据出错；一个函数引用了另外一个函数的回调结果，当我们作这种引用时要特别注意。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var users = {};\nvar userOrders = {};\n\nfunction fetchUserData(userId) {\n    ajax( "http://some.api/user/" + userId, function onUserData(userData){\n        users[userId] = userData;\n    } );\n}\n\nfunction fetchOrders(userId) {\n    ajax( "http://some.api/orders/" + userId, function onOrders(orders){\n        for (let i = 0; i < orders.length; i++) {\n                // 对每个用户的最新订单保持引用\n            users[userId].latestOrder = orders[i];\n            userOrders[orders[i].orderId] = orders[i];\n        }\n    } );\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br")])]),a("p",[a("code",[s._v("fetchUserData(..)")]),s._v(" 应该在 "),a("code",[s._v("fetchOrders(..)")]),s._v(" 之前执行，因为后者设置 "),a("code",[s._v("latestOrder")]),s._v(" 需要前者的回调；")]),s._v(" "),a("p",[a("strong",[s._v("写出有副作用/效果的代码是很正常的")]),s._v("， 但我们需要谨慎和刻意地避免产生有副作用的代码。")]),s._v(" "),a("ol",{attrs:{start:"4"}},[a("li",[s._v("运用幂等")])]),s._v(" "),a("p",[s._v("这是一个很新但重要的概念！")]),s._v(" "),a("p",[s._v("从数学的角度来看，幂等指的是在第一次调用后，如果你将该输出一次又一次地输入到操作中，其输出永远不会改变的操作。")]),s._v(" "),a("p",[s._v("一个典型的数学例子是 Math.abs(..)（取绝对值）。Math.abs(-2) 的结果是 2，和 Math.abs(Math.abs(Math.abs(Math.abs(-2)))) 的结果相同。")]),s._v(" "),a("p",[s._v("幂等在 js 中的表现：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 例 1\nvar x = 42, y = "hello";\n\nString( x ) === String( String( x ) );                // true\n\nBoolean( y ) === Boolean( Boolean( y ) );            // true\n\n// 例 2\nfunction upper(x) {\n    return x.toUpperCase();\n}\n\nfunction lower(x) {\n    return x.toLowerCase();\n}\n\nvar str = "Hello World";\n\nupper( str ) == upper( upper( str ) );                // true\n\nlower( str ) == lower( lower( str ) );                // true\n\n// 例 3\nfunction currency(val) {\n    var num = parseFloat(\n        String( val ).replace( /[^\\d.-]+/g, "" )\n    );\n    var sign = (num < 0) ? "-" : "";\n    return `${sign}$${Math.abs( num ).toFixed( 2 )}`;\n}\n\ncurrency( -3.1 );                                    // "-$3.10"\n\ncurrency( -3.1 ) == currency( currency( -3.1 ) );    // true\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br")])]),a("p",[s._v("实际上，"),a("strong",[s._v("我们在 js 函数式编程中幂等有更加宽泛的概念，即只需要求："),a("code",[s._v("f(x) === f(f(x))")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 幂等的：\nobj.count = 2; // 这里的幂等性的概念是每一个幂等运算（比如 obj.count = 2）可以重复多次\nperson.name = upper( person.name );\n\n// 非幂等的：\nobj.count++;\nperson.lastUpdated = Date.now();\n\n// 幂等的：\nvar hist = document.getElementById( "orderHistory" );\nhist.innerHTML = order.historyText;\n\n// 非幂等的：\nvar update = document.createTextNode( order.latestUpdate );\nhist.appendChild( update );\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("我们不会一直用幂等的方式去定义数据，但如果能做到，这肯定会减少意外情况下产生的副作用。这需要时间去体会，我们就先记住它。")]),s._v(" "),a("h2",{attrs:{id:"纯函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#纯函数"}},[s._v("#")]),s._v(" 纯函数")]),s._v(" "),a("p",[s._v("你应该听说过纯函数的大名，"),a("strong",[s._v("我们把没有副作用的函数称为纯函数。")])]),s._v(" "),a("p",[s._v("例 1：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function add(x,y) {\n    return x + y;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("输入（x 和 y）和输出（return ..）都是直接的，没有引用自由变量。调用 add(3,4) 多次和调用一次是没有区别的。add(..) 是纯粹的编程风格的幂等。")]),s._v(" "),a("p",[s._v("例 2：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const PI = 3.141592;\n\nfunction circleArea(radius) {\n    return PI * radius * radius;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("circleArea 也是纯函数。虽然它调用了外部变量 PI ，但是 PI 是 const 定义的常量，引用常量不会产生副作用；")]),s._v(" "),a("p",[s._v("例 3：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function unary(fn) {\n    return function onlyOneArg(arg){\n        return fn( arg );\n    };\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("unary 也是纯函数。")]),s._v(" "),a("p",[a("strong",[s._v("表达一个函数的纯度的另一种常用方法是：给定相同的输入（一个或多个），它总是产生相同的输出。")])]),s._v(" "),a("p",[s._v("不纯的函数是不受欢迎的！因为我们需要更多的精力去判断它的输出结果！")]),s._v(" "),a("p",[s._v("写纯函数需要更多耐心，比如我们操作数组的 push(..) 方法，或 reverse(..) 方法等，看起来安全，但实际上会修改数组本身。我们需要复制一个变量来解耦（深拷贝）。")]),s._v(" "),a("p",[s._v("函数的纯度是和自信是有关的。函数越纯洁越好。制作纯函数时越努力，当您阅读使用它的代码时，你的自信就会越高，这将使代码更加可读。")]),s._v(" "),a("p",[s._v("其实，关于函数纯度还有更多有意思的点：")]),s._v(" "),a("p",[s._v("思考一个问题，如果我们把函数和外部变量再封装为一个函数，外界无法直接访问其内部，这样，内部的函数算不算是一个纯函数？")]),s._v(" "),a("blockquote",[a("p",[s._v("假如一棵树在森林里倒下而没有人在附近听见，它有没有发出声音？")])]),s._v(" "),a("h2",{attrs:{id:"阶段小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阶段小结"}},[s._v("#")]),s._v(" 阶段小结")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("我们反复强调："),a("strong",[s._v("开发人员喜欢显式输入输出而不是隐式输入输出。")])])]),s._v(" "),a("li",[a("p",[s._v("如果有隐式的输入输出，那么就有可能产生副作用。")])]),s._v(" "),a("li",[a("p",[s._v("有副作用的代码让我们的代码理解起来更加费劲！")])]),s._v(" "),a("li",[a("p",[s._v("解决副作用的方法有：定义常量、明确 I/O、明确依赖、运用幂等......")])]),s._v(" "),a("li",[a("p",[s._v("在 js 运用幂等是一个新事物，我们需要逐渐熟悉它。")])]),s._v(" "),a("li",[a("p",[s._v("没有副作用的函数就是纯函数，纯函数是我们追求编写的！")])]),s._v(" "),a("li",[a("p",[s._v("将一个不纯的函数重构为纯函数是首选。但是，如果无法重构，尝试封装副作用。（假如一棵树在森林里倒下而没有人在附近听见，它有没有发出声音？—— 有没有其实已经不重要了，反正听不到）")])])]),s._v(" "),a("p",[s._v("以上，便是本次关于 JS 函数式编程"),a("strong",[s._v("副作用")]),s._v("这个细节的讲解。")]),s._v(" "),a("p",[s._v("这个细节，真的很重要！")]),s._v(" "),a("p",[s._v("我是掘金安东尼，公众号【掘金安东尼】，输出暴露输入，技术洞见生活！")])])}),[],!1,null,null,null);n.default=r.exports}}]);