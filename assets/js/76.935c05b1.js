(window.webpackJsonp=window.webpackJsonp||[]).push([[76],{571:function(n,e,s){"use strict";s.r(e);var t=s(2),a=Object(t.a)({},(function(){var n=this,e=n.$createElement,s=n._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[s("hr"),n._v(" "),s("p",[n._v("算法系列， 继续日进一卒~ 之前文章传送门：")]),n._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://juejin.cn/post/7025475800623218702",target:"_blank",rel:"noopener noreferrer"}},[n._v("《温故知新 —— Sliding Window》"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/7026259253866266654",target:"_blank",rel:"noopener noreferrer"}},[n._v("《辛辣天塞！滑动窗口之【和的最大值】&【最大值集合】》"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/7026648421494685726",target:"_blank",rel:"noopener noreferrer"}},[n._v("《keep move！滑动窗口中位数与滑动魔方》"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/7026987512543313934",target:"_blank",rel:"noopener noreferrer"}},[n._v("《好的，BFS，又学废了！》"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/7027369616024272926",target:"_blank",rel:"noopener noreferrer"}},[n._v("《好的，DFS，也学废了！》"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/7027695862390194212",target:"_blank",rel:"noopener noreferrer"}},[n._v("《从 DFS 到回溯法，再看 N 皇后问题》"),s("OutboundLink")],1)]),n._v(" "),s("li",[s("a",{attrs:{href:"https://juejin.cn/post/7033692921979207688",target:"_blank",rel:"noopener noreferrer"}},[n._v("《回溯法解决【电话号码的字母组合】问题》"),s("OutboundLink")],1)])]),n._v(" "),s("p",[s("strong",[n._v("本篇将带来双指针算法经典题目之：接雨水问题；")])]),n._v(" "),s("p",[s("a",{attrs:{href:"https://leetcode-cn.com/problems/trapping-rain-water/",target:"_blank",rel:"noopener noreferrer"}},[n._v("题目"),s("OutboundLink")],1),n._v("：")]),n._v(" "),s("blockquote",[s("p",[n._v("给定 "),s("code",[n._v("n")]),n._v(" 个非负整数表示每个宽度为 "),s("code",[n._v("1")]),n._v(" 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。")])]),n._v(" "),s("p",[s("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/787c4a62f5c34a95ac0d01f5bf1ccf14~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("输入：height = [0,1,0,2,1,0,1,3,2,1,2,1]\n输出：6\n解释：上面是由数组 [0,1,0,2,1,0,1,3,2,1,2,1] 表示的高度图，在这种情况下，可以接 6 个单位的雨水（蓝色部分表示雨水）。 \n示例 2：\n\n输入：height = [4,2,0,3,2,5]\n输出：9\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br")])]),s("p",[n._v("解题思路：")]),n._v(" "),s("p",[s("strong",[n._v("解法 1 ：暴力解法")])]),n._v(" "),s("p",[n._v("直接按照题目的描述进行，对于数组中的每一个元素，我们找出下雨后水能达到的最高位置，等于两边最大高度较小值减去当前高度的值。")]),n._v(" "),s("p",[n._v("如果i是2 左边的最大值是索引为1的位置，这个位置值是1；右边最大值是3，当前这个位置能够存储多少水，是由短的一边决定的；对于i为3的位置来说，算上当前的索引位置的高度左边的最大值是2。")]),n._v(" "),s("p",[n._v("右边的最大值是还是3，此时左右两边的最小值是2 当前索引处的高度，也是2 这样一来 ans 就是0。说明索引为3的位置不能存储雨水")]),n._v(" "),s("p",[n._v("JS 实现如下：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function (height) {\n  let res = 0;\n  for (let i = 0; i < height.length; i++) {\n    let max_letf = 0;\n    let max_right = 0;\n    // 以当前curr 这个位置为基准，找出左边的边界的最大值 找出右边边界的最大值\n    for (let j = i; j >= 0; j--) {\n      max_letf = Math.max(max_letf, height[j])\n    }\n    for (let j = i; j < height.length; j++) {\n      max_right = Math.max(max_right, height[j])\n    }\n\n    res += Math.min(max_letf, max_right) - height[i]\n  }\n  return res\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("p",[s("strong",[n._v("解法 2 ：双指针")])]),n._v(" "),s("p",[n._v("当左边最大挡板＜右边最大挡板，左边向前挺近，最终值加上当前左最大挡板-当前左指针所指值（相当于左边只要不超过右边，右边最大挡板稳定兜底，左边无脑挺近累加）大于则反之；")]),n._v(" "),s("p",[n._v("JS 实现：")]),n._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[n._v("/**\n * @param {number[]} height\n * @return {number}\n */\nvar trap = function(height) {\n    let end = 0 \n    let l = 0, r=height.length -1\n    let maxl = 0,maxr=0\n    while(l < r){\n        maxl = Math.max(height[l],maxl)\n        maxr = Math.max(height[r],maxr)\n        if(maxl < maxr){\n            end += maxl - height[l]\n            l++\n        }else{\n            end += maxr - height[r]\n            r--\n        }\n    }\n    return end\n};\n")])]),n._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[n._v("1")]),s("br"),s("span",{staticClass:"line-number"},[n._v("2")]),s("br"),s("span",{staticClass:"line-number"},[n._v("3")]),s("br"),s("span",{staticClass:"line-number"},[n._v("4")]),s("br"),s("span",{staticClass:"line-number"},[n._v("5")]),s("br"),s("span",{staticClass:"line-number"},[n._v("6")]),s("br"),s("span",{staticClass:"line-number"},[n._v("7")]),s("br"),s("span",{staticClass:"line-number"},[n._v("8")]),s("br"),s("span",{staticClass:"line-number"},[n._v("9")]),s("br"),s("span",{staticClass:"line-number"},[n._v("10")]),s("br"),s("span",{staticClass:"line-number"},[n._v("11")]),s("br"),s("span",{staticClass:"line-number"},[n._v("12")]),s("br"),s("span",{staticClass:"line-number"},[n._v("13")]),s("br"),s("span",{staticClass:"line-number"},[n._v("14")]),s("br"),s("span",{staticClass:"line-number"},[n._v("15")]),s("br"),s("span",{staticClass:"line-number"},[n._v("16")]),s("br"),s("span",{staticClass:"line-number"},[n._v("17")]),s("br"),s("span",{staticClass:"line-number"},[n._v("18")]),s("br"),s("span",{staticClass:"line-number"},[n._v("19")]),s("br"),s("span",{staticClass:"line-number"},[n._v("20")]),s("br"),s("span",{staticClass:"line-number"},[n._v("21")]),s("br")])]),s("p",[n._v("时间复杂度：O(n)；双指针，YYDS！")]),n._v(" "),s("p",[n._v("有木有觉得双指针和滑动窗口很像？后续还会带来更多关于"),s("strong",[n._v("双指针")]),n._v("的探究~~")])])}),[],!1,null,null,null);e.default=a.exports}}]);