(window.webpackJsonp=window.webpackJsonp||[]).push([[196],{690:function(n,s,a){"use strict";a.r(s);var e=a(2),r=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("柯里化是 JS 高程中不可或缺的重心，本篇带你来冲一冲它！！")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1513f2a1f1b470488e88750dc7db5ae~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),n._v(" "),a("hr"),n._v(" "),a("p",[n._v("我们不妨以两数相加为例子，递进说明。")]),n._v(" "),a("p",[n._v("我们通常是这样写一个函数来求得 "),a("strong",[n._v("两数相加")]),n._v(" 的值：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function sum(a,b){\n    console.log(a+b)\n}\nsum(1,2)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("p",[n._v("这样写一点毛病没有！")]),n._v(" "),a("p",[n._v("不过呢？问题总会在发展中产生，产品经理又要加一个值，需求："),a("strong",[n._v("三数相加")]),n._v("；")]),n._v(" "),a("p",[n._v("咱通常来说，第一时间，就在原基础上，直接再加一个参数就是了；")]),n._v(" "),a("p",[n._v("于是，修改后像是这样：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function sum(a,b,c){\n    console.log(a+b+c)\n}\nsum(1,2,3)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br")])]),a("blockquote",[a("p",[n._v("问：这样写，有毛病吗？？")])]),n._v(" "),a("blockquote",[a("p",[n._v("答：太有毛病了！")])]),n._v(" "),a("p",[a("strong",[n._v("这样一改，既违反了：“开闭原则”、又违反了：“单一职责原则”。")])]),n._v(" "),a("p",[n._v("为不太熟悉设计原则的小伙伴们，简单解释下：")]),n._v(" "),a("ul",[a("li",[n._v("什么是“开闭原则”？即：我们编程中要尽可能的避免直接修改函数、类或模块，而是要在原有基础上拓展它；")]),n._v(" "),a("li",[n._v("什么是“单一职责原则”？即：每个函数、类或模块，应该只负责一个单一的功能；")])]),n._v(" "),a("p",[n._v("首先，咱修改了 sum 函数的传参以及内部的调用 ⇒ 则违反“开闭原则”")]),n._v(" "),a("p",[n._v("其次，sum 函数本来只负责两数相加，修改后，它又负责三数相加，职责已经发生了变化 ⇒ 则违反 “单一职责原则”；")]),n._v(" "),a("p",[n._v("如果正规按照单一责任来写，应该是：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 负责两数相加\nfunction sum2(a,b){\n    console.log(a+b)\n}\n\n// 负责三数相加\nfunction sum3(a,b,c){\n    console.log(a+b+c)\n}\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("事实上，是不可能这样去写的，因为如果有一万个数相加，得写一万个函数。")]),n._v(" "),a("p",[n._v("而 "),a("strong",[n._v("加法只有一个！！")]),n._v(" 不管你最终要加几个值，总是要一个加一个。")]),n._v(" "),a("p",[n._v("于是乎，我们设想，能不能写一个这样的函数：它的功能，就是“加”，参数跟几个，我就加几个。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 负责“加法”，\nfunction addCurry(){\n    ...\n    ...\n    ...\n}\n\naddCurry(1)(2) // 两数相加\naddCurry(1)(2)(3) // 三数相加\n...\naddCurry(1)(2)(3)...(n) // n 数相加\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("p",[n._v("没错，这个函数就是：柯里化！！（或者说这个过程叫柯里化，这个思想叫柯里化，本瓜认为这里不需要太死扣定义）")]),n._v(" "),a("p",[n._v("接着，我们一步步来试试，它会是怎样构成的？")]),n._v(" "),a("p",[n._v("为了能够实现一个加一个，即存储参数的目的，我们想一想，还有什么法宝？")]),n._v(" "),a("p",[n._v("没错，JS 奥义：闭包！")]),n._v(" "),a("p",[n._v("其实，本瓜时常想，闭包的终极秘密是什么？最后将其理解为 4 个金光闪闪的大字："),a("strong",[n._v("延迟处理")]),n._v("！")]),n._v(" "),a("p",[n._v("什么意思？简单解释下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function directHandle(a,b){\n    console.log("直接处理",a,b)\n}\n\ndirectHandle(111,222)\n\n// 直接处理 111 222\n\nfunction delayHandle(a){\n    return function(b){\n         console.log("延迟处理",a,b)\n    }\n}\n\ndelayHandle(111)\n\n// ƒ (b){\n//\t    console.log("延迟处理",a,b)\n//\t}\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("如上 "),a("code",[n._v("delayHandle(111)")]),n._v(" 不像 "),a("code",[n._v("directHandle(111,222)")]),n._v(" 直接打印值，而是先返回一个函数 "),a("code",[n._v("f(b)")]),n._v("；111 也被临时保存了，"),a("code",[n._v("delayHandle(111)(222)")]),n._v("，则得到相同的输出。这就是：延迟处理的思想。")]),n._v(" "),a("p",[n._v("另外补一句：延迟处理是函数式编程的精华所在，在不能保证每个函数都是纯函数的前提下，在管道处理的最后，再进行处理，能最大程度的保证减少副作用。也就是 Monad 思想，此处不做展开。")]),n._v(" "),a("p",[n._v("言归正传，于是乎，我们借用闭包来实现最初版的柯里化：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("// 两数相加\nfunction addCurry(a){\n    return function(b){\n            console.log(a+b)\n    }\n}\n\naddCurry(1)(2)\n\n// 三数相加\nfunction addCurry(a){\n    return function(b){\n        return function(c){\n             console.log(a+b+c)\n        }\n    }\n}\n\naddCurry(1)(2)(3)\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("p",[n._v("写两个闭包的过程，聪明的你一定就明白了，这样一直写下去，不就是递归吗？！")]),n._v(" "),a("p",[n._v("于是乎，我们知道，当参数是 n 个的时候，需要递归 n-1 次 "),a("code",[n._v("return function")])]),n._v(" "),a("p",[n._v("于是乎，addCurry 写法如下：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("\n let arr = []\n function addCurry() {\n     let arg = Array.prototype.slice.call(arguments); // 递归获取后续参数\n     arr = arr.concat(arg);\n      if (arg.length === 0) { // 如果参数为空，则判断递归结束\n          return arr.reduce((a,b)=>{return a+b}) // 求和\n      } else {\n          return addCurry;\n      }\n  }\n\naddCurry(1)(2)(3)()\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("OK，至此，，大功告成！！")]),n._v(" "),a("p",[n._v("以上，用最简单的代码解释了 —— 为什么我说：柯里化 == 闭包+递归 ？")]),n._v(" "),a("p",[n._v("柯里化是一种思想，上面的 addCurry 可以说是最简单的一种实践。在函数式编程中，Curry 更是大放异彩，比如 "),a("code",[n._v("compose(fn1)(fn2)(fn3)…(fnN)(args)")]),n._v(" 等等。")]),n._v(" "),a("p",[n._v("如果以后有人再问你柯里化，可以往这个方向上答。。。")]),n._v(" "),a("blockquote",[a("p",[n._v("OK，以上便是本篇分享。 觉得不错点个赞吧👍👍👍，您的鼓励，我的动力，坚持原创质量好文~~ 欢迎评论留言 我是掘金安东尼，输出暴露输入，技术洞见生活。再会吧~~ 👋👋👋")])])])}),[],!1,null,null,null);s.default=r.exports}}]);