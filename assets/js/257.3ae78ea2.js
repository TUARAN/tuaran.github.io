(window.webpackJsonp=window.webpackJsonp||[]).push([[257],{753:function(s,t,a){"use strict";a.r(t);var n=a(2),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("携手创作，共同成长！这是我参与「掘金日新计划 · 8 月更文挑战」的第5天，"),a("a",{attrs:{href:"https://juejin.cn/post/7123120819437322247",title:"https://juejin.cn/post/7123120819437322247",target:"_blank",rel:"noopener noreferrer"}},[s._v("点击查看活动详情"),a("OutboundLink")],1)]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("爬楼梯都还记得吧？"),a("code",[s._v("f(x)=f(x-1)+f(x-2)")]),s._v("，斐波那契数列。")]),s._v(" "),a("p",[s._v("本题是爬楼梯的变形题："),a("strong",[s._v("爬楼梯的最少成本")])]),s._v(" "),a("p",[s._v("上题！！")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4ead1906e0384f78b10b54fa15b69ada~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("blockquote",[a("p",[s._v("数组的每个下标作为一个阶梯，第 i 个阶梯对应着一个非负数的体力花费值 cost[i]（下标从 0 开始）。")]),s._v(" "),a("p",[s._v("每当爬上一个阶梯都要花费对应的体力值，一旦支付了相应的体力值，就可以选择向上爬一个阶梯或者爬两个阶梯。")]),s._v(" "),a("p",[s._v("请找出达到楼层顶部的最低花费。在开始时，你可以选择从下标为 0 或 1 的元素作为初始阶梯。")])]),s._v(" "),a("p",[s._v("示例 1：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：cost = [10, 15, 20]\n输出：15\n解释：最低花费是从 cost[1] 开始，然后走两步即可到阶梯顶，一共花费 15 。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("示例 2：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("输入：cost = [1, 100, 1, 1, 1, 100, 1, 1, 100, 1]\n输出：6\n解释：最低花费方式是从 cost[0] 开始，逐个经过那些 1 ，跳过 cost[3] ，一共花费 6 。\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ul",[a("li",[s._v("题目来源："),a("a",{attrs:{href:"https://leetcode.cn/problems/GzCJIP/",target:"_blank",rel:"noopener noreferrer"}},[s._v("剑指 Offer II 088. 爬楼梯的最少成本"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"第一反应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一反应"}},[s._v("#")]),s._v(" 第一反应")]),s._v(" "),a("p",[s._v("这题目读完有一种将动态规划 DP（做比较得最大值或最小值）和 爬楼梯斐波那契结合的感觉。")]),s._v(" "),a("p",[s._v("爬楼梯都是从后面往前想，最后一台阶 = 前面一台阶+1步 或者 前面一台阶+2步")]),s._v(" "),a("p",[s._v("台阶是 n 阶，到达阶顶是 n+1")]),s._v(" "),a("p",[s._v("到达第 n 阶的最小花费等于（到达第 n-1 阶的最小花费和在 n-1 阶花费的和）与（到达第 n-2 阶的最小花费和在 n-2 阶花费的和）二者的最小值。")]),s._v(" "),a("p",[s._v("怎么理解？因为到达第 n 阶的花费是不包括 n 那一阶的花费的，只包含它前面那一阶的花费和在这一阶之前的最小花费的。前一阶，可能是相距 1 步，也可能是相距 2 步。")]),s._v(" "),a("p",[s._v("转化为代码即：")]),s._v(" "),a("p",[s._v("less[n] = Math.min(less[n-1]+cost[n-1],less[n-2]+cost[n-2])")]),s._v(" "),a("p",[s._v("对吧，和预测一致，动态规划 DP 比较值，以及斐波那契数列的思路结合。")]),s._v(" "),a("h2",{attrs:{id:"第二反应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第二反应"}},[s._v("#")]),s._v(" 第二反应")]),s._v(" "),a("p",[s._v("斐波那契一般就手动定义初始项就好了，本题的初始阶梯，比如数组 [1],[1,1]，都是可以分别跨一步、两步登到阶梯顶部，所以不需要花费，花费为 0 ；")]),s._v(" "),a("p",[s._v("即 less[0]=0 、 less[1]=0")]),s._v(" "),a("p",[s._v("剩下的就用一层 for 循环，然后套用上述公式即可。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("minCostClimbingStairs")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("cost")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" less "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n    less"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    less"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("for")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("++")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        less"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("min")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("less"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("less"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("n"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" less"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),s._v("cost"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("length"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53e88350bde84b8c897a0fd38cd86bba~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("h2",{attrs:{id:"第三反应"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第三反应"}},[s._v("#")]),s._v(" 第三反应")]),s._v(" "),a("p",[a("strong",[s._v("小结：")])]),s._v(" "),a("p",[s._v("这题如果不是用动态规划+斐波那契去解，真的就会很麻烦，要考虑的情况太多了。")]),s._v(" "),a("p",[s._v("所以，做算法题第一步是最难的，就是把题目抽象成公式。")]),s._v(" "),a("blockquote",[a("p",[s._v("OK，以上便是本篇分享。点赞关注评论，为好文助力👍")]),s._v(" "),a("p",[s._v("我是掘金安东尼 🤠 100 万人气前端技术博主 💥 INFP 写作人格坚持 1000 日更文 ✍ 关注我，安东尼陪你一起度过漫长编程岁月 🌏")])])])}),[],!1,null,null,null);t.default=e.exports}}]);