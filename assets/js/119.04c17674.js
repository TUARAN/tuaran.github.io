(window.webpackJsonp=window.webpackJsonp||[]).push([[119],{616:function(s,n,a){"use strict";a.r(n);var e=a(2),r=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("第六篇，我们首先再次重申这句经典的话：")]),s._v(" "),a("blockquote",[a("p",[s._v("如果要整体了解一个人的核心 JavaScript 技能，我最感兴趣的是他们会如何使用闭包以及如何充分利用异步。—— Jake Archibald")])]),s._v(" "),a("p",[s._v("我们前篇谈了很多关于【闭包】的理解了，所以你应该会知道，我们现在将要谈的就是 ——【异步】。")]),s._v(" "),a("h2",{attrs:{id:"再看异步"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#再看异步"}},[s._v("#")]),s._v(" 再看异步")]),s._v(" "),a("p",[s._v("异步问题为什么会觉得复杂呢？")]),s._v(" "),a("p",[s._v("其中很重要的一个原因是 —— 时间，"),a("strong",[s._v("时间将我们对数据的操作、管理，变复杂了好几个量级！")])]),s._v(" "),a("p",[s._v("需要特别提出明确的是：**异步和同步之间是可以相互转化的！**我们使用异步或者同步取决于 —— 如何使代码更加可读！")]),s._v(" "),a("p",[s._v("函数式编程给出了实现它的落地“原则”：")]),s._v(" "),a("ol",[a("li",[s._v("严格控制显示的输入输出；")]),s._v(" "),a("li",[s._v("封装高级函数，比如偏函数、柯里化实现参数的时域分离；")]),s._v(" "),a("li",[s._v("封装高级函数，比如函数组装，形成黑盒；")]),s._v(" "),a("li",[s._v("对其它基础方法进行封装，比如数组操作；")]),s._v(" "),a("li",[s._v("......")])]),s._v(" "),a("p",[s._v("所以我们可以期待，异步在函数式编程中的表现！")]),s._v(" "),a("h2",{attrs:{id:"减少时间状态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#减少时间状态"}},[s._v("#")]),s._v(" 减少时间状态")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var customerId = 42;\nvar customer;\n\nlookupCustomer( customerId, function onCustomer(customerRecord){ // 通过查询用户来查询订单\n    var orders = customer ? customer.orders : null;\n    customer = customerRecord;\n    if (orders) {\n        customer.orders = orders;\n    }\n} );\n\nlookupOrders( customerId, function onOrders(customerOrders){ // 直接查询订单\n    if (!customer) {\n        customer = {};\n    }\n    customer.orders = customerOrders;\n} );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br")])]),a("p",[a("code",[s._v("onCustomer(..)")]),s._v(" 和 "),a("code",[s._v("onOrders(..)")]),s._v(" 是两个【回调函数】"),a("sup",[s._v("释义")]),s._v("，两者执行的先后顺序并不能确定，所以它是一个基于时间的复杂状态。")]),s._v(" "),a("p",[a("sup",[s._v("释义：回调函数其实就是一个参数，将这个函数作为参数传到另一个函数里面，当那个函数执行完之后，再执行传进去的这个函数。")])]),s._v(" "),a("ul",[a("li",[s._v("怎样去确定它们在时间上执行的先后关系呢？")])]),s._v(" "),a("p",[s._v("通常来说，我们最先想到的是：把 "),a("code",[s._v("lookupOrders(..)")]),s._v(" 写到 "),a("code",[s._v("onCustomer(..)")]),s._v(" 里面，那我们就可以确认 "),a("code",[s._v("onOrders(..)")]),s._v(" 会在 "),a("code",[s._v("onCustomer(..)")]),s._v(" 之后运行。")]),s._v(" "),a("p",[a("strong",[s._v("这样写，对吗？")])]),s._v(" "),a("p",[s._v("不对！因为 "),a("code",[s._v("onCustomer(..)")]),s._v(" 、"),a("code",[s._v("onOrders(..)")]),s._v(" 这两个回调函数的关系更像是一种竞争关系（都是赋值 "),a("code",[s._v("customer.orders")]),s._v("），"),a("strong",[s._v("它们应该并行执行")]),s._v("，"),a("strong",[s._v("而不是串行执行")]),s._v("。")]),s._v(" "),a("p",[s._v("即：我不管你们谁先执行，谁先执行完，谁就赋值给 "),a("code",[s._v("customer.orders")]),s._v("！")]),s._v(" "),a("p",[s._v("那我们的思路应该是：")]),s._v(" "),a("p",[s._v("用相应的 if-声明在各自的回调函数里来检查外部作用域的变量 customer。当各自的回调函数被执行，将会去检测 customer 的状态，从而确定各自的执行顺序，如果 customer 在回调函数里还没被定义，那他就是先运行的，否则则是第二个运行的。")]),s._v(" "),a("p",[s._v("不过，这样让代码又变得更加难阅读！！函数内部赋值依赖于外部变量、甚至受外部回调函数的影响。")]),s._v(" "),a("p",[s._v("那究竟怎么办呢？")]),s._v(" "),a("p",[s._v("最终，我们借用  JS promise 减少这个时间状态，将异步转成同步：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var customerId = 42;\n\nvar customerPromise = lookupCustomer( customerId );\nvar ordersPromise = lookupOrders( customerId );\n\ncustomerPromise.then( function onCustomer(customer){\n    ordersPromise.then( function onOrders(orders){\n        customer.orders = orders;\n    } );\n} );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("两个 "),a("code",[s._v(".then(..)")]),s._v(" 运行之前，"),a("code",[s._v("lookupCustomer(..)")]),s._v(" 和  "),a("code",[s._v("lookupOrders(..)")]),s._v(" 已被同步调用，满足并行执行，谁先结束，谁赋值给 "),a("code",[s._v("customer.orders")]),s._v("，所以我们不需要知道谁先谁后！")]),s._v(" "),a("p",[s._v("在这样的实现下，不再需要时间先后的概念！减少了时间状态！！代码的可读性更高了！！")]),s._v(" "),a("h2",{attrs:{id:"惰性的数组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性的数组"}},[s._v("#")]),s._v(" 惰性的数组")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = [1,2,3]\n\nvar b = a.map( v => v * 2 );\n\nb;            // [2,4,6]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这是一个"),a("strong",[s._v("积极的数组")]),s._v("，因为它们同步（即时）地操作着离散的即时值或值的列表/结构上的值。")]),s._v(" "),a("p",[s._v("什么意思？")]),s._v(" "),a("p",[s._v("a 映射到 b，再去修改 a ，b 不会收到影响。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var a = [];\n\nvar b = mapLazy( a, v => v * 2 );\n\na.push( 1 );\n\na[0];        // 1\nb[0];        // 2\n\na.push( 2 );\n\na[1];        // 2\nb[1];        // 4\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("而这，是一个"),a("strong",[s._v("惰性的数组")]),s._v("，"),a("code",[s._v("mapLazy(..)")]),s._v(" 本质上 “监听” 了数组 a，只要一个新的值添加到数组的末端（push(..)），它都会运行映射函数 v => v * 2 并把改变后的值添加到数组 b 里。")]),s._v(" "),a("p",[s._v("什么意思？")]),s._v(" "),a("p",[s._v("a 映射到 b，再去修改 a ，b 也会修改。")]),s._v(" "),a("ul",[a("li",[s._v("那么为什么第二种就是惰性的呢？")])]),s._v(" "),a("p",[s._v("原来，后者存在"),a("strong",[s._v("异步")]),s._v("的概念。")]),s._v(" "),a("p",[s._v("让我们来想象这样一个数组，它不只是简单地获得值，它还是一个懒惰地接受和响应（也就是“反应”）值的数组，比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 发布者:\n\nvar a = new LazyArray();\n\nsetInterval( function everySecond(){\n    a.push( Math.random() );\n}, 1000 );\n\n\n// **************************\n// 订阅者:\n\nvar b = a.map( function double(v){\n    return v * 2;\n} );\n\nb.listen( function onValue(v){\n    console.log( v );\n} );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("设置“懒惰的数组” a 的过程是异步的！")]),s._v(" "),a("p",[s._v("b ，是 map 映射后的数组，但更重要的是，b 是"),a("strong",[s._v("反应性")]),s._v("的，我们对 b 加了一个类似监听器的东西。")]),s._v(" "),a("p",[s._v("我们称前半部分为"),a("strong",[s._v("发布者")]),s._v("，后半部分为"),a("strong",[s._v("订阅者")]),s._v("。")]),s._v(" "),a("p",[s._v("你一定会疑问：定义这个"),a("strong",[s._v("懒惰的数组")]),s._v("，有何作用？这里发布者、订阅者，又是几个意思？")]),s._v(" "),a("p",[s._v("这里直接给出解答：")]),s._v(" "),a("blockquote",[a("ol",[a("li",[a("p",[s._v("正如 promise 从单个异步操作中抽离出我们所担心的时间状态，发布订阅模式也能从一系列的值或操作中抽离（分割）时间状态；")])]),s._v(" "),a("li",[a("p",[s._v("我们分离 【发布者】 和 【订阅者】 的相关代码，让代码应该各司其职。这样的代码组织可以很大程度上提高代码的可读性和维护性。")])])])]),s._v(" "),a("p",[s._v("这里再多小结一句：时间让异步更加复杂，函数式编程在异步下的运用就是减少或直接干掉时间状态。")]),s._v(" "),a("p",[s._v("想象下 a 还可以被绑定上一些其他的事件上，比如说用户的鼠标点击事件和键盘按键事件，服务端来的 websocket 消息等。")]),s._v(" "),a("p",[s._v("在这些情况下，a 没必要关注自己的时间状态。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 发布者:\n\nvar a = {\n    onValue(v){\n        b.onValue( v );\n    }\n};\n\nsetInterval( function everySecond(){\n    a.onValue( Math.random() );\n}, 1000 );\n\n\n// **************************\n// 订阅者:\n\nvar b = {\n    map(v){\n        return v * 2;\n    },\n    onValue(v){\n        v = this.map( v );\n        console.log( v );\n    }\n};\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("这里，"),a("strong",[s._v("【时间】 与 【a、b】 之间的关系是声明式的，不是命令式的。")])]),s._v(" "),a("p",[s._v("我们进一步，把 "),a("code",[s._v("b = a.map(..)")]),s._v(" 替换成 "),a("code",[s._v("b.onValue(v)")]),s._v("，尽量避免将 b 的逻辑夹杂在 a 中，让关注点更加分离！")]),s._v(" "),a("p",[s._v("上述的 "),a("strong",[s._v("LazyArray")]),s._v(" 又可叫做 "),a("strong",[s._v("observable")]),s._v("！（当然，它不止用在 map 方法中）")]),s._v(" "),a("p",[s._v("现在已经有各种各样的 Observables 的库类，最出名的是 RxJS 和 Most。")]),s._v(" "),a("p",[s._v("以 RxJS 为例：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 发布者:\n\nvar a = new Rx.Subject();\n\nsetInterval( function everySecond(){\n    a.next( Math.random() );\n}, 1000 );\n\n\n// **************************\n// 订阅者:\n\nvar b = a.map( function double(v){\n    return v * 2;\n} );\n\nb.subscribe( function onValue(v){\n    console.log( v );\n} );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("RxJS 还定义了超过 100 个可以在有新值添加时才触发的方法。就像数组一样。每个 Observable 的方法都会返回一个新的 Observable，意味着他们是链式的。如果一个方法被调用，则它的返回值应该由输入的 Observable 去返回，然后触发到输出的 Observable里，否则抛弃。")]),s._v(" "),a("p",[s._v("比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var b =\n    a\n    .filter( v => v % 2 == 1 )        // 过滤掉偶数\n    .distinctUntilChanged()            // 过滤连续相同的流\n    .throttle( 100 )                // 函数节流（合并100毫秒内的流）\n    .map( v = v * 2 );                // 变2倍\n\nb.subscribe( function onValue(v){\n    console.log( "Next:", v );\n} );\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("*　通常，subscribe(..) 方法都会在链式写法的最后被调用")]),s._v(" "),a("p",[s._v("更多关于："),a("a",{attrs:{href:"https://rxjs.dev/guide/overview",target:"_blank",rel:"noopener noreferrer"}},[s._v("RxJS"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"阶段小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阶段小结"}},[s._v("#")]),s._v(" 阶段小结")]),s._v(" "),a("p",[s._v("本篇介绍了【异步】在函数式编程中的表现。")]),s._v(" "),a("p",[s._v("原则是：对于那些异步中有时态的操作，基础的函数式编程原理就是将它们变为无时态的应用。即"),a("strong",[s._v("减少时间状态")]),s._v("！")]),s._v(" "),a("p",[s._v("就像 promise 创建了一个单一的未来值，我们可以创建一个积极的列表的值来代替像惰性的observable（事件）流的值。")]),s._v(" "),a("p",[s._v("我们介绍了 RxJS 库，后续我们还会介绍更多优美的 JS 函数式编程库！")]),s._v(" "),a("p",[s._v("第三方库选的好，每天下班都很早！！")]),s._v(" "),a("p",[s._v("现在本瓜有点明白那句话了：看一门语言是不是函数式编程，取决于它的核心库是不是函数式编程。")]),s._v(" "),a("p",[s._v("显然，也许我们还不熟悉像 RxJS 这类库，但我们慢慢就会越来越重视它们，越来越使用它们，越来越领会到它们！！")]),s._v(" "),a("p",[s._v("以上。")]),s._v(" "),a("p",[s._v("我是掘金安东尼，公众号【掘金安东尼】，输入暴露输出，技术洞见生活！！！")])])}),[],!1,null,null,null);n.default=r.exports}}]);