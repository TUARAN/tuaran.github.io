(window.webpackJsonp=window.webpackJsonp||[]).push([[57],{556:function(n,s,a){"use strict";a.r(s);var e=a(2),i=Object(e.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("本篇带来两道经典的关于滑动窗口的算法题，有兴趣可在控制台跑一跑~")]),n._v(" "),a("h2",{attrs:{id:"求和的最大值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求和的最大值"}},[n._v("#")]),n._v(" 求和的最大值")]),n._v(" "),a("p",[n._v("题目来源：上一篇掘文"),a("a",{attrs:{href:"https://juejin.cn/post/7025475800623218702#heading-0",target:"_blank",rel:"noopener noreferrer"}},[n._v("《温故知新 —— Sliding Window》"),a("OutboundLink")],1)]),n._v(" "),a("blockquote",[a("p",[n._v("比如给定如下数组：[ 5, 7, 1, 4, 3, 6, 2, 9, 2 ]，求出 5 个连续元素的最大和是多少？")]),n._v(" "),a("p",[a("code",[n._v("[5, 7, 1, 4, 3]")]),n._v(" 是第一组 5 个连续元素，求和是 "),a("code",[n._v("20")]),n._v("，"),a("code",[n._v("[7, 1, 4, 3, 6]")]),n._v(" 是第二组 5 个连续元素，求和是 "),a("code",[n._v("21")]),n._v("......这样一直进行下去，最终对比发现 5 个连续元素的最大和是 "),a("code",[n._v("24")]),n._v("，由 "),a("code",[n._v("[4, 3, 6, 2, 9]")]),n._v(" 组成；")])]),n._v(" "),a("p",[n._v("这里给出本瓜的另一种写法，仅供参考：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var maxSlidingWindow = function(nums, k) {\n   const sum = function (arr) {\n        return arr.reduce(function(prev, curr, idx, arr){\n            return prev + curr;\n        });\n    };\n    let slidingWindow=nums.slice(0,k)\n    let newSlidingWindow=[]\n    let maxVal;\n    for(let i=k;i<nums.length;i++){\n        newSlidingWindow=slidingWindow.slice(1).concat(nums[i])\n        maxVal=Math.max(sum(slidingWindow),sum(newSlidingWindow))\n        slidingWindow = newSlidingWindow\n    }\n    return maxVal\n};\nconst nums= [ 5, 7, 1, 4, 3, 6, 2, 9, 2 ]\nconst k=5\nmaxSlidingWindow(nums,k) // 24\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br")])]),a("h2",{attrs:{id:"求最大值集合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#求最大值集合"}},[n._v("#")]),n._v(" 求最大值集合")]),n._v(" "),a("p",[n._v("题目来源："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"}},[n._v("leetcode-239"),a("OutboundLink")],1),n._v(" （复杂）")]),n._v(" "),a("blockquote",[a("p",[n._v("给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。")]),n._v(" "),a("p",[n._v("返回滑动窗口中的最大值。")])]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("输入：nums = [1,3,-1,-3,5,3,6,7], k = 3\n输出：[3,3,5,5,6,7]\n解释：\n滑动窗口的位置                最大值\n---------------               -----\n[1  3  -1] -3  5  3  6  7       3\n 1 [3  -1  -3] 5  3  6  7       3\n 1  3 [-1  -3  5] 3  6  7       5\n 1  3  -1 [-3  5  3] 6  7       5\n 1  3  -1  -3 [5  3  6] 7       6\n 1  3  -1  -3  5 [3  6  7]      7\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br")])]),a("p",[n._v("本题在力扣中，难度被标为：复杂，这复杂吗？")]),n._v(" "),a("ol",[a("li",[n._v("写一个函数来判断数组中最大的数；")]),n._v(" "),a("li",[n._v("初始化窗口，求最大值保存；")]),n._v(" "),a("li",[n._v("滑动窗口，再求最大值保存；")]),n._v(" "),a("li",[n._v("滑动直至完毕；")])]),n._v(" "),a("p",[n._v("本瓜题解：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar maxSlidingWindow = function(nums, k) {\n  if(k===1) return nums; // 特殊情况\n  let slidingWindow = nums.slice(0,k)\n  let newSlidingWindow = []\n  let resArr = []\n  resArr.push(Math.max(...slidingWindow))\n  for(let i=k;i<nums.length;i++){\n      newSlidingWindow = slidingWindow.slice(1).concat(nums[i])\n      resArr.push(Math.max(...newSlidingWindow))\n      slidingWindow = newSlidingWindow\n  }\n  return resArr\n};\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br")])]),a("p",[n._v("结果，当数组长度为 10 w 时，报错 "),a("code",[n._v("超出时间限制")]),n._v("；")]),n._v(" "),a("p",[n._v("噢！用 "),a("code",[n._v("Math.max()")]),n._v(" 来每次从窗口找最大值，时间复杂度是 O(n * k)，仍然很大；")]),n._v(" "),a("p",[a("strong",[n._v("窗口固定，求最大值集合")]),n._v(" 在根本上是 "),a("strong",[n._v("单调队列")]),n._v(" 的问题！")]),n._v(" "),a("p",[n._v("本瓜录屏了一个非常棒的动画效果解释：")]),n._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b36d0213c3c0400985c0276f1e4c4d92~tplv-k3u1fbpfcp-watermark.image?",alt:"动画演示-单调队列-239.滑动窗口最大值-滑动窗口最大值-力扣（LeetCode）-Google-Chrome-2021-11-03-16-05-01202111316951.gif"}})]),n._v(" "),a("p",[n._v("最后 JS 题解：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("var maxSlidingWindow = function (nums, k) {\n  // 队列数组（存放的是元素下标，为了取值方便）\n  const q = [];\n  // 结果数组\n  const ans = [];\n  for (let i = 0; i < nums.length; i++) {\n    // 若队列不为空，且当前元素大于等于队尾所存下标的元素，则弹出队尾\n    while (q.length && nums[i] >= nums[q[q.length - 1]]) {\n      q.pop();\n    }\n    // 入队当前元素下标\n    q.push(i);\n    // 判断当前最大值（即队首元素）是否在窗口中，若不在便将其出队\n    while (q[0] <= i - k) {\n      q.shift();\n    }\n    // 当达到窗口大小时便开始向结果中添加数据\n    if (i >= k - 1) ans.push(nums[q[0]]);\n  }\n  return ans;\n};\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br"),a("span",{staticClass:"line-number"},[n._v("15")]),a("br"),a("span",{staticClass:"line-number"},[n._v("16")]),a("br"),a("span",{staticClass:"line-number"},[n._v("17")]),a("br"),a("span",{staticClass:"line-number"},[n._v("18")]),a("br"),a("span",{staticClass:"line-number"},[n._v("19")]),a("br"),a("span",{staticClass:"line-number"},[n._v("20")]),a("br"),a("span",{staticClass:"line-number"},[n._v("21")]),a("br")])]),a("hr"),n._v(" "),a("p",[n._v("实际上，滑动窗口还是有很多扩展的空间，即使是窗口滑动，怎么滑，滑动后怎么做，里面就存在很大的解题思路的差异！")]),n._v(" "),a("p",[n._v("以上。")]),n._v(" "),a("blockquote",[a("p",[n._v("我是掘金安东尼，公众号同名，输出暴露输入，技术洞见生活，下次再会~~")])])])}),[],!1,null,null,null);s.default=i.exports}}]);