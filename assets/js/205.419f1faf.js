(window.webpackJsonp=window.webpackJsonp||[]).push([[205],{702:function(n,s,a){"use strict";a.r(s);var t=a(2),e=Object(t.a)({},(function(){var n=this,s=n.$createElement,a=n._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[a("p",[n._v("持续创作，加速成长！这是我参与「掘金日新计划 · 6 月更文挑战」的第14天，"),a("a",{attrs:{href:"https://juejin.cn/post/7099702781094674468",title:"https://juejin.cn/post/7099702781094674468",target:"_blank",rel:"noopener noreferrer"}},[n._v("点击查看活动详情"),a("OutboundLink")],1)]),n._v(" "),a("hr"),n._v(" "),a("p",[n._v("很多工友们都说："),a("strong",[n._v("设计模式根本用不到")]),n._v("，然而它其实时刻就在我们身边，像王国维所说："),a("strong",[n._v("众里寻他千百度，蓦然回首，那人正在灯火阑珊处。")])]),n._v(" "),a("p",[n._v("本篇带来你一定熟知的、用于创建对象的三种设计模式："),a("strong",[n._v("工厂模式、构造函数模式、原型模式；")])]),n._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f0450b50a1c349d994f6512c18c812d3~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),n._v(" "),a("h3",{attrs:{id:"工厂模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工厂模式"}},[n._v("#")]),n._v(" 工厂模式")]),n._v(" "),a("p",[n._v("什么是工厂模式？其实就字面意思，在现实社会生活中，市场通过不同工厂加工成不同的产品。")]),n._v(" "),a("p",[n._v("转化成 JS 代码就是这样的：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 汽车工厂\nfunction carFactory(brand, price, district) {\n\t let o = new Object();\n\t o.brand= brand;\n\t o.price= price;\n\t o.district= district;\n\t o.performance= function() {\n\t\t console.log(this.brand);\n\t };\n\t return o;\n}\n// 生产汽车\nlet car1 = carFactory("Benz", 50, "china");\nlet car2= carFactory("Honda", 30, "usa");\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 糖果工厂\nfunction candyFactory(name, size, color) {\n\t let o = new Object();\n\t o.name= name;\n\t o.size= size;\n\t o.color= color;\n\t o.performance= function() {\n\t\t console.log(this.name);\n\t };\n\t return o;\n}\n// 生产糖果\nlet candy1= candyFactory("Oreo", "small", "white");\nlet candy2= candyFactory("quduoduo", "middle", "black");\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("有汽车工厂，糖果工厂等等，"),a("strong",[n._v("我们通过工厂函数，创建了特定对象。")])]),n._v(" "),a("blockquote",[a("p",[n._v("工厂模式是一种众所周知的设计模式，广泛应用于软件工程领域，用于抽象创建特定对象的过程。")])]),n._v(" "),a("h3",{attrs:{id:"构造函数模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#构造函数模式"}},[n._v("#")]),n._v(" 构造函数模式")]),n._v(" "),a("p",[n._v("构造函数是用于创建"),a("strong",[n._v("特定类型")]),n._v("对象的，可以自定义构造函数，以函数的形式为自己的对象类型定义属性和方法。")]),n._v(" "),a("p",[n._v("比如前面的例子，就可以该写为：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 构造汽车的构造函数\nfunction Car(brand, price, district) {\n\t this.brand= brand;\n\t this.price= price;\n\t this.district= district;\n\t this.performance= function() {\n\t\t console.log(this.brand);\n\t };\n}\n// 构造汽车\nlet car1 = new Car("Benz", 50, "china");\nlet car2= new Car("Honda", 30, "usa");\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br")])]),a("p",[n._v("与工厂模式的区别是，构造函数模式：")]),n._v(" "),a("ol",[a("li",[n._v("没有显式地创建对象；")]),n._v(" "),a("li",[n._v("属性和方法直接赋值给了 this；")]),n._v(" "),a("li",[n._v("没有 return；")])]),n._v(" "),a("p",[n._v("构造函数首字母通常是大写；")]),n._v(" "),a("p",[n._v("这里涉及到一个重要的考点：即使用 new 会发生什么？")]),n._v(" "),a("p",[n._v("官方解答：")]),n._v(" "),a("p",[n._v("(1) 在内存中创建一个新对象。 (2) 这个新对象内部的[[Prototype]]（隐式原型）特性被赋值为构造函数的 prototype （显示原型）属性。 (3) 构造函数内部的 this 被赋值为这个新对象（即 this 指向新对象）。 (4) 执行构造函数内部的代码（给新对象添加属性）。 (5) 如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象。")]),n._v(" "),a("p",[n._v("这个，就是“原型链”的构造过程！！")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("car1.__proto__===Car.prototype // true\n\ncar1 instanceof Car // true\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br")])]),a("ul",[a("li",[n._v("构造函数的问题")])]),n._v(" "),a("blockquote",[a("p",[n._v("构造函数的主要问题在于，其定义的方法会在每个实例上都创建一遍。")])]),n._v(" "),a("p",[n._v("什么意思？用代码来解释：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 构造汽车的构造函数\nfunction Car(brand, price, district) {\n\t this.brand= brand;\n\t this.price= price;\n\t this.district= district;\n\t this.performance= function() {\n\n\t };\n}\n// 构造汽车\nlet car1 = new Car("Benz", 50, "china");\nlet car2= new Car("Honda", 30, "usa");\n\ncar1.performance == car2.performance // false\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("即使是同样的方法，也不相等，因为每次执行 new 的时候，实例的方法都是重新创建的；")]),n._v(" "),a("h3",{attrs:{id:"原型模式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原型模式"}},[n._v("#")]),n._v(" 原型模式")]),n._v(" "),a("p",[n._v("原型模式可以解决构造函数模式“重复创建方法”的问题。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('// 原型创建\nfunction Car(brand, price, district) {\n\t Car.prototype.brand= brand;\n\t Car.prototype.price= price;\n\t Car.prototype.district= district;\n\t Car.prototype.performance= function() {\n\n\t };\n}\n\nlet car1 = new Car("Benz", 50, "china");\nlet car2= new Car("Honda", 30, "usa");\n\ncar1.performance === car2.performance // true\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br"),a("span",{staticClass:"line-number"},[n._v("14")]),a("br")])]),a("p",[n._v("这里不妨再重温一下原型链的指向关系：")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("car1.__proto__===Car.prototype // true\n\nCar.__proto__===Function.prototype // true\n\nFunction.prototype.__proto__===Object.prototype //true\n\nCar.prototype.__proto__===Object.prototype //true\n\nObject.prototype.__proto__===null // true\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br")])]),a("p",[n._v("原型模式弱化了向构造函数传递初始化参数的能力，会导致所有实例默认都取得相同的属性值。")]),n._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v("function Person() {}\nPerson.prototype = {\n constructor: Person,\n friends: \"A\",\n sayName() {\n }\n}; \nlet person1 = new Person();\nlet person2 = new Person();\nperson1.friends=\"B\";\n\nperson1.friends // 'B'\nperson2.friends // 'A'\n")])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[n._v('function PersonArr() {}\nPersonArr.prototype = {\n constructor: PersonArr,\n friends:["A"],\n sayName() {\n }\n}; \nlet person1 = new PersonArr();\nlet person2 = new PersonArr();\nperson1.friends.push("B");\n\nperson1.friends // ["A","B"]\nperson2.friends // ["A","B"]\n')])]),n._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[n._v("1")]),a("br"),a("span",{staticClass:"line-number"},[n._v("2")]),a("br"),a("span",{staticClass:"line-number"},[n._v("3")]),a("br"),a("span",{staticClass:"line-number"},[n._v("4")]),a("br"),a("span",{staticClass:"line-number"},[n._v("5")]),a("br"),a("span",{staticClass:"line-number"},[n._v("6")]),a("br"),a("span",{staticClass:"line-number"},[n._v("7")]),a("br"),a("span",{staticClass:"line-number"},[n._v("8")]),a("br"),a("span",{staticClass:"line-number"},[n._v("9")]),a("br"),a("span",{staticClass:"line-number"},[n._v("10")]),a("br"),a("span",{staticClass:"line-number"},[n._v("11")]),a("br"),a("span",{staticClass:"line-number"},[n._v("12")]),a("br"),a("span",{staticClass:"line-number"},[n._v("13")]),a("br")])]),a("p",[n._v("原型上的所有属性是在实例间共享的，这对函数来说比较合适。对原始值的属性 也还好，但对于引用值的属性，则会产生混乱！！")]),n._v(" "),a("p",[n._v("小结：")]),n._v(" "),a("p",[n._v("工厂模式、构造函数模式、原型模式，这三者没有谁好谁坏，使用时，更多的是讲究一个 —— 适合！只有清楚它们的原理，才能游刃有余。")]),n._v(" "),a("blockquote",[a("p",[n._v("OK，以上便是本篇分享。点赞关注评论，为好文助力👍")]),n._v(" "),a("p",[n._v("我是掘金安东尼 🤠 100 万阅读量人气前端技术博主 💥 INFP 写作人格坚持 1000 日更文 ✍ 陪你一起度过漫长岁月 🌏")])])])}),[],!1,null,null,null);s.default=e.exports}}]);