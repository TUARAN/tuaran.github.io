(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{545:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"引言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#引言"}},[s._v("#")]),s._v(" 引言")]),s._v(" "),a("p",[s._v("如果你了解 "),a("a",{attrs:{href:"https://www.npmtrends.com",target:"_blank",rel:"noopener noreferrer"}},[s._v("npmtrends.com"),a("OutboundLink")],1),s._v("，你可以在上面轻松获取以下这个截图信息。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8dc99289610a472e817745cbd98c442c~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("p",[s._v("图示 TypeScript 的下载量在 5 年内呈现指数级增长。如果咱按照买基金股票抄底思路，学习 TypeScript 的最佳时间或许就是几年前。")]),s._v(" "),a("p",[s._v("但是谁都无法回到过去，别灰心，还有另一个最佳时间"),a("strong",[s._v("入手 TS")]),s._v("，那便是现在。")]),s._v(" "),a("p",[s._v("若你是 VUE 技能拥有者，则更是不容错过，很多项目都正在或已在使用 TypeScript 进行重构。"),a("strong",[s._v("VUE3 + TS!")]),s._v(" "),a("strong",[s._v("未来已来！")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3174037c55ff458eae4917398494ee25~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("blockquote",[a("p",[s._v("小手一赞👍，月入百万💴")])]),s._v(" "),a("h2",{attrs:{id:"为什么是-typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么是-typescript"}},[s._v("#")]),s._v(" 为什么是 TypeScript")]),s._v(" "),a("h3",{attrs:{id:"why-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-javascript"}},[s._v("#")]),s._v(" Why JavaScript?")]),s._v(" "),a("p",[s._v("在解释"),a("strong",[s._v("为什么是 TypeScript")]),s._v(" 之前，我们先回顾下"),a("strong",[s._v("为什么是 JavaScript")]),s._v("。对此节已经烂熟于心的铁子可选择速读或跳过。")]),s._v(" "),a("ul",[a("li",[s._v("命名史")])]),s._v(" "),a("p",[s._v("时间回到 1994 年年底，Netscape（网景） 公司推出了一款全新的网页浏览器 —— Netscape Navigator，点燃了整个互联网"),a("sup",[s._v("【1】")]),s._v("。公司高层有预见性的设想："),a("strong",[s._v("网络将更动态")]),a("sup",[s._v("【2】")]),s._v("，于是在 1995 年招募了 "),a("strong",[s._v("Brendan Eich（布兰登·艾克）")]),s._v(" 为这款全新的浏览器设计一门胶水语言，用于：方便网页开发者组装图片或插件之类的组件。")]),s._v(" "),a("p",[s._v("1995 年 5 月，这位老哥十天就把原型设计出来了，最初命名为 "),a("strong",[s._v("Mocha")]),s._v("。同年 9 月，在 Netscape Navigator 2.0 的 Beta 版中改名为"),a("strong",[s._v("LiveScript")]),s._v("。同年 12 月，在 Netscape Navigator 2.0 Beta 3 中部署时被重命名为"),a("strong",[s._v("JavaScript")]),s._v("。主要是为了蹭一下 Java 这个编程语言热词"),a("sup",[s._v("【3】")]),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83aaf33b430e44cbb5078637a392b6f6~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("p",[s._v("弦外之音：")]),s._v(" "),a("p",[s._v("【1】：90 年代中期，网景浏览器的市场占有率一度高达 90% ，本瓜无法想象这是怎样的一个占有率。可能意味着一句话吧：前端不用做兼容。（ 2020年，谷歌浏览器的全球市场占有率也才百分之六十几）")]),s._v(" "),a("p",[s._v("【2】：网景公司创造定义了浏览器的一系列标准和技术，除了 JavaScript，还包括著名的 http cookies。牛 P! 即使强如斯，最终也在"),a("strong",[s._v("浏览器大战")]),s._v("中败北。幸得留下 Mozilla Firefox 这枚火种。")]),s._v(" "),a("p",[s._v("【3】：JavaScript 和 Java 没有关系。不愧是你！蹭热度的基因早已写在了每个前端银儿的基因里！")]),s._v(" "),a("ul",[a("li",[s._v("ECMAScript")])]),s._v(" "),a("p",[s._v("1996 年 11 月，网景公司将 JavaScript 提交给 Ecma International（欧洲计算机制造商协会）进行标准化"),a("sup",[s._v("【1】")]),s._v("。新的语言标准取名为 "),a("strong",[s._v("ECMAScript")]),s._v("。")]),s._v(" "),a("p",[s._v("从 1997 年开始，ECMAScript 几乎上是一年一版，除了 1999 年至 2009 年这十年间只发布了一版激进的 ECMAScript 4。")]),s._v(" "),a("p",[s._v("在这“丢失的十年”间，各大浏览器厂商各种造规则，导致 ECMAScript 逐渐没落。直到 "),a("strong",[s._v("Ajax")]),s._v(" 时代来临，ECMAScript 又被提上了日程。")]),s._v(" "),a("p",[s._v("2015 年，代号为 "),a("strong",[s._v("Harmony（和谐）")]),s._v(" 的 ES6 诞生啦"),a("sup",[s._v("【2】")]),s._v("！")]),s._v(" "),a("p",[a("strong",[s._v("一切似乎都将迎来大一统。")])]),s._v(" "),a("p",[s._v("然而，事与愿违，市面上各浏览器对于 ECMAScript 新特性的支持又不尽相同，导致我们在生产环境仍需要进行编译转化，例如：用 Babel 将 ES6 转成 ES5......"),a("sup",[s._v("【3】")])]),s._v(" "),a("p",[s._v("弦外之音：")]),s._v(" "),a("p",[s._v("【1】：JavaScript 的诞生吸引了微软，于是微软在 IE 3.0 上搭载了 "),a("strong",[s._v("JScript")]),s._v("，JScript 其实也是 JavaScript 的一种实现。为了避免语言标准的分裂，网景公司提交了规范。（点赞PEACE）")]),s._v(" "),a("p",[s._v("【2】：到 2020 年，ECMAScript 已经发布第 11 版了！ES6 你 "),a("strong",[s._v("精通")]),s._v("了嘛？")]),s._v(" "),a("p",[s._v("【3】：本瓜疑思：如果当初"),a("strong",[s._v("网景公司")]),s._v("和"),a("strong",[s._v("微软公司")]),s._v("选择合作而非对拼，共同打造一款浏览器和一门脚本语言，现在的浏览器环境是不是会更好？至少会不那么混乱吧！但是或许混乱也代表着公平，标准也意味着代表垄断。欢迎讨论~")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/55999a76e17b498b836981ae4f1e6923~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"why-typescript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-typescript"}},[s._v("#")]),s._v(" Why TypeScript?")]),s._v(" "),a("p",[s._v("随着 Ajax 的火热和 JavaScript 的复兴，大型 Web 应用越来越多，JS 的问题也逐渐被暴露。")]),s._v(" "),a("p",[s._v("微软的语言开发者发现：JavaScript 仅仅是一门脚本语言，其设计理念简单，"),a("strong",[s._v("缺乏对类与模块的支持")]),s._v("，不适合用于开发大型的 Web 应用。")]),s._v(" "),a("p",[s._v("于是，2012 年 10 月，Delphi、C# 之父"),a("strong",[s._v("Anders Hejlsberg（安德斯·海尔斯伯格）")]),s._v(" 发布了 "),a("strong",[s._v("TypeScript")]),s._v("。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/03c4cabf9eb2447f8896847c2e570e23~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("p",[s._v("它的特点如下：")]),s._v(" "),a("ol",[a("li",[s._v("基于 ECMAScript 标准进行拓展，是 JavaScript 的严格超集。")]),s._v(" "),a("li",[s._v("添加了可选静态类型、类和模块。")]),s._v(" "),a("li",[s._v("可以编译成 JavaScript ，也可以和 JavaScript 一起运行。")]),s._v(" "),a("li",[s._v("编译时检查，但不污染运行时。")])]),s._v(" "),a("p",[a("strong",[s._v("TS 是 JS 严格的化身。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a80d37f4fa0a40fcaa0b817edb94f6b9~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"静态类型、动态类型、弱类型、强类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#静态类型、动态类型、弱类型、强类型"}},[s._v("#")]),s._v(" 静态类型、动态类型、弱类型、强类型")]),s._v(" "),a("p",[s._v("你是否困惑，为什么计算机也有这么多语言。其实它们也是可以按照某些标准去分类的，比如：静态类型、动态类型、弱类型、强类型。")]),s._v(" "),a("p",[s._v("一图胜千言：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/08b35f8777bd48e284e9ff783e749968~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),a("p",[s._v("本瓜简单制表一张：")]),s._v(" "),a("table",[a("thead",[a("tr",[a("th",[s._v("名称")]),s._v(" "),a("th",[s._v("特性")])])]),s._v(" "),a("tbody",[a("tr",[a("td",[s._v("静态类型")]),s._v(" "),a("td",[s._v("编译时做类型检查")])]),s._v(" "),a("tr",[a("td",[s._v("动态类型")]),s._v(" "),a("td",[s._v("运行时做类型检查")])]),s._v(" "),a("tr",[a("td",[s._v("强类型")]),s._v(" "),a("td",[s._v("不允许变量类型的隐式转换")])]),s._v(" "),a("tr",[a("td",[s._v("弱类型")]),s._v(" "),a("td",[s._v("允许变量类型的隐式转换")])])])]),s._v(" "),a("p",[s._v("这里抛一个小问题： 你认为 TypeScript 是强类型语言吗？")]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("Flow 工具")])])]),s._v(" "),a("p",[s._v("在这里顺带提一下"),a("strong",[s._v("Flow")]),s._v("。Flow 是 Facebook 在 2014 年发布的一个类型检查工具，用来检查 React 的源码。它也经常被拿出来和 TS 作比较。")]),s._v(" "),a("p",[s._v("相比较于 Flow，TypeScript 作为一门完整的编程语言，它的功能更为强大。生态也更健全、更完善。特别是对于开发工具这一块（背靠微软）。")]),s._v(" "),a("p",[s._v("时间可以检验一切，从现在的角度回看二者，我想至少可以得出这样的结论：TypeScript 更受欢迎。")]),s._v(" "),a("h2",{attrs:{id:"环境配置-hello-world"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#环境配置-hello-world"}},[s._v("#")]),s._v(" 环境配置 && Hello World")]),s._v(" "),a("p",[s._v("说了这么多，你的大刀是否早已饥渴难耐了？")]),s._v(" "),a("p",[s._v("让我们回到那最初的起点："),a("strong",[s._v("Hello World!")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd4012b2a29c4f148d29d83501973812~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("ol",[a("li",[s._v("Node 环境。")])]),s._v(" "),a("p",[s._v("安装Node环境勿需多言。")]),s._v(" "),a("ol",{attrs:{start:"2"}},[a("li",[s._v("安装 typescript。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm install -g typescript\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("tsc 命令用于将 .ts 编译成 .js。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("tsc hello.ts\n\n# hello.ts => hello.js\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("ol",{attrs:{start:"4"}},[a("li",[s._v("安装 ts-node 可直接在 .js 里运行 ts 代码。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm install -g ts-node\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"5"}},[a("li",[s._v("编译运行。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("ts-node index.js\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"6"}},[a("li",[s._v("展示。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f43a8239d6534b2e81bbbd85ac8e3159~tplv-k3u1fbpfcp-zoom-1.image",alt:""}})]),s._v(" "),a("h2",{attrs:{id:"类型-函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型-函数"}},[s._v("#")]),s._v(" 类型 & 函数")]),s._v(" "),a("h3",{attrs:{id:"类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型"}},[s._v("#")]),s._v(" 类型")]),s._v(" "),a("p",[s._v("类型是计算机语言的基础之一，就好比汉语的声母、韵母，英语的主系表、定状补。")]),s._v(" "),a("p",[a("strong",[s._v("Boolean")]),s._v("、"),a("strong",[s._v("Number")]),s._v(" 、"),a("strong",[s._v("String")]),s._v(" 、"),a("strong",[s._v("Array")]),s._v("、"),a("strong",[s._v("Null")]),s._v("、"),a("strong",[s._v("Undefined")]),s._v("，默认你知道！")]),s._v(" "),a("p",[s._v("还有？关键的来了：")]),s._v(" "),a("p",[a("strong",[s._v("Enum（枚举）")]),s._v(" 、"),a("strong",[s._v("Any （任意）")]),s._v("、"),a("strong",[s._v("Unknown（未知）")]),s._v("、"),a("strong",[s._v("Tuple（元组）")]),s._v("、"),a("strong",[s._v("void（与 Any 相反）")]),s._v("、"),a("strong",[s._v("Never（用于不存在）")])]),s._v(" "),a("p",[s._v("下面列代码一二、可自作感受。")]),s._v(" "),a("ul",[a("li",[s._v("Boolean")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let isDone: boolean = false;\n// ES5：var isDone = false;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("Number")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let count: number = 10;\n// ES5：var count = 10;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("String")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let name: string = \"Semliker\";\n// ES5：var name = 'Semlinker';\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("Array")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let list: number[] = [1, 2, 3];\n// ES5：var list = [1,2,3];\n\nlet list: Array<number> = [1, 2, 3]; // Array<number>泛型语法\n// ES5：var list = [1,2,3];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("undefined")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let u: undefined = undefined;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("null")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let n: null = null;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("Enum（枚举）")])]),s._v(" "),a("p",[s._v("TypeScript 支持数字的和基于字符串的枚举。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 数字：从 0 开始计数\nenum EnumNum {\n  a,\n  b,\n  c,\n  d,\n}\n\n// 字符串\nenum EnumStr {\n  a = "a",\n  b = "b",\n  c = "c",\n  d = "d",\n}\n\n// 数字加字符串（异构）\nenum EnumNumAndStr {\n  a,\n  b,\n  c = "c",\n  d = 3,\n  e,\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("ul",[a("li",[s._v("Any（任意）")])]),s._v(" "),a("p",[s._v("在 TS 中，任何类型都可以被归为 any 类型。这让 any 类型成为了类型系统的"),a("strong",[s._v("顶级类型")]),s._v("（也被称作全局超级类型）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let value: any;\n\nvalue.foo.bar; // OK\nvalue.trim(); // OK\nvalue(); // OK\nnew value(); // OK\nvalue[0][1]; // OK\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("blockquote",[a("p",[s._v("使用 any 类型，可以很容易地编写类型正确但在运行时有问题的代码。如果我们使用 any 类型，就无法使用 TypeScript 提供的大量的保护机制。为了解决 any 带来的问题，TypeScript 3.0 引入了 unknown 类型。")])]),s._v(" "),a("ul",[a("li",[s._v("Unknown（未知）")])]),s._v(" "),a("p",[s._v("Unknown 成为 TypeScript 类型系统的另一种顶级类型。")]),s._v(" "),a("p",[s._v("Unknown 类型只能被赋值给 any 类型和 unknown 类型本身。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("let value: unknown;\n\nvalue = true; // OK\nvalue = 42; // OK\nvalue = {}; // OK\n\nlet value1: unknown = value; // OK\nlet value2: any = value; // OK\nlet value3: boolean = value; // Error\nlet value4: number = value; // Error\nlet value6: object = value; // Error\nlet value7: any[] = value; // Error\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("理解：未知的变量可以是任一一个（赋值给 unknown），但是又不等于任一具体的（将 unknown 赋值给其他值）。")]),s._v(" "),a("ul",[a("li",[s._v("Tuple（元组）")])]),s._v(" "),a("blockquote",[a("p",[s._v("元组可用于定义具有有限数量的未命名属性的类型。每个属性都有一个关联的类型。使用元组时，必须提供每个属性的值。为了更直观地理解元组的概念。")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('let tupleType: [string, boolean];\ntupleType = ["Semlinker", true];\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("void（与 Any 相反）")])]),s._v(" "),a("p",[s._v("void 类型像是与 any 类型相反，它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是 void：")]),s._v(" "),a("p",[s._v("需要注意的是，声明一个 void 类型的变量没有什么作用，因为它的值只能为 undefined 或 null：")]),s._v(" "),a("ul",[a("li",[s._v("never（用于不存在）")])]),s._v(" "),a("p",[s._v("never 类型表示的是那些永不存在的值的类型。 例如，never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。")]),s._v(" "),a("h3",{attrs:{id:"函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数"}},[s._v("#")]),s._v(" 函数")]),s._v(" "),a("p",[s._v("接下来康康 TS 和 JS 的函数有何区别？")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c2dd1cdbc1d4dada2b3680ddc8512c5~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("p",[s._v("重点区别有："),a("strong",[s._v("函数类型")]),s._v("、"),a("strong",[s._v("是否可选参数")]),s._v("、"),a("strong",[s._v("函数重载")])]),s._v(" "),a("ul",[a("li",[s._v("函数类型")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 参数含有类型、返回类型即函数类型\n\nlet IdGenerator: (chars: string, nums: number) => string;\n\nfunction createUserId(name: string, id: number): string {\n  return name + id;\n}\n\nIdGenerator = createUserId;\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v("可选参数")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 可以通过 ? 号来定义可选参数\nfunction createUserId(name: string, id: number, age?: number): string {\n  return name + id;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("ul",[a("li",[s._v("函数重载或方法重载是使用相同名称和不同参数数量或类型创建多个方法的一种能力。")])]),s._v(" "),a("p",[s._v("通俗来讲就是：根据传递的参数不同，会有不同的表现形式。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 函数的重载\nfunction getInfo(name:string):void;\nfunction getInfo(age:number):void;\nfunction getInfo(str:any):void{\n    if(typeof str == "string"){\n        console.log("名字:",str)\n    }\n    if(typeof str == "number"){\n        console.log("年龄",str)\n    }\n}\ngetInfo("zhangsan")\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("不仅函数可以重载，方法也能重载，思想就是：按照重载表依次执行直到合法的那次，更多可自行探索。")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"http://semlinker.com/ts-function-overload/",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeScript 函数重载"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.cnblogs.com/Wayou/p/function_overload_in_typescript.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("方法重载"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"接口-类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口-类"}},[s._v("#")]),s._v(" 接口 & 类")]),s._v(" "),a("h3",{attrs:{id:"接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口"}},[s._v("#")]),s._v(" 接口")]),s._v(" "),a("p",[s._v("接口是一个很重要的概念，进行过前后端联调的都知道，对接接口就是实现功能最重要的部分。现在前端敏捷开发更多是组件复用，接口复用或许还是一个方向。")]),s._v(" "),a("blockquote",[a("p",[s._v("TypeScript 接口除了用于对类的一部分行为进行抽象表示以外，也常用于对「对象的形状（Shape）」进行描述。")])]),s._v(" "),a("ul",[a("li",[s._v("典型示例")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Shape {\n    head: string;\n    arm: string;\n}\ninterface Human {\n    name: string;\n    age: number;\n    shape: Shape;\n    say(word: string): void;\n}\n\nlet jack: Human = {\n    name: 'Jack',\n    age: 18,\n    shape: {\n        head: 'head',\n        arm: 'arm'\n    },\n    say(word: string) {\n        console.log(word)\n    }\n}\njack.say('hi')\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("ul",[a("li",[s._v("函数接口")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Fn {\n    (a: number, b: number): number;\n}\n\nlet add: Fn = function(a: number, b: number): number {\n    return a + b\n}\n\nconsole.log(add(1, 2))\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("ul",[a("li",[s._v("接口的继承")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("interface Animal {\n    move(): void;\n}\n\ninterface Human extends Animal {\n    name: string;\n    age: number;\n}\n\nlet jack: Human = {\n    age: 18,\n    name: 'Jack',\n    move() {\n        console.log('move')\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h3",{attrs:{id:"类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类"}},[s._v("#")]),s._v(" 类")]),s._v(" "),a("blockquote",[a("p",[s._v("类是一种面向对象计算机编程语言的构造，是创建对象的蓝图，描述了所创建的对象共同的属性和方法。")])]),s._v(" "),a("p",[s._v("js 没有严格意义上的类，ES6 的 class 实现的继承不过也是基于原型链的语法糖。有兴趣可解"),a("a",{attrs:{href:"https://www.cnblogs.com/gg-qq/p/11511937.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("底层实现"),a("OutboundLink")],1),s._v("。在 ts 中，其实也同样如此。有兴趣阅读 "),a("a",{attrs:{href:"https://blog.csdn.net/yuse6262/article/details/100183571",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeScript与ES6中 - 类(Class)的区别"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("这里直接贴下结论：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/22ccb6a73d964ff88c780c090f2ff7db~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("p",[s._v("两个重点："),a("strong",[s._v("抽象类")]),s._v("、"),a("strong",[s._v("访问限定符")]),s._v("（接口继承上文已说明）")]),s._v(" "),a("ul",[a("li",[s._v("抽象类")])]),s._v(" "),a("p",[s._v("我们都知道 JAVA 是典型的面向对象，有四大特性：抽象、封装、继承、多态，也有很大一部分人在学习 TS 的过程中都认为它和 JAVA 很像，其中很重要的一点是因为 TS 也有抽象类。")]),s._v(" "),a("blockquote",[a("p",[s._v("在面向对象的概念中，所有的对象都是通过类来描绘的，但是反过来，并不是所有的类都是用来描绘对象的，如果一个类中没有包含足够的信息来描绘一个具体的对象，这样的类就是抽象类。")])]),s._v(" "),a("p",[s._v("推荐阅读："),a("a",{attrs:{href:"https://juejin.im/post/6844903918527315975",target:"_blank",rel:"noopener noreferrer"}},[s._v("TypeScript中的面向对象编程"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("在 TypeScrupt 中表示抽象类用 abstract 修饰。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("abstract class Animal{\n    public name:string;\n    constructor(name:string){\n        this.name=name;\n    }\n\n    abstract eat():any; //抽象方法 ，不包含具体实现，要求子类中必须实现此方法，否则编译报错\n \n    run(){\n        console.log('非抽象方法，无需要求子类实现、重写');\n    }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("ul",[a("li",[s._v("访问限定符")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('class Dog {\n    constructor(name : string) {\n        this.name = name;\n    }\n    public name : string;//修饰符 公有成员,对所有人都是可见的\n\n    private pri(){};//修饰符 私有成员 ,只能在类的本身调用,不能做类的实例和子类调用\n    \n    protected pro() {};//修饰符 保护成员, 只能在类和子类中访问,不能做实例中访问\n\n    readonly  legs :number = 4; //修饰符 只读属性,跟类的实例属性一样,必须初始化,\n\n    static food : string = "bones";//修饰符 静态成员,只能通过类名访问,类的静态成员可以可以被继承\n\n    run (){}\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("h2",{attrs:{id:"命名空间-模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间-模块"}},[s._v("#")]),s._v(" 命名空间 & 模块")]),s._v(" "),a("h3",{attrs:{id:"命名空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#命名空间"}},[s._v("#")]),s._v(" 命名空间")]),s._v(" "),a("blockquote",[a("p",[s._v("命名空间定义了标识符的可见范围，一个标识符可在多个名字空间中定义，它在不同名字空间中的含义是互不相干的。我们可将相似功能的函数、类、接口等放置到命名空间内。如果想在命名空间外访问，则用export导出。")])]),s._v(" "),a("p",[s._v("我们用关键字"),a("strong",[s._v("namespace")]),s._v("来声明命名空间，")]),s._v(" "),a("ul",[a("li",[s._v("namespace")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// IShape.ts\nnamespace Drawing { \n    export interface IShape { \n        // 如果我们需要在外部可以调用其中的类和接口，则需要在类和接口添加 export 关键字。\n        draw(); \n    }\n}\n// Circle.ts\n/// <reference path = "IShape.ts" /> \nnamespace Drawing { \n    export class Circle implements IShape { \n        public draw() { \n            console.log("Circle is drawn"); \n        }  \n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br")])]),a("p",[s._v("如果一个命名空间在一个单独的 TypeScript 文件中，则应使用三斜杠 /// 引用它，语法格式如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('/// <reference path = "SomeFileName.ts" />\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v("嵌套命名空间")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 示例\nnamespace namespace_name1 { \n    export namespace namespace_name2 {\n        export class class_name {    } \n    } \n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("h3",{attrs:{id:"模块"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#模块"}},[s._v("#")]),s._v(" 模块")]),s._v(" "),a("blockquote",[a("p",[s._v("TypeScript和ECMAScript2015一样，任何包含顶级import或者export的文件都被当成一个模块。其实，也不一定是顶级。以上就是对什么叫模块的简单认知。 —— 官方文档")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('  //导出接口\n  export interface StringValidator {\n    isAcceptable(s: string): boolean;\n  }\n\n  //导出变量\n  export const numberRegexp = /^[0-9]+$/;\n\n  //导出类\n  export class ZipCodeValidator implements StringValidator\n  {\n    isAcceptable(s: string) {\n      return s.length === 5 && numberRegexp.test(s)\n    }\n  }\n\n  //另一种导出方式\n  export {StringValidator, numberRegexp, ZipCodeValidator }\n\n  //假如在一个模块里，只导出一个类或函数，那么最佳实践就是用默认导出语法\n\n  export default function Test (s: string) : boolean {\n    return s.length === 5 \n  }\n\n  // 导入方法一\n  import{ StringValidator, numberRegexp, ZipCodeValidator } from "./ZipCodeValidator"\n\n  // 导入方法二\n  import * as validator from "./ZipCodeValidator"\n\n  let zip = new validator.ZipCodeValidator()\n\n  //如果是默认导出的话，可以直接这么导入\n  import test from "../../xxx.js"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br")])]),a("p",[s._v("和 es6 一致。")]),s._v(" "),a("ul",[a("li",[s._v("最佳实践")])]),s._v(" "),a("p",[s._v("在模块中，最佳实践是导出一个新的实体来提供新的功能（即模块扩展）。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//Calculator.ts\n  export class Calculator {\n    private current = 0;\n    private memery = 0;\n    private operator: string;\n\n    //charCodeAt() 返回指定位置的字符编码\n    processDigit(digit: string, currentValue: number){\n      if(digit >= "0" && digit <= "9"){\n        return currentValue * 10 + (digit.charCodeAt(0) - "0".charCodeAt(0))\n      }\n    }\n  }\n\n  //现在来扩展它\n  import { Calculator } from "./Calculator"\n\n  class ProgrammerCalculator extends Calculator {\n    static digits = ["0", "1", "2", "3", "4"];\n    constructor(public base: number){\n      super()\n      if(base <= 0 || base > ProgrammerCalculator.digits.length){\n        throw new Error ("base has to be within 0 to 16 inclusive")\n      }\n    }\n    protected processDigit(digit: string, currentValue: number){\n      if(ProgrammerCalculator.digits.indexOf(digit) >= 0 ) { // 存在 digit\n        return currentValue * this.base + ProgrammerCalculator.digits.indexOf(digit) // 自定义的扩展计算\n      }\n    }\n  }\n\n  //导出\n  export { ProgrammerCalculator as Calculator }\n\n  //在模块中不要使用命名空间\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br")])]),a("h2",{attrs:{id:"如何应用到-vue-项目"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#如何应用到-vue-项目"}},[s._v("#")]),s._v(" 如何应用到 Vue 项目？")]),s._v(" "),a("p",[s._v("TS 在 Vue 项目中的使用基于"),a("strong",[s._v("装饰器")]),s._v("，它为我们在类的声明及成员上通过元编程语法添加标注提供了一种方式。"),a("a",{attrs:{href:"https://juejin.im/post/6844903904312819725",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue 装饰器写法"),a("OutboundLink")],1)]),s._v(" "),a("ol",[a("li",[s._v("修改入口文件main.js为main.ts，修改webpack.config.js")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("const path = require('path')\nmodule.exports = {\n  ...\n  pages: {\n    index: {\n      entry: path.resolve(__dirname+'/src/main.ts')\n    },\n  },\n  ...\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("ol",{attrs:{start:"2"}},[a("li",[s._v("添加装饰器")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("npm install vue-class-component vue-property-decorator -D\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ol",{attrs:{start:"3"}},[a("li",[s._v("改造 vue")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("<script lang=\"ts\">\nimport { Component, Vue, Prop, Watch  } from \"vue-property-decorator\";\nimport draggable from 'vuedraggable'\n\n@Component({\n  created(){\n    \n  },\n  components:{\n    draggable\n  }\n})\nexport default class MyComponent extends Vue {\n  /* data */\n  private ButtonGroup:Array<any> = ['edit', 'del']\n  public dialogFormVisible:boolean = false\n  \n  /*method*/\n  setDialogFormVisible(){\n    this.dialogFormVisible = false\n  }\n  addButton(btn:string){\n    this.ButtonGroup.push(btn)\n  }\n\n  /*computed*/\n  get routeType(){\n    return this.$route.params.type\n  }\n  \n  @Prop({type: Number,default: 0}) readonly id!: number // 父传子的prop，不能子组件不能修改\n\n  @Watch('dialogFormVisible')\n  dialogFormVisibleChange(newVal:boolean){\n    // 一些操作\n  }\n}\n<\/script>\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br")])]),a("p",[s._v("更多装饰器的使用查看"),a("a",{attrs:{href:"https://github.com/kaorun343/vue-property-decorator/blob/master/README.md",target:"_blank",rel:"noopener noreferrer"}},[s._v("vue-property-decorator"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("这是一篇入门级 TypeScript 学习导读，虽然不尽完备，但整体上的重点都已点出说明，并贴出关键代码（Talk is cheap）。如果文首从历史的角度切入学习能吸引你的兴趣，那真是太棒了。")]),s._v(" "),a("p",[s._v("本瓜对 TypeScript 的理解是：由于前端的发展壮大，JavaScript 作为一门脚本语言已经无法支撑大型应用的规范开发。借鉴于开发大型应用的成功典范 Java 的面向对象思想（抽象、封装、继承、多态），TS 严格定义了不同的类型、规范了传参，实现了抽象类，实现了接口继承、优化模块化思想等。")]),s._v(" "),a("p",[s._v("能够想象，有了 TS 的前端项目的协同开发，代码会有更高的复用性、可读性、易维护性，生产效率也会更高。")]),s._v(" "),a("p",[a("strong",[s._v("生产力决定财富！早学早享受！愿你我都能与美妙的代码相伴！")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/69ee08dddbf748e3ab0897ceb5adf4f4~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),s._v(" "),a("h3",{attrs:{id:"参考文档"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考文档"}},[s._v("#")]),s._v(" 参考文档")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/JavaScript#",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript-维基百科"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%B5%8F%E8%A7%88%E5%99%A8%E5%A4%A7%E6%88%98",target:"_blank",rel:"noopener noreferrer"}},[s._v("浏览器大战-维基百科"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/ECMAScript",target:"_blank",rel:"noopener noreferrer"}},[s._v("ECMAScript-维基百科"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://www.zhihu.com/question/19918532/answer/121132729",target:"_blank",rel:"noopener noreferrer"}},[s._v("弱类型、强类型、动态类型、静态类型语言的区别是什么？"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/02/strong-typing-javascript.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("强类型 JavaScript 的解决方案"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/6844904182843965453",target:"_blank",rel:"noopener noreferrer"}},[s._v("了不起的 TypeScript 入门教程"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/60952007",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue + TypeScript + Element 项目实战及踩坑记"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.im/post/6856517315010232333#heading-8",target:"_blank",rel:"noopener noreferrer"}},[s._v("在Vue中使用装饰器"),a("OutboundLink")],1)])])])}),[],!1,null,null,null);n.default=t.exports}}]);