(window.webpackJsonp=window.webpackJsonp||[]).push([[61],{562:function(s,n,a){"use strict";a.r(n);var e=a(2),r=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7027369616024272926",target:"_blank",rel:"noopener noreferrer"}},[s._v("上一篇"),a("OutboundLink")],1),s._v(" 已经讲到了 DFS 一些基础的点，由于 DFS 太重要了，不得不再往前深挖一步！")]),s._v(" "),a("p",[s._v("DFS 是深度搜索，是暴力的，是一条道走到黑的，是一次性搜到底的！那么，搜到底发现没有路了，就得回退去找另外的路，再继续莽着搜！既然要回退，就必须保存走过每个点的所有信息，包括先后顺序；这个回退的过程就叫 "),a("strong",[s._v("回溯")]),s._v("。")]),s._v(" "),a("p",[s._v("根据回溯思想，演进到回溯算法来解决寻找问题。看一下wiki对回溯法的解释：")]),s._v(" "),a("blockquote",[a("p",[s._v("回溯法采用 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%AF%95%E9%94%99",title:"试错",target:"_blank",rel:"noopener noreferrer"}},[s._v("试错"),a("OutboundLink")],1),s._v(" 的思想，它尝试分步的去解决一个问题。在分步解决问题的过程中，当它通过尝试发现，现有的分步答案不能得到有效的正确的解答的时候，它将取消上一步甚至是上几步的计算，再通过其它的可能的分步解答再次尝试寻找问题的答案。")])]),s._v(" "),a("p",[s._v("简化理解："),a("strong",[s._v("回溯算法 = 树的深度优先搜索 + 剪枝函数")])]),s._v(" "),a("ul",[a("li",[s._v("什么是剪枝函数？\n为了提高搜索效率，在搜索过程中使用约束函数，可以避免无谓地搜索那些已知不含答案状态的子树。如果是最优化问题，还可以使用限界函数剪去那些不可能含有最优解的子树。约束函数和限界函数目的相同，都是为了剪去不必要搜索的子树，减少问题求解所需实际生成的状态结点数，他们统称为剪枝函数。")])]),s._v(" "),a("p",[s._v("OK，以上是概念介绍，下面来一道经典之经典之经典的回溯算法题："),a("a",{attrs:{href:"https://leetcode-cn.com/problems/n-queens/",target:"_blank",rel:"noopener noreferrer"}},[s._v("N皇后"),a("OutboundLink")],1)]),s._v(" "),a("blockquote",[a("p",[s._v("n 皇后问题 研究的是如何将 n 个皇后放置在 n×n 的棋盘上，并且使皇后彼此之间不能相互攻击。")]),s._v(" "),a("p",[s._v("给你一个整数 n ，返回所有不同的 n 皇后问题 的解决方案。")]),s._v(" "),a("p",[s._v("每一种解法包含一个不同的 n 皇后问题 的棋子放置方案，该方案中 'Q' 和 '.' 分别代表了皇后和空位。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/7eb3c4f619204ea5a4dc41daafa1689a~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("p",[s._v("示例 1：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('输入：n = 4\n输出：[[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]\n解释：如上图所示，4 皇后问题存在两个不同的解法。\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("示例 2：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('输入： n = 1\n输出： [["Q"]]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[a("sub",[s._v("N 皇后问题很多时候作为例题出现在教科书中，可以当做理解回溯算法的例题进行学习；")])]),s._v(" "),a("p",[s._v("以 4 皇后问题为例，递归树如下：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/91c3604cba8642fe83ba2195d4867d2a~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("p",[s._v("解题思路：")]),s._v(" "),a("ul",[a("li",[s._v("回溯算法的通用解题思路就是在递归之前做选择，在退出递归之前撤销选择；")]),s._v(" "),a("li",[s._v("通过恰当的方式将不符合条件的情况剪枝；")])]),s._v(" "),a("p",[s._v("回溯三部曲:")]),s._v(" "),a("ul",[a("li",[s._v("递归函数参数；")]),s._v(" "),a("li",[s._v("递归终止条件；")]),s._v(" "),a("li",[s._v("单层搜索的逻辑；")])]),s._v(" "),a("p",[s._v("回溯模板：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("void backtracking(参数) {\n    if (终止条件) {\n        存放结果;\n        return;\n    }\n    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {\n        处理节点;\n        backtracking(路径，选择列表); // 递归\n        回溯，撤销处理结果\n    }\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("JavaScript 实现：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var solveNQueens = function(n) {\n    function isValid(row, col, chessBoard, n) {\n        // 检查列\n        for(let i = 0; i < row; i++) { // 这是一个剪枝\n            if(chessBoard[i][col] === 'Q') {\n                return false\n            }\n        }\n        // 检查 45度角是否有皇后\n        for(let i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {\n            if(chessBoard[i][j] === 'Q') {\n                return false\n            }\n        }\n        // 检查 135度角是否有皇后\n        for(let i = row - 1, j = col + 1; i >= 0 && j < n; i--, j++) {\n            if(chessBoard[i][j] === 'Q') {\n                return false\n            }\n        }\n        return true\n    }\n    \n    // 存放结果\n    function transformChessBoard(chessBoard) {\n        let chessBoardBack = []\n        chessBoard.forEach(row => {\n            let rowStr = ''\n            row.forEach(value => {\n                rowStr += value\n            })\n            chessBoardBack.push(rowStr)\n        })\n\n        return chessBoardBack\n    }\n\n    let result = []\n    // 回溯\n    function backtracing(row,chessBoard) {\n        if(row === n) { // 终止条件\n            result.push(transformChessBoard(chessBoard))\n            return\n        }\n        for(let col = 0; col < n; col++) {\n            if(isValid(row, col, chessBoard, n)) {\n                chessBoard[row][col] = 'Q' // 处理节点\n                backtracing(row + 1,chessBoard) // 递归\n                chessBoard[row][col] = '.' // 回溯，撤销处理结果\n            }\n        }\n    }\n    let chessBoard = new Array(n).fill([]).map(() => new Array(n).fill('.'))\n    backtracing(0,chessBoard)\n    return result\n    \n};\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br"),a("span",{staticClass:"line-number"},[s._v("30")]),a("br"),a("span",{staticClass:"line-number"},[s._v("31")]),a("br"),a("span",{staticClass:"line-number"},[s._v("32")]),a("br"),a("span",{staticClass:"line-number"},[s._v("33")]),a("br"),a("span",{staticClass:"line-number"},[s._v("34")]),a("br"),a("span",{staticClass:"line-number"},[s._v("35")]),a("br"),a("span",{staticClass:"line-number"},[s._v("36")]),a("br"),a("span",{staticClass:"line-number"},[s._v("37")]),a("br"),a("span",{staticClass:"line-number"},[s._v("38")]),a("br"),a("span",{staticClass:"line-number"},[s._v("39")]),a("br"),a("span",{staticClass:"line-number"},[s._v("40")]),a("br"),a("span",{staticClass:"line-number"},[s._v("41")]),a("br"),a("span",{staticClass:"line-number"},[s._v("42")]),a("br"),a("span",{staticClass:"line-number"},[s._v("43")]),a("br"),a("span",{staticClass:"line-number"},[s._v("44")]),a("br"),a("span",{staticClass:"line-number"},[s._v("45")]),a("br"),a("span",{staticClass:"line-number"},[s._v("46")]),a("br"),a("span",{staticClass:"line-number"},[s._v("47")]),a("br"),a("span",{staticClass:"line-number"},[s._v("48")]),a("br"),a("span",{staticClass:"line-number"},[s._v("49")]),a("br"),a("span",{staticClass:"line-number"},[s._v("50")]),a("br"),a("span",{staticClass:"line-number"},[s._v("51")]),a("br"),a("span",{staticClass:"line-number"},[s._v("52")]),a("br"),a("span",{staticClass:"line-number"},[s._v("53")]),a("br"),a("span",{staticClass:"line-number"},[s._v("54")]),a("br"),a("span",{staticClass:"line-number"},[s._v("55")]),a("br"),a("span",{staticClass:"line-number"},[s._v("56")]),a("br"),a("span",{staticClass:"line-number"},[s._v("57")]),a("br"),a("span",{staticClass:"line-number"},[s._v("58")]),a("br")])]),a("p",[a("a",{attrs:{href:"https://leetcode-cn.com/problems/n-queens/solution/dai-ma-sui-xiang-lu-51-n-queenshui-su-fa-2k32/",target:"_blank",rel:"noopener noreferrer"}},[s._v("代码作者:carlsun-2"),a("OutboundLink")],1),s._v("，已验证通过；")]),s._v(" "),a("hr"),s._v(" "),a("p",[s._v("回溯算法跟 DFS 深度搜索算法都很经典，需同步理解，对比、吸收；")]),s._v(" "),a("blockquote",[a("p",[s._v("我是掘进安东尼，公众号同名，日拱一卒、日掘一金，再会~")])])])}),[],!1,null,null,null);n.default=r.exports}}]);