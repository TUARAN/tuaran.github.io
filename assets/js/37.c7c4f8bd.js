(window.webpackJsonp=window.webpackJsonp||[]).push([[37],{535:function(s,e,n){"use strict";n.r(e);var t=n(2),a=Object(t.a)({},(function(){var s=this,e=s.$createElement,n=s._self._c||e;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("h2",{attrs:{id:"前言"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),n("p",[s._v("开宗明义，本瓜深知汝之痛点：前端面试知识点太杂，卿总为了面试而面试，忘了记，记了又忘，循环往复，为此叫苦不迭。")]),s._v(" "),n("p",[s._v("来，让本瓜带领各位都稍稍回顾一下，自己曾经在学生时代记忆元素周期表的光辉岁月。")]),s._v(" "),n("blockquote",[n("p",[s._v("氢、氦、锂、铍、硼、碳、氮、氧、氟、氖、钠、镁、铝、硅、磷、硫、氯、氩、钾、钙、钪、钛、钒、铬、猛、铁、钴、镍、铜、锌......")])]),s._v(" "),n("p",[s._v("咱当初记这前三十位元素，是死记硬背的吗？答案是否定的，机智的我们用到了 "),n("strong",[n("a",{attrs:{href:"https://baike.baidu.com/item/%E4%B8%B2%E8%81%94%E8%AE%B0%E5%BF%86%E6%B3%95/6548287?fr=aladdin",target:"_blank",rel:"noopener noreferrer"}},[s._v("串联记忆法"),n("OutboundLink")],1)]),s._v(" 。")]),s._v(" "),n("p",[s._v("一定是像这样或类似这样去记：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("第一周期：氢 氦 ———— 轻嗨：轻轻的打个了招呼：嗨！\n第二周期：锂 铍 硼 碳 氮 氧 氟 氖 ———— 你皮捧碳 蛋养福奶：你很皮，手里捧了一把碳。鸡蛋能够滋养福气的奶妈\n第三周期：钠 镁 铝 硅 磷 硫 氯 氩 ———— 那美女桂林留绿牙：那美女在桂林留绿色的牙齿\n第四周期：钾 钙 钪 钛 钒 铬 猛 铁 钴 镍 铜 锌 ———— 贾盖坑太凡哥 猛铁骨裂痛心：“贾盖”坑了“太凡哥”，导致猛男铁汉骨头碎裂很痛心\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("blockquote",[n("p",[s._v("串联联想与二元链式联想记忆的方法有相似之处，就是都要通过想象、创造和编故事来帮助我们达到双脑学习和记忆的目的。—— "),n("a",{attrs:{href:"https://wenku.baidu.com/view/29daa8d6b9f3f90f76c61bd8.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("出处"),n("OutboundLink")],1)])]),s._v(" "),n("p",[s._v("有木有？本瓜记得尤为清楚，以上串联起来的谐音故事简直可以写出一个狗血剧本了。尤其是“那美女（钠镁铝）”简单三字仿佛就能激起青春期的荷尔蒙。如此，学习能不有兴趣吗？兴趣是最好的老师！想忘掉都难啊！")]),s._v(" "),n("p",[n("strong",[s._v("于是乎，本瓜类比归化，将自己遇到过的高频面试问题运用"),n("span",{staticStyle:{color:"orange"}},[s._v("串联联想法")]),s._v("进行了“串联”整理，以期形成系统，与各位同好分享。")])]),s._v(" "),n("p",[s._v("上图！")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734b9fe9833d052?w=1865&h=1659&f=png&s=323461",alt:""}})]),s._v(" "),n("ul",[n("li",[s._v("本文脑图支持："),n("a",{attrs:{href:"https://www.processon.com",target:"_blank",rel:"noopener noreferrer"}},[s._v("processon"),n("OutboundLink")],1)])]),s._v(" "),n("div",{staticStyle:{"border-left":"5px solid #6c8efa","background-color":"#e7f1fb",padding:"5px 10px","font-size":"0.9em",color:"#666"}},[s._v("\n撰文不易✍ 点赞鼓励👍  您的反馈📑 我的动力💪 \n"),n("br"),s._v(" "),n("br"),s._v("\n我是掘金安东尼，愿一直与你同行！\n"),n("br"),s._v("\n我的个站：https://tuaran.site\n"),n("br"),s._v("\nMy Blog：https://tuaran.github.io\n")]),s._v(" "),n("h2",{attrs:{id:"串联一-从输入url到页面加载发生了什么"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#串联一-从输入url到页面加载发生了什么"}},[s._v("#")]),s._v(" 串联一：从输入URL到页面加载发生了什么？")]),s._v(" "),n("p",[s._v("此题是经典中的经典，可挖掘的点非常之多，亦非常之深。")]),s._v(" "),n("p",[s._v("一图胜万言")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/13/1734773bacd242d4?w=1010&h=786&f=png&s=85405",alt:""}})]),s._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"#999"}},[s._v("原创脑图，转载请说明出处")])])]),s._v(" "),n("p",[s._v("串联知识点：URL解析、DNS查询、TCP握手、HTTP请求、浏览器处理返回报文、页面渲染")]),s._v(" "),n("p",[s._v("串联记忆：共计六步，归并为一句话来记忆："),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("UDTH，处理返回加渲染")])]),s._v("。")]),s._v(" "),n("blockquote",[n("p",[n("strong",[s._v("“UDTH”")]),s._v(" 即URL解析、DNS查询、TCP握手、HTTP请求，")]),s._v(" "),n("p",[n("strong",[s._v("“处理返回加渲染”")]),s._v("，即浏览器处理返回报文，和页面渲染。")])]),s._v(" "),n("p",[s._v("同时，本瓜倾情在脑图上标注了每个步骤可能考察的知识点“关键词”，真的是个个重点，不容错过！")]),s._v(" "),n("h3",{attrs:{id:"一、url-解析"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、url-解析"}},[s._v("#")]),s._v(" 一、URL 解析")]),s._v(" "),n("p",[s._v("URL（Uniform Resource Locator），统一资源定位符，用于定位互联网上资源，俗称网址。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 示例引自 wikipedia\n\n                    hierarchical part\n        ┌───────────────────┴─────────────────────┐\n                    authority               path\n        ┌───────────────┴───────────────┐┌───┴────┐\n  abc://username:password@example.com:123/path/data?key=value&key2=value2#fragid1\n  └┬┘   └───────┬───────┘ └────┬────┘ └┬┘           └─────────┬─────────┘ └──┬──┘\nscheme  user information     host     port                  query         fragment\n\n\nscheme       - 定义因特网服务的类型。常见的协议有 http、https、ftp、file，\n               其中最常见的类型是 http，而 https 则是进行加密的网络传输。\nhost         - 定义域主机（http 的默认主机是 www）\ndomain       - 定义因特网域名，比如 baidu.com\nport         - 定义主机上的端口号（http 的默认端口号是 80）\npath         - 定义服务器上的路径（如果省略，则文档必须位于网站的根目录中）。\nfilename     - 定义文档/资源的名称\nquery        - 即查询参数\nfragment     - 即 # 后的hash值，一般用来定位到某个位置\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br")])]),n("p",[s._v("更多可见：")]),s._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://tools.ietf.org/html/rfc1738",target:"_blank",rel:"noopener noreferrer"}},[s._v("URL RFC"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6",target:"_blank",rel:"noopener noreferrer"}},[s._v("Wikipedia-URI"),n("OutboundLink")],1)])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("URL 编码")])]),s._v(" "),n("blockquote",[n("p",[s._v("一般来说，URL 只能使用英文字母、阿拉伯数字和某些标点符号，不能使用其他文字和符号。此在 "),n("a",{attrs:{href:"https://tools.ietf.org/html/rfc1738",target:"_blank",rel:"noopener noreferrer"}},[s._v("URL RFC"),n("OutboundLink")],1),s._v(" 已做硬性规定。")]),s._v(" "),n("p",[s._v('这意味着，如果URL中有汉字，就必须编码后使用。但是麻烦的是，RFC 1738没有规定具体的编码方法，而是交给应用程序（浏览器）自己决定。这导致"URL编码"成为了一个混乱的领域。')])]),s._v(" "),n("p",[s._v("阮老师早在 2010 年已解释了："),n("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2010/02/url_encoding.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("关于URL编码- 阮一峰"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("这里可直接看"),n("strong",[s._v("结论")]),s._v("：浏览器对 URL 编码会出现差异从而造成混乱，所以假设我们使用 Javascript 预先对 URL 编码，然后再向服务器提交。因为Javascript 的输出总是一致的，这样就保证了服务器得到的数据是格式统一的。")]),s._v(" "),n("p",[s._v("我们常使用到：encodeURI()、encodeURIComponent()；前者对整个 URL 进行 utf-8 编码，后者是对 URL 部分进行编码。")]),s._v(" "),n("p",[s._v("本瓜请问：你能清楚的解释 ASCII、Unicode、UTF-8、GBK 含义和关系吗？")]),s._v(" "),n("p",[s._v("也许我们并不太了解我们常见、常用的东西。")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("类型")]),s._v(" "),n("th",[s._v("含义")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("ASCII")]),s._v(" "),n("td",[s._v("8位一个字节,1个字节表示一个字符.即: 2 ** 8 = 256,所以ASCII码最多只能表示256个字符。")])]),s._v(" "),n("tr",[n("td",[s._v("Unicode")]),s._v(" "),n("td",[s._v("俗称万国码,把所有的语言统一到一个编码里.解决了ASCII码的限制以及乱码的问题。unicode码一般是用两个字节表示一个字符,特别生僻的用四个字节表示一个字符。")])]),s._v(" "),n("tr",[n("td",[s._v("UTF-8")]),s._v(" "),n("td",[s._v('"可变长的编码方式",如果是英文字符,则采用ASCII编码,占用一个字节。如果是常用汉字,就占用三个字节,如果是生僻的字就占用4~6个字节。')])]),s._v(" "),n("tr",[n("td",[s._v("GBK")]),s._v(" "),n("td",[s._v("国内版本,一个中文字符 == 两个字节 英文是一个字节")])])])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("强缓存、协商缓存")])]),s._v(" "),n("p",[s._v("言外之音：本瓜起初是将"),n("strong",[s._v("强缓存、协商缓存")]),s._v("放在第三步 “HTTP 请求”中，后来了解到：如果命中了强缓存则可不再走DNS解析这步。遂将其归到此处。"),n("a",{attrs:{href:"https://www.zhihu.com/question/387376935",target:"_blank",rel:"noopener noreferrer"}},[s._v("浏览器强缓存是按照ip还是域名缓存的？"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("强缓存、协商缓存是必考题。具体流程如下：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("浏览器在加载资源时，根据请求头的 "),n("strong",[s._v("expires")]),s._v("和 "),n("strong",[s._v("cache-control")]),s._v("判断是否命中强缓存，是则直接从缓存读取资源，不会发请求到服务器。")]),s._v(" "),n("blockquote",[n("p",[s._v("expires：HTTP/1.0 时期，根据对比本地时间和服务器时间来判断。")]),s._v(" "),n("p",[s._v("cache-control：HTTP/1.1 时期，根据相对时间来判断，如设置max-age，单位为秒。")])])]),s._v(" "),n("li",[n("p",[s._v("如果没有命中强缓存，浏览器一定会发送一个请求到服务器，通过"),n("strong",[s._v("Etag")]),s._v("和"),n("strong",[s._v("Last-Modified-If")]),s._v("验证资源是否命中协商缓存，如果命中，服务器会将这个请求返回（304），告诉浏览器从缓存中读取数据。")]),s._v(" "),n("blockquote",[n("p",[s._v("【ETag、If-None-Match】成对：Etag 是服务器返回给浏览器的，If-None-Match 是浏览器请求服务器的。通过对比二者来判断，它们记录的是：文件生成的唯一标识。")]),s._v(" "),n("p",[s._v("【Last-Modified，If-Modified-Since】成对：Modified-Since 是服务器返回给浏览器的，If-Modified-Since 是浏览器请求服务器的。通过对比二者来判断，它们记录的是：最后修改时间。")]),s._v(" "),n("p",[s._v("注：ETag 的优先级比 Last-Modified 更高。大部分 web 服务器都默认开启协商缓存，而且是同时启用【ETag、If-None-Match】和 【Last-Modified，If-Modified-Since】。")])])]),s._v(" "),n("li",[n("p",[s._v("如果前面两者都没有命中，直接从服务器加载资源。")])])]),s._v(" "),n("p",[s._v("综上，强缓存和协商缓存如果命中，都是从客户端缓存中加载资源，而不是从服务器加载资源数据；不同的是：强缓存不会发请求到服务器，协商缓存会发请求到服务器进行对比判断得出是否命中。")]),s._v(" "),n("ul",[n("li",[s._v("借一个流程图，暂未找到真实出处，保留引用说明坑位。")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2019/1/18/168609a4227d60d6?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:""}})]),s._v(" "),n("p",[s._v("以上还有另一个重点，就是"),n("strong",[s._v("cache-control")]),s._v("的值的分类：如“no-cache”、“no-store”、“private”等，需要细扣。此处仅暂列二三、作初步释义。")]),s._v(" "),n("ol",[n("li",[s._v("no-cache: 跳过当前的强缓存，发送HTTP请求，即直接进入协商缓存阶段。")]),s._v(" "),n("li",[s._v("no-store：不进行任何形式的缓存。")]),s._v(" "),n("li",[s._v("private： 这种情况就是只有浏览器能缓存了，中间的代理服务器不能缓存。")])]),s._v(" "),n("p",[s._v("更多可见：")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Cache-Control",target:"_blank",rel:"noopener noreferrer"}},[s._v("Cache-Control - MDN"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://github.com/amandakelake/blog/issues/41",target:"_blank",rel:"noopener noreferrer"}},[s._v("缓存（二）——浏览器缓存机制：强缓存、协商缓存 #41"),n("OutboundLink")],1)])]),s._v(" "),n("h3",{attrs:{id:"二、dns查询"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、dns查询"}},[s._v("#")]),s._v(" 二、DNS查询")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("递归查询")])]),s._v(" "),n("p",[s._v("DNS 解析 URL（自右向左） 找到对应的 ip")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 例如：查找www.google.com的IP地址过程（真正的网址是www.google.com.）：\n\n// 根域名服务器 -> com顶级域名服务器 -> google.com域名服务器 -> www.google.com对应的ip\n. -> .com -> google.com. -> www.google.com.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("p",[s._v("这是一个递归查询的过程。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/13/17346b45508b6ac5?w=571&h=118&f=jpeg&s=10373",alt:""}})]),s._v(" "),n("p",[s._v("关于根域名的更多知识，可见\n"),n("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2018/05/root-domain.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("根域名的知识-阮一峰"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("DNS 缓存")])]),s._v(" "),n("p",[s._v("请记住：有 DNS 的地方，就有 DNS 缓存。")]),s._v(" "),n("blockquote",[n("p",[s._v("DNS存在着多级缓存，从距离浏览器的距离排序的话，有以下几种:")]),s._v(" "),n("p",[s._v("1.浏览器缓存 2.系统缓存 3.路由器缓存 4.IPS 服务器缓存 5.根域名服务器缓存 6.顶级域名服务器缓存 7.主域名服务器缓存。")])]),s._v(" "),n("p",[s._v("查看缓存：")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("浏览器查看 DNS 缓存：chrome://net-internals/#dns")])]),s._v(" "),n("li",[n("p",[s._v("win10 系统查看 DNS 缓存:win+R => cmd => ipconfig /displaydns")])])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("DNS 负载均衡")])]),s._v(" "),n("p",[s._v("DNS负载均衡技术的实现原理是在DNS服务器中为同一个主机名配置多个IP地址，在应答DNS查询时，DNS服务器对每个查询将以DNS文件中主机记录的IP地址按顺序返回不同的解析结果，将客户端的访问引导到不同的机器上去，使得不同的客户端访问不同的服务器，从而达到负载均衡的目的。—— 百科")]),s._v(" "),n("h3",{attrs:{id:"三、tcp握手"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、tcp握手"}},[s._v("#")]),s._v(" 三、TCP握手")]),s._v(" "),n("blockquote",[n("p",[s._v("DNS解析返回域名的IP之后，接下来就是浏览器要和该IP建立TCP连接了。")])]),s._v(" "),n("p",[s._v("言外之音：TCP 的相关知识在大学基础课程《计算机网络》都有，本瓜内心苦：出来混的迟早是要还的......")]),s._v(" "),n("p",[s._v("TCP/IP 模型：链路层-网络层-传输层-应用层。")]),s._v(" "),n("p",[s._v("与之对应，OSI（开放式系统互联模型）也不能忘。通常认为 OSI 模型的最上面三层（应用层、表示层和会话层）对应 TCP/IP 模型中的应用层。"),n("a",{attrs:{href:"https://zh.wikipedia.org/wiki/TCP/IP%E5%8D%8F%E8%AE%AE%E6%97%8F#TCP/IP%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B",target:"_blank",rel:"noopener noreferrer"}},[s._v("wiki"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("在 TCP/IP 模型中，像常用的 HTTP/HTTPS/SSH 等协议都在应用层上。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/12/17341a73ae3f6b47?w=315&h=465&f=png&s=17005",alt:""}})]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("三次握手、四次挥手")])]),s._v(" "),n("p",[s._v("所谓三次握手(Three-way Handshake)，是指建立一个 TCP 连接时，需要客户端和服务器总共发送3个包。")]),s._v(" "),n("p",[s._v("三次握手就跟早期打电话时的情况一样：1、A：听得到吗？2、B：听得到，你呢？3、A：我也听到了。然后才开始真正对话。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1. 第一次握手(SYN=1, seq=x):\n\n客户端发送一个 TCP 的 SYN 标志位置1的包，指明客户端打算连接的服务器的端口，以及初始序号 X,保存在包头的序列号(Sequence Number)字段里。\n\n发送完毕后，客户端进入 SYN_SEND 状态。\n\n2. 第二次握手(SYN=1, ACK=1, seq=y, ACKnum=x+1):\n\n服务器发回确认包(ACK)应答。即 SYN 标志位和 ACK 标志位均为1。服务器端选择自己 ISN 序列号，放到 Seq 域里，同时将确认序号(Acknowledgement Number)设置为客户的 ISN 加1，即X+1。 发送完毕后，服务器端进入 SYN_RCVD 状态。\n\n3. 第三次握手(ACK=1，ACKnum=y+1)\n\n客户端再次发送确认包(ACK)，SYN 标志位为0，ACK 标志位为1，并且把服务器发来 ACK 的序号字段+1，放在确定字段中发送给对方，并且在数据段放写ISN的+1\n\n发送完毕后，客户端进入 ESTABLISHED 状态，当服务器端接收到这个包时，也进入 ESTABLISHED 状态，TCP 握手结束。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/13/173476a398c324be?w=1364&h=768&f=gif&s=111217",alt:""}})]),s._v(" "),n("p",[s._v("所谓四次挥手(Four-way handshake)，是指 TCP 的连接的拆除需要发送四个包。")]),s._v(" "),n("p",[s._v("四次挥手像老师拖堂的场景：1、学生说：老师，下课了。2、老师：好，我知道了，我说完这点。3、老师：好了，说完了，下课吧。4、学生：谢谢老师，老师再见。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1. 第一次挥手(FIN=1，seq=x)\n\n假设客户端想要关闭连接，客户端发送一个 FIN 标志位置为1的包，表示自己已经没有数据可以发送了，但是仍然可以接受数据。\n\n发送完毕后，客户端进入 FIN_WAIT_1 状态。\n\n2. 第二次挥手(ACK=1，ACKnum=x+1)\n\n服务器端确认客户端的 FIN 包，发送一个确认包，表明自己接受到了客户端关闭连接的请求，但还没有准备好关闭连接。\n\n发送完毕后，服务器端进入 CLOSE_WAIT 状态，客户端接收到这个确认包之后，进入 FIN_WAIT_2 状态，等待服务器端关闭连接。\n\n3. 第三次挥手(FIN=1，seq=y)\n\n服务器端准备好关闭连接时，向客户端发送结束连接请求，FIN 置为1。\n\n发送完毕后，服务器端进入 LAST_ACK 状态，等待来自客户端的最后一个ACK。\n\n4. 第四次挥手(ACK=1，ACKnum=y+1)\n\n客户端接收到来自服务器端的关闭请求，发送一个确认包，并进入 TIME_WAIT状态，等待可能出现的要求重传的 ACK 包。\n\n服务器端接收到这个确认包之后，关闭连接，进入 CLOSED 状态。\n\n客户端等待了某个固定时间（两个最大段生命周期，2MSL，2 Maximum Segment Lifetime）之后，没有收到服务器端的 ACK ，认为服务器端已经正常关闭连接，于是自己也关闭连接，进入 CLOSED 状态。\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br")])]),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/13/173476a398e1224e?w=682&h=384&f=gif&s=107271",alt:""}})]),s._v(" "),n("p",[s._v("你若问我：三次握手、四次挥手的详细内容太难记了，还记不记？本瓜答：进大厂是必要的。")]),s._v(" "),n("p",[s._v("动图来源："),n("a",{attrs:{href:"https://blog.csdn.net/qzcsu/article/details/72861891",target:"_blank",rel:"noopener noreferrer"}},[s._v("两张动图-彻底明白TCP的三次握手与四次挥手"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("流量控制（滑动窗口）")])]),s._v(" "),n("p",[s._v("为了增加网络的吞吐量，想将数据包一起发送过去，实现“流量控制”，这时候便产生了“滑动窗口”这种协议。")]),s._v(" "),n("p",[s._v("滑动窗口允许发送方在收到接收方的确认之前发送多个数据段。窗口大小决定了在收到目的地确认之前，一次可以传送的数据段的最大数目。窗口大小越大，主机一次可以传输的数据段就越多。当主机传输窗口大小数目的数据段后，就必须等收到确认，才可以再传下面的数据段。")]),s._v(" "),n("p",[s._v("窗口的大小在通信双方连接期间是可变的，通信双方可以通过协商动态地修改窗口大小。改变窗口大小的唯一根据，就是接收端缓冲区的大小。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("拥塞控制")])]),s._v(" "),n("p",[s._v("需求>供给 就会产生拥塞")]),s._v(" "),n("p",[s._v("通过“拥塞窗口”、“慢启动”、“快速重传”、“快速恢复”动态解决。")]),s._v(" "),n("p",[s._v("TCP 使用多种拥塞控制策略来避免雪崩式拥塞。TCP会为每条连接维护一个“拥塞窗口”来限制可能在端对端间传输的未确认分组总数量。这类似 TCP 流量控制机制中使用的滑动窗口。TCP在一个连接初始化或超时后使用一种“慢启动”机制来增加拥塞窗口的大小。它的起始值一般为最大分段大小（Maximum segment size，MSS）的两倍，虽然名为“慢启动”，初始值也相当低，但其增长极快：当每个分段得到确认时，拥塞窗口会增加一个MSS，使得在每次往返时间（round-trip time，RTT）内拥塞窗口能高效地双倍增长。—— "),n("a",{attrs:{href:"https://zh.wikipedia.org/wiki/TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6",target:"_blank",rel:"noopener noreferrer"}},[s._v("TCP拥塞控制-wikipedia"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("滑动窗口（流量控制）和拥塞控制里的原理性的东西太多，本瓜表示无力，暂时要求尽力去理解去记忆。")]),s._v(" "),n("p",[s._v("推荐阅读：")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.im/post/5c9f1dd651882567b4339bce",target:"_blank",rel:"noopener noreferrer"}},[s._v("一篇带你读懂TCP之“滑动窗口”协议"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/post/5b0b7496f265da0dd013a79b",target:"_blank",rel:"noopener noreferrer"}},[s._v("TCP流量控制、拥塞控制"),n("OutboundLink")],1)])]),s._v(" "),n("h3",{attrs:{id:"四、http请求"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、http请求"}},[s._v("#")]),s._v(" 四、HTTP请求")]),s._v(" "),n("p",[n("strong",[s._v("HTTP是万维网的数据通信的基础 —— 维基百科")])]),s._v(" "),n("p",[s._v("HTTP请求报文是由三部分组成: 请求行, 请求报头和请求正文。")]),s._v(" "),n("p",[s._v("HTTP响应报文也是由三部分组成: 状态码, 响应报头和响应报文。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("HTTP、HTTPS")])]),s._v(" "),n("p",[s._v("HTTP 和 HTTPS 的区别？")]),s._v(" "),n("p",[s._v("HTTP报文是包裹在TCP报文中发送的，服务器端收到TCP报文时会解包提取出HTTP报文。但是这个过程中存在一定的风险，HTTP报文是明文，如果中间被截取的话会存在一些信息泄露的风险。")]),s._v(" "),n("p",[s._v("如果在进入TCP报文之前对HTTP做一次加密就可以解决这个问题了。HTTPS协议的本质就是HTTP + SSL(or TLS)。在HTTP报文进入TCP报文之前，先使用SSL对HTTP报文进行加密。从网络的层级结构看它位于HTTP协议与TCP协议之间。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/12/17341a79bae1ae9a?w=535&h=258&f=png&s=25934",alt:""}})]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("HTTP2")])]),s._v(" "),n("p",[s._v("http2 是完全兼容 http/1.x 的，并在此基础上添加了 4 个主要新特性：")]),s._v(" "),n("ol",[n("li",[s._v("二进制分帧：http/1.x 是一个文本协议，而 http2 是一个二进制协议。")]),s._v(" "),n("li",[s._v("头部压缩：http/1.x 中请求头基本不变，http2 中提出了一个 HPACK 的压缩方式，用于减少 http header 在每次请求中消耗的流量。")]),s._v(" "),n("li",[s._v("服务端推送：服务端主动向客户端推送数据。")]),s._v(" "),n("li",[s._v("多路复用：http/1.x，每个 http 请求都会建立一个 TCP 连接；http2，所有的请求都会共用一个TCP连接。")])]),s._v(" "),n("p",[s._v("更多了解，可见 "),n("a",{attrs:{href:"https://blog.wangriyu.wang/2018/05-HTTP2.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("HTTP2 详解"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("GET、POST")])]),s._v(" "),n("p",[s._v("直观区别：")]),s._v(" "),n("ol",[n("li",[s._v("GET 用来获取数据，POST 用来提交数据。")]),s._v(" "),n("li",[s._v("GET 参数有长度限制（受限于url长度，具体的数值取决于浏览器和服务器的限制，最长2M），而 POST 无限制。")]),s._v(" "),n("li",[s._v('GET 请求的数据会附加在 URL 上，以"?"分割，多个参数用"&"连接，而 POST 请求会把请求的数据放在 HTTP 请求体中。都可被抓包。')]),s._v(" "),n("li",[s._v("GET 请求会保存在浏览器历史记录中，还可能保存在 WEB 服务器的日志中。")])]),s._v(" "),n("p",[s._v("隐藏区别（存在浏览器差异）：")]),s._v(" "),n("ol",[n("li",[s._v("GET 产生一个 TCP 数据包；POST 产生两个 TCP 数据包。")])]),s._v(" "),n("p",[s._v("更多了解：")]),s._v(" "),n("p",[n("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2014/05/restful_api.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("RESTful API 设计指南 - 阮一峰"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("Keep-Alive")])]),s._v(" "),n("p",[s._v("我们都知道使用 Keep-Alive 是为了避免重新建立连接。")]),s._v(" "),n("p",[s._v("目前大部分浏览器都是用 http1.1 协议，默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。")]),s._v(" "),n("p",[s._v("HTTP 长连接不可能一直保持，它有两个参数，例如 Keep-Alive: timeout=5, max=100，表示这个TCP通道可以保持5秒，max=100，表示这个长连接最多接收100次请求就断开。")]),s._v(" "),n("p",[s._v("Keep-Alive 模式发送数据 HTTP 服务器不会自动断开连接，所有不能使用返回EOF（-1）来判断。")]),s._v(" "),n("p",[s._v("基于此，抛问题：当 HTTP 采用 keepalive 模式，当客户端向服务器发生请求之后，客户端如何判断服务器的数据已经发生完成？")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("使用消息首部字段 Conent-Length：Conent-Length表示实体内容长度，客户端可以根据这个值来判断数据是否接收完成。")])]),s._v(" "),n("li",[n("p",[s._v('使用消息首部字段 Transfer-Encoding：如果是动态页面，服务器不可能预先知道内容大小，这时就可以使用Transfer-Encoding：chunk 模式来传输数据了。即如果要一边产生数据，一边发给客户端，服务器就需要使用"Transfer-Encoding: chunked"这样的方式来代替Content-Length。chunked 编码的数据在最后有一个空 chunked 块，表明本次传输数据结束')])])]),s._v(" "),n("p",[s._v("本瓜之前面试腾讯 PCG 就被问到 "),n("strong",[s._v("Transfer-Encoding：chunk")]),s._v(" 这个，请大家格外注意。")]),s._v(" "),n("p",[s._v("参考:")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Keep-Alive",target:"_blank",rel:"noopener noreferrer"}},[s._v("Keep-Alive - MDN"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/0201zcr/p/4694945.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("HTTP长连接和短连接"),n("OutboundLink")],1)])]),s._v(" "),n("h3",{attrs:{id:"五、浏览器处理返回报文"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、浏览器处理返回报文"}},[s._v("#")]),s._v(" 五、浏览器处理返回报文")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("状态码")])]),s._v(" "),n("p",[s._v("1xx：指示信息–表示请求已接收，继续处理。")]),s._v(" "),n("p",[s._v("2xx：成功–表示请求已被成功接收、理解、接受。")]),s._v(" "),n("p",[s._v("3xx：重定向–要完成请求必须进行更进一步的操作。")]),s._v(" "),n("p",[s._v("4xx：客户端错误–请求有语法错误或请求无法实现。")]),s._v(" "),n("p",[s._v("5xx：服务器端错误–服务器未能实现合法的请求。")]),s._v(" "),n("p",[s._v("平时遇到比较常见的状态码有:200, 204, 301, 302, 304, 400, 401, 403, 404, 422, 500。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("切分返回头和返回体（腾讯 PCG 考点）")])]),s._v(" "),n("p",[s._v("这里的考点其实和 http keep-alive 中的问题重合，但是还是想着重强调，因为本瓜掉过这个坑，再三点出，以示后人。")]),s._v(" "),n("p",[s._v("最终归为这个问题："),n("a",{attrs:{href:"https://stackoverflow.com/questions/4824451/detect-end-of-http-request-body",target:"_blank",rel:"noopener noreferrer"}},[s._v("Detect end of HTTP request body - stackoverflow"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("解答：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("1. If the client sends a message with Transfer-Encoding: Chunked, you will need to parse the somewhat complicated chunked transfer encoding syntax. You don not really have much choice in the matter -- if the client is sending in this format, you have to receive it. When the client is using this approach, you can detect the end of the body by a chunk with a length of 0.\n2. If the client instead sends a Content-Length, you must use that.\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("即：如何获取 HTTP 返回体？")]),s._v(" "),n("ol",[n("li",[n("p",[s._v("先把 header 直到 \\r\\n\\r\\n（两个换行）整个读取，即整个请求头;")])]),s._v(" "),n("li",[n("p",[s._v("如果返回 Transfer-Encoding: Chunked，则读取，直到遇到空 chunked 块，则结束。")])]),s._v(" "),n("li",[n("p",[s._v("如果返回 Content-Length，则读从请求头的末尾开始计算 Content-Length 长度的字节。")])]),s._v(" "),n("li",[n("p",[s._v("其他情况，等待返回。")])])]),s._v(" "),n("p",[s._v("了解更多："),n("a",{attrs:{href:"https://juejin.im/post/5a0ce1d95188253e24708454#heading-15",target:"_blank",rel:"noopener noreferrer"}},[s._v("HTTP 之响应篇"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("本地数据存储")])]),s._v(" "),n("ol",[n("li",[s._v("cookie：4K，可以手动设置失效期。")]),s._v(" "),n("li",[s._v("localStorage：5M，除非手动清除，否则一直存在。")]),s._v(" "),n("li",[s._v("sessionStorage：5M，不可以跨标签访问，页面关闭就清理。")]),s._v(" "),n("li",[s._v("indexedDB：浏览器端数据库，无限容量，除非手动清除，否则一直存在。")]),s._v(" "),n("li",[s._v("Web SQL：关系数据库，通过SQL语句访问（已经被抛弃）。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("浏览器缓存位置")])]),s._v(" "),n("p",[s._v("按优先级从高到低：")]),s._v(" "),n("ol",[n("li",[s._v("Service Worker：本质是一个web worker，是独立于网页运行的脚本。")]),s._v(" "),n("li",[s._v("Memory Cache：Memory Cache指的是内存缓存，从效率上讲它是最快的。")]),s._v(" "),n("li",[s._v("Disk Cache：Disk Cache就是存储在磁盘中的缓存，从存取效率上讲是比内存缓存慢的，但是他的优势在于存储容量和存储时长。")]),s._v(" "),n("li",[s._v("Push Cache：即推送缓存，是 HTTP/2 的内容。")])]),s._v(" "),n("p",[s._v("更多：")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.im/post/5d33d3a6f265da1bc94f29a6",target:"_blank",rel:"noopener noreferrer"}},[s._v("service worker 静态资源离线缓存实践"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://jakearchibald.com/2017/h2-push-tougher-than-i-thought/",target:"_blank",rel:"noopener noreferrer"}},[s._v("HTTP/2 push is tougher than I thought"),n("OutboundLink")],1)])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("离线缓存：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<html lang="en" manifest="offline.appcache">\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[n("a",{attrs:{href:"https://mp.weixin.qq.com/s/Q-Z8kYWSUJpkpAkTBv1Igw?",target:"_blank",rel:"noopener noreferrer"}},[s._v("HTML5-离线缓存（Application Cache）"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("注：“浏览器缓存位置”和“离线缓存”了解相关，有个概念/印象即可。")]),s._v(" "),n("h3",{attrs:{id:"六、页面渲染"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、页面渲染"}},[s._v("#")]),s._v(" 六、页面渲染")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("CssTree+DomTree")])]),s._v(" "),n("p",[s._v("本瓜知道你知道过程是这样的：")]),s._v(" "),n("blockquote",[n("p",[s._v("dom tree + css tree = render tree => layout =>painting?")])]),s._v(" "),n("p",[s._v("但是你真的吃透了吗？")]),s._v(" "),n("p",[s._v("HTML → DOM树 转化过程：")]),s._v(" "),n("ol",[n("li",[s._v("解码：浏览器从磁盘或网络读取HTML的原始字节，然后根据指定的文件编码格式（例如 UTF-8）将其转换为相应字符")]),s._v(" "),n("li",[s._v('令牌化：浏览器把字符转化成W3C HTML5 标准指定的各种确切的令牌，比如""、""以及其他在尖括号内的字符串。每个令牌都有特殊的含义以及它自己的一套规则')]),s._v(" "),n("li",[s._v("词法分析：生成的令牌转化为对象，这个对象定义了它们的属性及规则")]),s._v(" "),n("li",[s._v("DOM树构建：最后，由于HTML标记定义了不同标签之间的关系（某些标签嵌套在其他标签中），创建的对象在树状的数据结构中互相链接，树状数据结构也捕获了原始标签定义的父子关系：HTML对象是body对象的父对象，body是p对象的父对象等等")])]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/12/17341a8db79718a5?w=761&h=430&f=png&s=101963",alt:""}})]),s._v(" "),n("p",[s._v("CSS → CSSOM树 转化过程类同以上")]),s._v(" "),n("p",[s._v("CSSOM只输出包含有样式的节点，最终输出为：\n"),n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/12/17341a8fbb4a9d3d?w=590&h=312&f=png&s=29033",alt:""}})]),s._v(" "),n("p",[s._v("Render Tree （生成渲染树，计算可见节点和样式）")]),s._v(" "),n("ol",[n("li",[s._v("不包括Header 、 script 、meta 等不可见的节点")]),s._v(" "),n("li",[s._v("某些通过 CSS 隐藏的节点在渲染树中也会被忽略，比如应用了 display:none 规则的节点，而visibility: hidden只是视觉不可见，仍占据空间，不会被忽略。")])]),s._v(" "),n("p",[s._v("layout：依照盒子模型，计算出每个节点在屏幕中的位置及尺寸")]),s._v(" "),n("p",[s._v("painting：按照算出来的规则，通过显卡，把内容画到屏幕上。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("回流、重绘")])]),s._v(" "),n("p",[s._v("回流：")]),s._v(" "),n("p",[s._v("当可见节点位置及尺寸发生变化时会发生回流")]),s._v(" "),n("p",[s._v("重绘：")]),s._v(" "),n("p",[s._v("改变某个元素的背景色、文字颜色、边框颜色等等不影响它周围或内部布局的属性时，屏幕的一部分要重画，但是元素的几何尺寸没有变。")]),s._v(" "),n("p",[s._v("这里本瓜再抛两个问题。")]),s._v(" "),n("p",[s._v("Q1：浏览器在什么时候向服务器发送获取css、js外部文件的请求？")]),s._v(" "),n("p",[s._v("A1：解析DOM时碰到外部链接，如果还有connection，则立刻触发下载请求。")]),s._v(" "),n("p",[s._v("Q2：CSSOM DOM JavaScript 三者阻塞关系？")]),s._v(" "),n("p",[s._v("A2：CSSOM DOM互不影响，JavaScript会阻塞DOM树的构建但JS前的HTML可以正常解析成DOM树，CSSOM的构建会阻塞JavaScript的执行。"),n("a",{attrs:{href:"https://juejin.im/post/5b88ddca6fb9a019c7717096",target:"_blank",rel:"noopener noreferrer"}},[s._v("对此句存疑？"),n("OutboundLink")],1)]),s._v(" "),n("ul",[n("li",[s._v("css 加载的阻塞情况:")])]),s._v(" "),n("blockquote",[n("ol",[n("li",[n("p",[s._v("css加载不会阻塞DOM树的解析\n// DOM解析和CSS解析是两个并行的进程，所以这也解释了为什么CSS加载不会阻塞DOM的解析。")])]),s._v(" "),n("li",[n("p",[s._v("css加载会阻塞DOM树的渲染\n// 由于Render Tree是依赖于DOM Tree和CSSOM Tree的，所以他必须等待到CSSOM Tree构建完成，也就是CSS资源加载完成(或者CSS资源加载失败)后，才能开始渲染。因此，CSS加载是会阻塞Dom的渲染的。")])]),s._v(" "),n("li",[n("p",[s._v("css加载会阻塞后面js语句的执行\n// 由于js可能会操作之前的Dom节点和css样式，因此浏览器会维持html中css和js的顺序。因此，样式表会在后面的js执行前先加载执行完毕。所以css会阻塞后面js的执行。")])])])]),s._v(" "),n("p",[s._v("参考阅读：")]),s._v(" "),n("ol",[n("li",[n("a",{attrs:{href:"https://juejin.im/post/5b88ddca6fb9a019c7717096",target:"_blank",rel:"noopener noreferrer"}},[s._v("css加载会造成阻塞吗？"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://juejin.im/entry/5b065c326fb9a07aa43c9a06",target:"_blank",rel:"noopener noreferrer"}},[s._v("浏览器页面渲染流程梳理"),n("OutboundLink")],1)])]),s._v(" "),n("h3",{attrs:{id:"综合补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#综合补充"}},[s._v("#")]),s._v(" "),n("span",{staticStyle:{color:"#f39b81"}},[s._v("综合补充")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("web 性能优化")])]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://juejin.im/post/5b73ef38f265da281e048e51",target:"_blank",rel:"noopener noreferrer"}},[s._v("雅虎35条军规"),n("OutboundLink")],1)])]),s._v(" "),n("h2",{attrs:{id:"串联二-老生常谈-请你谈一下闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#串联二-老生常谈-请你谈一下闭包"}},[s._v("#")]),s._v(" 串联二：老生常谈，请你谈一下闭包？")]),s._v(" "),n("p",[s._v("假若你认为此题简单，一两句话就能说完？那当真浮于表面。此题实则一两天都说不完！它可以牵扯出 js 原理的大部分知识。是真正意义上的“母题”。")]),s._v(" "),n("p",[s._v("一图胜万言")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/13/1734838c2a30ea1f?w=736&h=807&f=png&s=63216",alt:""}})]),s._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"#999"}},[s._v("原创脑图，转载请说明出处")])])]),s._v(" "),n("p",[s._v("串联知识点：闭包、作用域、原型链、js继承。")]),s._v(" "),n("p",[s._v("串联记忆：此题并非像上文题“从输入URL到页面加载发生了什么？”，后者“串联点”是按解答步骤来递进的。而这里的“串联点”，更多是"),n("strong",[s._v("你中有我，我中有你")]),s._v("，前后互相补充，互相完善。当你领略完的时候，一定会有一种“万物归宗”的感觉。")]),s._v(" "),n("p",[s._v("归并为一五言诗来记忆：")]),s._v(" "),n("p",[n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("闭包作用域")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("原型多考虑")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("继承八大法")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("基础好好叙")])])]),s._v(" "),n("h3",{attrs:{id:"一、闭包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、闭包"}},[s._v("#")]),s._v(" 一、闭包")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("闭包含义")])]),s._v(" "),n("p",[s._v("一言以蔽之。")]),s._v(" "),n("blockquote",[n("p",[s._v("在一个函数内有另外一个函数可以访问它的内部变量，并且另外一个函数在外部被调用，这样的词法环境叫闭包。")])]),s._v(" "),n("ul",[n("li",[s._v("作用：")])]),s._v(" "),n("ol",[n("li",[s._v("读取函数内部的变量；（私有变量、不污染全局）")]),s._v(" "),n("li",[s._v("让变量始终保存在内存中。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("闭包应用")])]),s._v(" "),n("ul",[n("li",[s._v("最经典试题")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("for(var i = 0; i < 5; i++){\n\t(function(j){\n\t\tsetTimeout(function(){\n\t\t\tconsole.log(j);\n\t\t},1000);\n\t})(i);\n}\nconsole.log(i);\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br")])]),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("垃圾回收机制")])]),s._v(" "),n("ul",[n("li",[s._v("js 垃圾回收机制：标记清除和引用计数。")])]),s._v(" "),n("p",[s._v("标记清除简单讲就是变量存储在内存中，当变量进入执行环境的时候，垃圾回收器会给它加上标记，这个变量离开执行环境，将其标记为“清除”，不可追踪，不被其他对象引用，或者是两个对象互相引用，不被第三个对象引用，然后由垃圾回收器收回，释放内存空间。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("防抖、节流函数")])]),s._v(" "),n("ul",[n("li",[s._v("防抖")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function debounce(fn, delay) {\n    var timer; // 维护一个 timer\n    return function () {\n        var _this = this; // 取debounce执行作用域的this\n        var args = arguments;\n        if (timer) {\n            clearTimeout(timer);\n        }\n        timer = setTimeout(function () {\n            fn.apply(_this, args); // 用apply指向调用debounce的对象，相当于_this.fn(args);\n        }, delay);\n    };\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("ul",[n("li",[s._v("节流")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function throttle(fn, delay) {\n    var timer;\n    return function () {\n        var _this = this;\n        var args = arguments;\n        if (timer) {\n            return;\n        }\n        timer = setTimeout(function () {\n            fn.apply(_this, args);\n            timer = null; // 在delay后执行完fn之后清空timer，此时timer为假，throttle触发可以进入计时器\n        }, delay)\n    }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("h3",{attrs:{id:"二、作用域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、作用域"}},[s._v("#")]),s._v(" 二、作用域")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("全局作用域")])]),s._v(" "),n("ul",[n("li",[s._v("直接编写在script标签中的JS代码，都在全局作用域；")]),s._v(" "),n("li",[s._v("全局作用域在页面打开时创建，在页面关闭时销毁；")]),s._v(" "),n("li",[s._v("在全局作用域中有一个全局对象window，它代表的是一个浏览器的窗口，它由浏览器创建我们可以直接使用；")]),s._v(" "),n("li",[s._v("全局作用域中，创建变量都会作为window对象的属性保存；")]),s._v(" "),n("li",[s._v("创建的函数都会作为window对象的方法保存；")]),s._v(" "),n("li",[s._v("全局作用域中的变量都是全局变量，在页面的任何部分都可以访问的到；")])]),s._v(" "),n("p",[s._v("我们可以在控制台直接打印试试看，正如以上所说：\n"),n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/13/17347f3fd1967005?w=475&h=233&f=png&s=43577",alt:""}})]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("函数作用域（局部作用域）")])]),s._v(" "),n("ul",[n("li",[s._v("变量在函数内声明，变量属于局部作用域。")]),s._v(" "),n("li",[s._v("局部变量：只能在函数内部访问。")]),s._v(" "),n("li",[s._v("局部变量只作用于函数内，所以不同的函数可以使用相同名称的变量。")]),s._v(" "),n("li",[s._v("局部变量在函数开始执行时创建，函数执行完后局部变量会自动销毁。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("块级作用域")])]),s._v(" "),n("blockquote",[n("p",[s._v("块级作用域 : 块级作用域指的就是使用 if () { }; while ( ) { } ......这些语句所形成的语句块 , 并且其中变量必须使用 let 或 const 声明,保证了外部不可以访问语句块中的变量。")])]),s._v(" "),n("p",[s._v("注：函数作用域和块级作用域没有直接关系。")]),s._v(" "),n("ul",[n("li",[s._v("const、let、var 区别")])]),s._v(" "),n("ol",[n("li",[s._v("const 声明则不能改变，块级作用域，不允许变量提升。")]),s._v(" "),n("li",[s._v("let 块级作用域，不允许变量提升。")]),s._v(" "),n("li",[s._v("var 非块级作用域，允许变量提升。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("作用域链")])]),s._v(" "),n("p",[s._v("出现函数嵌套函数，则就会出现作用域链 "),n("strong",[s._v("scope chain")]),s._v("。")]),s._v(" "),n("ul",[n("li",[s._v("遍历嵌套作用域链的规则很简单：引擎从当前的执行作用域开始查找变量，如果找不到， 就向上一级继续查找。当抵达最外层的全局作用域时，无论找到还是没找到，查找过程都会停止。")]),s._v(" "),n("li",[s._v("局部作用域（如函数作用域）可以访问到全局作用域中的变量和方法，而全局作用域不能访问局部作用域的变量和方法。")])]),s._v(" "),n("p",[n("strong",[s._v("用作用域链来解释闭包：")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('function outter() {\n  var private= "I am private";\n  function show() {\n    console.log(private);\n  }\n// [[scope]]已经确定：[outter上下文的变量对象，全局上下文变量对象]\n  return show;\n}\n\nvar ref = outter();\nconsole.log(private);  // outter执行完以后，private不会被销毁，并且只能被show方法所访问，\n                          //直接访问它会出现报错：private is not defined\nref(); // 打印I am private\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br")])]),n("p",[s._v("其实，我们要明白的是函数的声明和调用是分开的，如果不搞清楚这一点，很多基础面试题就容易出错。")]),s._v(" "),n("ul",[n("li",[s._v("深究：\n"),n("a",{attrs:{href:"https://github.com/mqyqingfeng/Blog/issues/3",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript深入之词法作用域和动态作用域 #3"),n("OutboundLink")],1)])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("变量生命周期")])]),s._v(" "),n("p",[s._v("一个变量的声明意味着就是我们在内存当中申请了一个空间用来存储。这个内存也就是我们电脑的运行内存，如果我们一直的声明变量，不释放的话。会占用很大的内存。")]),s._v(" "),n("p",[s._v("在 c/c++ 当中是需要程序员在合适的地方手动的去释放变量内存，而 javascript 和 java 拥有垃圾回收机制（咱们在上文已说明）。")]),s._v(" "),n("p",[s._v("js 变量分为两种类型：全局变量和局部变量")]),s._v(" "),n("ol",[n("li",[s._v("全局变量的生命周期：从程序开始执行创建，到整个页面关闭时，变量收回。")]),s._v(" "),n("li",[s._v("局部变量的生命周期：从函数开始调用开始，一直到函数调用结束。\n但有的时候我们需要让局部变量的生命周期长一点，此时就用到了"),n("strong",[s._v("闭包")]),s._v("。")])]),s._v(" "),n("h3",{attrs:{id:"三、原型链"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、原型链"}},[s._v("#")]),s._v(" 三、原型链")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("实例与原型")])]),s._v(" "),n("p",[s._v("一个原型对象的隐形属性指向构造它的构造函数的显示属性。")]),s._v(" "),n("p",[s._v("当一个对象去查找它的属性，找不到就去找他的构造函数的属性，一直向上找，直到找到 Object()。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("判断数据类型")])]),s._v(" "),n("ol",[n("li",[s._v("typeof")]),s._v(" "),n("li",[s._v("instanceof")]),s._v(" "),n("li",[s._v("constructor")]),s._v(" "),n("li",[s._v("Object.prototype.toString.call()")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("new 一个对象")])]),s._v(" "),n("p",[s._v("步骤：")]),s._v(" "),n("ol",[n("li",[s._v("创建一个新对象")]),s._v(" "),n("li",[s._v("将构造函数的作用域赋给新对象（因此this指向了这个新对象）")]),s._v(" "),n("li",[s._v("执行构造函数中的代码（为这个新对象添加属性）")]),s._v(" "),n("li",[s._v("返回新对象")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("this 指向")])]),s._v(" "),n("p",[s._v("this 指向 5 大规则：")]),s._v(" "),n("ol",[n("li",[s._v("如果 new 关键词出现在被调用函数的前面，那么JavaScript引擎会创建一个新的对象，被调用函数中的this指向的就是这个新创建的函数。")]),s._v(" "),n("li",[s._v("如果通过apply、call或者bind的方式触发函数，那么函数中的this指向传入函数的第一个参数。")]),s._v(" "),n("li",[s._v("如果一个函数是某个对象的方法，并且对象使用句点符号触发函数，那么this指向的就是该函数作为那个对象的属性的对象，也就是，this指向句点左边的对象")]),s._v(" "),n("li",[s._v("如果一个函数作为FFI被调用，意味着这个函数不符合以上任意一种调用方式，this指向全局对象，在浏览器中，即是window。")]),s._v(" "),n("li",[s._v("如果出现上面对条规则的累加情况，则优先级自1至4递减，this的指向按照优先级最高的规则判断。")])]),s._v(" "),n("p",[s._v("参考："),n("a",{attrs:{href:"https://juejin.im/entry/5a20d18af265da43062a9031",target:"_blank",rel:"noopener noreferrer"}},[s._v("this指向记忆5大原则"),n("OutboundLink")],1)]),s._v(" "),n("ul",[n("li",[s._v("箭头函数中的 this 指向：箭头函数中的this是在定义函数的时候绑定，而不是在执行函数的时候绑定。")])]),s._v(" "),n("p",[s._v("更多："),n("a",{attrs:{href:"https://juejin.im/post/5aa1eb056fb9a028b77a66fd",target:"_blank",rel:"noopener noreferrer"}},[s._v("JS中的箭头函数与this"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("bind、call、apply")])]),s._v(" "),n("ul",[n("li",[s._v("call\ncall()方法接收的第一个参数和apply()方法接收的一样，变化的是其余的参数直接传递给函数。换句话说，在使用call()方法时，传递给函数的参数必须逐个列举出来。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sum(num1 , num2){\n\treturn num1 + num2;\n}\nfunction callSum(num1 , num2){\n\treturn sum.call(this , sum1 , sum2);\n}\nconsole.log(callSum(10 , 10)); // 20\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("ul",[n("li",[s._v("apply\napply()方法接收两个参数：一个是在其中运行函数的作用域，另一个是参数数组，这里的参数数组可以是Array的实例，也可以是arguments对象（类数组对象）。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function sum(num1 , num2){\n\treturn num1 + num2;\n}\nfunction callSum1(num1,num2){\n\treturn sum.apply(this,arguments); // 传入arguments类数组对象\n}\nfunction callSum2(num1,num2){\n\treturn sum.apply(this,[num1 , num2]); // 传入数组\n}\nconsole.log(callSum1(10 , 10)); // 20\nconsole.log(callSum2(10 , 10)); // 20\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("call和apply的区别在于二者传参的时候，前者是一个一个的传，后者是传数组或类数组arguments")]),s._v(" "),n("ul",[n("li",[s._v("bind")])]),s._v(" "),n("p",[s._v("bind()方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("手写深浅拷贝")])]),s._v(" "),n("p",[s._v("浅：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function clone(target) {\n    let cloneTarget = {};\n    for (const key in target) {\n        cloneTarget[key] = target[key];\n    }\n    return cloneTarget;\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("深（递归）：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function clone(target) {\n    if (typeof target === 'object') {\n        let cloneTarget = Array.isArray(target) ? [] : {};\n        for (const key in target) {\n            cloneTarget[key] = clone(target[key]);\n        }\n        return cloneTarget;\n    } else {\n        return target;\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br")])]),n("p",[s._v("了解更多，推荐阅读："),n("a",{attrs:{href:"https://juejin.im/post/5d6aa4f96fb9a06b112ad5b1",target:"_blank",rel:"noopener noreferrer"}},[s._v("如何写出一个惊艳面试官的深拷贝?"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"四、js-继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、js-继承"}},[s._v("#")]),s._v(" 四、js 继承")]),s._v(" "),n("p",[s._v("八种继承方式，详细请看此篇："),n("a",{attrs:{href:"https://juejin.im/post/5bcb2e295188255c55472db0#heading-0",target:"_blank",rel:"noopener noreferrer"}},[s._v("JavaScript常用八种继承方案"),n("OutboundLink")],1),s._v("。")]),s._v(" "),n("p",[s._v("本瓜不做赘述，此处仅列二三关键必记。")]),s._v(" "),n("h2",{attrs:{id:"串联三-请你谈谈-vue-原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#串联三-请你谈谈-vue-原理"}},[s._v("#")]),s._v(" 串联三：请你谈谈 Vue 原理？")]),s._v(" "),n("p",[s._v("本瓜不装了，摊牌了。其实本文的目录结构编写时间线在 "),n("a",{attrs:{href:"https://juejin.im/post/5f02f0bdf265da22ef7dbe5d",target:"_blank",rel:"noopener noreferrer"}},[s._v("《 Vue(v2.6.11)万行源码生啃，就硬刚！》"),n("OutboundLink")],1),s._v("\n这篇文章之前。当时就是因为似懂非懂，才定下心来“生啃源码”。现在源码看完了，体会的确又不一样了。但由于细节太多，篇幅受限。此处也仅列框架、点出要点、注释链接，以便记忆。")]),s._v(" "),n("p",[s._v("一图胜万言")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734b458fc7eb1cd?w=720&h=721&f=png&s=57842",alt:""}})]),s._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"#999"}},[s._v("原创脑图，转载请说明出处")])])]),s._v(" "),n("p",[s._v("串联知识点：Vue初始化和生命周期、虚拟DOM、响应式原理、组件编译、Vue常用补充、Vue全家桶。")]),s._v(" "),n("p",[s._v("串联记忆：编一顺口溜，见笑。")]),s._v(" "),n("p",[n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("V U E 真容易")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("初始化 有生命")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("虚拟 dom 好给力")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("响应式 看仔细")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("组件化 大家利")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("全家桶 笑嘻嘻")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("会打包 挣一亿")])])]),s._v(" "),n("ul",[n("li",[s._v("邀大家来改编")])]),s._v(" "),n("h3",{attrs:{id:"一、init-render"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、init-render"}},[s._v("#")]),s._v(" 一、init&render")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("挂载和初始化")])]),s._v(" "),n("p",[n("strong",[s._v("new Vue()发生了什么？")])]),s._v(" "),n("p",[s._v("Vue 实际上是一个类，类在 Javascript 中是用 Function 来实现的。Vue 只能通过 new 关键字初始化，然后会调用 this._init 方法。")]),s._v(" "),n("p",[s._v("初始化主要实现：合并配置（mergeOptions），初始化生命周期（initLifecycle），初始化事件中心（initEvents），初始化渲染（initRender），初始化 data、props、computed、watcher 等等。")]),s._v(" "),n("p",[s._v("流程图参考如下：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734c02df90bca7e?w=1422&h=911&f=png&s=236026",alt:""}})]),s._v(" "),n("ul",[n("li",[s._v("此图在组件编译环节少了 optimize ，可能由于版本差异。 "),n("a",{attrs:{href:"https://juejin.im/post/5ab07a63f265da2389258b12",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue2.4.4 源码"),n("OutboundLink")],1)]),s._v(" "),n("li",[s._v("借图，未找到真实出处，保留引用说明坑位。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("实例生命周期")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/instance.html#%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA",target:"_blank",rel:"noopener noreferrer"}},[s._v("生命周期图示"),n("OutboundLink")],1),s._v("，还是得看官网文档。还记得这句话吗？")]),s._v(" "),n("blockquote",[n("p",[s._v("下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。")])]),s._v(" "),n("p",[s._v("注释版：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734c32a0d3db3d6?w=1200&h=2800&f=png&s=85281",alt:""}})]),s._v(" "),n("p",[s._v("推荐："),n("a",{attrs:{href:"https://ustbhuangyi.github.io/vue-analysis/v2/components/lifecycle.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("源码解读"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("要点注释：")]),s._v(" "),n("ol",[n("li",[s._v("beforeCreate 和 created 函数都是在实例化 Vue 的阶段，在 _init 方法中执行的。从源码中可以看到 beforeCreate 和 created 的钩子调用是在 initState 的前后，initState 的作用是初始化 props、data、methods、watch、computed 等属性。那么显然 beforeCreate 的钩子函数中就不能获取到 props、data 中定义的值，也不能调用 methods 中定义的函数。而 created 钩子函数可以。")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("Vue.prototype._init = function (options?: Object) {\n  // ...\n  initLifecycle(vm)\n  initEvents(vm)\n  initRender(vm)\n  callHook(vm, 'beforeCreate') // beforeCreate 钩子\n  initInjections(vm) // resolve injections before data/props\n  initState(vm)\n  initProvide(vm) // resolve provide after data/props\n  callHook(vm, 'created') // created 钩子\n  // ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("ol",{attrs:{start:"2"}},[n("li",[n("p",[s._v("在执行 vm._render() 函数渲染 VNode 之前，执行了 beforeMount 钩子函数，在执行完 vm._update() 把 VNode patch 到真实 DOM 后，执行 mounted 钩子。（"),n("strong",[s._v("此点重要")]),s._v("）")])]),s._v(" "),n("li",[n("p",[s._v("beforeUpdate 的执行时机是在渲染 Watcher 的 before 函数中调用。update 的执行时机是在 "),n("strong",[s._v("flushSchedulerQueue")]),s._v(" 函数调用的时候。")])]),s._v(" "),n("li",[n("p",[s._v("beforeDestroy 和 destroyed 钩子函数的执行时机在组件销毁的阶段。")])]),s._v(" "),n("li",[n("p",[s._v("activated 和 deactivated 钩子函数是专门为 keep-alive 组件定制的钩子。")])])]),s._v(" "),n("p",[s._v("重点说明：")]),s._v(" "),n("ol",[n("li",[s._v("在 Vue2 中，所有 Vue 的组件的渲染最终都需要 render 方法，无论我们是用单文件 .vue 方式开发组件，还是写了 el 或者 template 属性，最终都会转换成 render 方法，用来把实例渲染成一个虚拟 Node（"),n("strong",[s._v("Virtual DOM")]),s._v("）。")])]),s._v(" "),n("h3",{attrs:{id:"二、虚拟dom"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、虚拟dom"}},[s._v("#")]),s._v(" 二、虚拟DOM")]),s._v(" "),n("blockquote",[n("p",[s._v("Vue 2.0 相比 Vue 1.0 最大的升级就是利用了 Virtual DOM。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("vdom")])]),s._v(" "),n("p",[s._v("vdom 其实就是一颗 js 对象树，最少包含标签名( tag)、属性(attrs)和子元素对象( children)三个属性。原本对 DOM 节点的操作（浏览器将 DOM 设计的非常复杂）转成了对 js 对象的操作，加快处理速度、提升性能。")]),s._v(" "),n("p",[s._v("VNode 的创建是由 createElement 方法实现的。")]),s._v(" "),n("p",[s._v("欲知原理，推荐阅读："),n("a",{attrs:{href:"https://github.com/snabbdom/snabbdom",target:"_blank",rel:"noopener noreferrer"}},[s._v("snabbdom"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("diff & patch")])]),s._v(" "),n("p",[s._v("在实际代码中，会对新旧两棵树进行一个深度的遍历，每个节点都会有一个标记。每遍历到一个节点就把该节点和新的树进行对比，如果有差异就记录到一个对象中。即用 diff 算法比较差异，然后调用 patch 应用到真实 DOM 上去。patch 的过程即一个打补丁的过程。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734c5e39e625480?w=523&h=294&f=jpeg&s=12522",alt:""}})]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.im/post/5ad6182df265da23906c8627",target:"_blank",rel:"noopener noreferrer"}},[s._v("图片来源"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("diff 算法是一个交叉对比的过程，大致可以简要概括为：头头比较、尾尾比较、头尾比较、尾头比较。")]),s._v(" "),n("p",[s._v("入门级别 diff 详情推荐看此篇："),n("a",{attrs:{href:"https://juejin.im/post/5c4a76b4e51d4526e57da225#heading-9",target:"_blank",rel:"noopener noreferrer"}},[s._v("LINK"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734c64b994eca1b?w=920&h=680&f=png&s=9581",alt:""}})]),s._v(" "),n("p",[n("a",{attrs:{href:"%E8%AF%A6%E8%A7%A3vue%E7%9A%84diff%E7%AE%97%E6%B3%95"}},[s._v("图片来源")])]),s._v(" "),n("p",[s._v("注意：render函数返回的是 vdom，patch生成的才是真实DOM。")]),s._v(" "),n("h3",{attrs:{id:"三、响应式原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、响应式原理"}},[s._v("#")]),s._v(" 三、响应式原理")]),s._v(" "),n("p",[s._v("官方生图，高屋建瓴。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734c7443a967119?w=1200&h=750&f=png&s=21308",alt:""}})]),s._v(" "),n("p",[s._v("本瓜曾在"),n("a",{attrs:{href:"https://juejin.im/post/5d76167d5188251ecc40d2d2",target:"_blank",rel:"noopener noreferrer"}},[s._v("《简析 vue 的双向绑定原理》"),n("OutboundLink")],1),s._v("这篇文章写过，如今看又是一番心情。")]),s._v(" "),n("blockquote",[n("p",[s._v("当你把一个普通的 JavaScript 对象传入 Vue 实例作为 data 选项，Vue 将遍历此对象所有的 property，并使用 Object.defineProperty 把这些 property 全部转为 getter/setter。Object.defineProperty 是 ES5 中一个无法 shim 的特性，这也就是 Vue 不支持 IE8 以及更低版本浏览器的原因。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("发布订阅者模式（字节考题）")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("class emit {\n}\ncosnt eeee =  new emit()\neeee.on('aa' , function() { console.log(1)})\neeee.on('aa' , function() {console.log(2)})\neeee.emit('aa')\n//class emit{}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("// 要求手写发布者-订阅模式")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('class Subject{\n    constructor () {\n      this.observers =[]\n    }\n    add (observer) {\n      this.observers.push(observer)\n    }\n    notify () {\n      this.observers.map((item, index) => {\n          item.update()\n      })\n    }\n}\nclass Observer {\n    constructor (name) {\n        this.name = name\n    }\n    update () {\n        console.log("I`m " + this.name)\n    }\n}\nvar sub = new Subject()\nvar obs1 = new Observer("obs1")\nvar obs2  = new Observer("obs2")\nsub.add(obs1)\nsub.add(obs2)\nsub.notify() // I`m obs1   I`m obs2\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br")])]),n("p",[s._v("除了“发布者订阅模式”，你还知道哪些 js 设计模式？这里留个坑，以后再补，东西太多了......")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("Observe")])]),s._v(" "),n("p",[s._v("Observe 的功能就是用来监测数据的变化。它的作用是给对象的属性添加 getter 和 setter，用于依赖收集和派发更新：")]),s._v(" "),n("p",[s._v("这里贴一下源码片段，咱可以感受下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export class Observer {\n  value: any;\n  dep: Dep;\n  vmCount: number; // number of vms that has this object as root $data\n  constructor (value: any) {\n    this.value = value\n    this.dep = new Dep()\n    this.vmCount = 0\n    def(value, '__ob__', this)\n    ...\n  }\n  walk (obj: Object) {\n   ...\n  }\n  observeArray (items: Array<any>) {\n    ...\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("p",[s._v("有没有觉得和上面提到的“发布订阅者模式”中的相似。Observer 首先实例化 Dep 对象，接着通过执行 def 函数把自身实例添加到数据对象 value 的 "),n("strong",[s._v("ob")]),s._v(" 属性上。（def 函数是一个简单的对 Object.defineProperty 的封装）。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("Dep")])]),s._v(" "),n("p",[s._v("Dep 是整个 getter 依赖收集的核心。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734cf179ca8bec9?w=687&h=338&f=png&s=17326",alt:""}})]),s._v(" "),n("p",[s._v("由于 Watcher 是有多个的，所以需要用 Dep 收集变化之后集中管理，再通知到对应的 Watcher。由此也好理解 Dep 是依赖于 Watcher 的。")]),s._v(" "),n("p",[s._v("贴源码片段，感受一下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export default class Dep {\n  static target: ?Watcher;\n  id: number;\n  subs: Array<Watcher>;\n  constructor () {\n    this.id = uid++\n    this.subs = []\n  }\n  addSub (sub: Watcher) {\n    this.subs.push(sub)\n  }\n  removeSub (sub: Watcher) {\n    remove(this.subs, sub)\n  }\n  depend () {\n    if (Dep.target) {\n      Dep.target.addDep(this)\n    }\n  }\n  notify () {\n    // stabilize the subscriber list first\n    ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("Watcher")])]),s._v(" "),n("p",[s._v("贴源码片段，感受一二：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("export default class Watcher {\n  vm: Component;\n  expression: string;\n  cb: Function;\n  id: number;\n  deep: boolean;\n  user: boolean;\n  computed: boolean;\n  sync: boolean;\n  dirty: boolean;\n  active: boolean;\n  dep: Dep;\n  deps: Array<Dep>;\n  newDeps: Array<Dep>;\n  depIds: SimpleSet;\n  newDepIds: SimpleSet;\n  before: ?Function;\n  getter: Function;\n  value: any;\n  \n  constructor (\n    vm: Component,\n    expOrFn: string | Function,\n    cb: Function,\n    options?: ?Object,\n    isRenderWatcher?: boolean\n  ) {\n    this.vm = vm\n    if (isRenderWatcher) {\n      vm._watcher = this\n    }\n    vm._watchers.push(this)\n    // options\n   ...\n    // parse expression for getter\n   ...\n  }\n  get () {\n    pushTarget(this)\n    ...\n  }\n  addDep (dep: Dep) {\n    const id = dep.id\n    ...\n  }\n  cleanupDeps () {\n    ...\n  }\n  // ...\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br"),n("span",{staticClass:"line-number"},[s._v("33")]),n("br"),n("span",{staticClass:"line-number"},[s._v("34")]),n("br"),n("span",{staticClass:"line-number"},[s._v("35")]),n("br"),n("span",{staticClass:"line-number"},[s._v("36")]),n("br"),n("span",{staticClass:"line-number"},[s._v("37")]),n("br"),n("span",{staticClass:"line-number"},[s._v("38")]),n("br"),n("span",{staticClass:"line-number"},[s._v("39")]),n("br"),n("span",{staticClass:"line-number"},[s._v("40")]),n("br"),n("span",{staticClass:"line-number"},[s._v("41")]),n("br"),n("span",{staticClass:"line-number"},[s._v("42")]),n("br"),n("span",{staticClass:"line-number"},[s._v("43")]),n("br"),n("span",{staticClass:"line-number"},[s._v("44")]),n("br"),n("span",{staticClass:"line-number"},[s._v("45")]),n("br"),n("span",{staticClass:"line-number"},[s._v("46")]),n("br"),n("span",{staticClass:"line-number"},[s._v("47")]),n("br"),n("span",{staticClass:"line-number"},[s._v("48")]),n("br"),n("span",{staticClass:"line-number"},[s._v("49")]),n("br"),n("span",{staticClass:"line-number"},[s._v("50")]),n("br")])]),n("p",[s._v("Watcher 会通知视图的更新 "),n("strong",[s._v("re-render")]),s._v("。")]),s._v(" "),n("p",[s._v("常见视图更新场景：")]),s._v(" "),n("ol",[n("li",[s._v("数据变 → 使用数据的视图变（对应：负责敦促视图更新的render-watcher）")]),s._v(" "),n("li",[s._v("数据变 → 使用数据的计算属性变 → 使用计算属性的视图变（对应：执行敦促计算属性更新的computed-watcher）")]),s._v(" "),n("li",[s._v("数据变 → 开发者主动注册的watch回调函数执行（对应：用户注册的普通watcher（watch-api或watch属性））")])]),s._v(" "),n("h3",{attrs:{id:"四、组件编译"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、组件编译"}},[s._v("#")]),s._v(" 四、组件编译")]),s._v(" "),n("p",[s._v("组件的思想也是 Vue 核心，将组件编译为 vdom ，则也是一重难点！")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734c8e6da8ad3e8?w=696&h=772&f=png&s=41073",alt:""}})]),s._v(" "),n("p",[s._v("你可以发现在 Vue 这一节有很多引用的图，其实它们有的相似，更多的是侧重点不同，建议都可按照流程图理解理解，做到融会贯通。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("组件")])]),s._v(" "),n("p",[s._v("官方示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 定义一个名为 button-counter 的新组件\nVue.component('button-counter', {\n  data: function () {\n    return {\n      count: 0\n    }\n  },\n  template: '<button v-on:click=\"count++\">You clicked me {{ count }} times.</button>'\n})\n\n<div id=\"components-demo\">\n  <button-counter></button-counter>\n</div>\n\nnew Vue({ el: '#components-demo' })\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("组件还涉及：组件之间的通信、插槽、动态组件等内容。后续再表（OS:\n这是自己给自己挖了个多大的坑）。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("parse")])]),s._v(" "),n("p",[s._v("编译过程首先就是对模板做解析，生成 AST，它是一种抽象语法树，是对源代码的抽象语法结构的树状表现形式。在很多编译技术中，如 babel 编译 ES6 的代码都会先生成 AST。这个过程会用到大量的正则表达式对字符串解析，"),n("strong",[s._v("源码很难读。")])]),s._v(" "),n("p",[s._v("但是我们需要知道的是 start、end、comment、chars 四大函数。")]),s._v(" "),n("p",[s._v("对于普通标签的处理流程大致：")]),s._v(" "),n("ol",[n("li",[s._v("识别开始标签，生成匹配结构match。")]),s._v(" "),n("li",[s._v("处理attrs，将数组处理成 {name:'xxx',value:'xxx'}")]),s._v(" "),n("li",[s._v("生成astElement，处理for,if和once的标签。")]),s._v(" "),n("li",[s._v("识别结束标签，将没有闭合标签的元素一起处理。")]),s._v(" "),n("li",[s._v("建立父子关系，最后再对astElement做所有跟Vue 属性相关对处理。slot、component等等。")])]),s._v(" "),n("p",[s._v("参考阅读："),n("a",{attrs:{href:"https://juejin.im/post/5d01b954f265da1bbf69172e",target:"_blank",rel:"noopener noreferrer"}},[s._v("Vue parse之 从template到astElement 源码详解"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("optimize")])]),s._v(" "),n("p",[s._v("当我们的模板 template 经过 parse 过程后，会输出生成 AST 树，那么接下来我们需要对这颗树做优化 —— optimize。")]),s._v(" "),n("p",[s._v("optimize 中最重要的是标记静态根（markStaticRoots ）、静态节点（markStatic ）。如果是静态节点则它们生成的DOM永远不需要改变，这让模板的更新更搞笑（不变的节点不用更新）。")]),s._v(" "),n("blockquote",[n("p",[s._v("问题：为什么子节点的元素类型是静态文本类型，就会给 optimize 过程加大成本呢？\n首先来分析一下，之所以在 optimize 过程中做这个静态根节点的优化，目的是什么，成本是什么？")]),s._v(" "),n("p",[s._v("目的：在 patch 过程中，减少不必要的比对过程，加速更新。")]),s._v(" "),n("p",[s._v("成本：a. 需要维护静态模板的存储对象。b. 多层render函数调用。")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.im/post/5e7595c75188252c1f22524a#heading-5",target:"_blank",rel:"noopener noreferrer"}},[s._v("推荐阅读"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("codegen")])]),s._v(" "),n("p",[s._v("编译的最后一步就是把优化后的 AST 树转换成可执行的代码，即在 codegen 环节。")]),s._v(" "),n("p",[s._v("主要步骤（调用函数）：")]),s._v(" "),n("ol",[n("li",[s._v("generate")]),s._v(" "),n("li",[s._v("genIf")]),s._v(" "),n("li",[s._v("genFor")]),s._v(" "),n("li",[s._v("genData & genChildren")])]),s._v(" "),n("p",[s._v("此节考的不多，仅做了解。了解更多，得看源码。")]),s._v(" "),n("h3",{attrs:{id:"五、常用补充"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、常用补充"}},[s._v("#")]),s._v(" 五、常用补充")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("keep-alive（常考）")])]),s._v(" "),n("blockquote",[n("p",[s._v("keepalive 是 Vue 内置的一个组件，可以使被包含的组件保留状态，或避免重新渲染 。也就是所谓的组件缓存。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("v-if、v-show、v-for")])]),s._v(" "),n("p",[s._v("三个高频子问题：")]),s._v(" "),n("ol",[n("li",[s._v("v-if、v-show 区别？")])]),s._v(" "),n("p",[s._v("答：v-if 相当于 display; v-show 相当于 visibility; 前者会控制是否创建，后者仅控制是否隐藏显示。")]),s._v(" "),n("ol",{attrs:{start:"2"}},[n("li",[s._v("v-if、v-for 为什么不能放一起用？")])]),s._v(" "),n("p",[s._v("答：因为 v-for 优先级比 v-if 高，所以在每次重新渲染的时候会先遍历整个列表，再进行 if 判断是否展示，消耗性能。")]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[s._v("v-for 中能用 index 作 key 吗？")])]),s._v(" "),n("p",[s._v("答：key 是 diff 算法中用来对比的，用 index 作为 key 并未唯一识别，当插入元素时，key 也会变化。index 作为 key，只适用于不依赖子组件状态或临时 DOM 状态 (例如：表单输入值) 的列表渲染输出（官网说明）。")]),s._v(" "),n("p",[s._v("本瓜这里不做细答，想了解更多请自行解决。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("自定义指令")])]),s._v(" "),n("p",[s._v("Vue 中的混入（Minxin）、自定义指令（directive）、过滤器（filter）有共通之处，在注册的时候，需要平衡局部注册和全局注册的优劣。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("transition")])]),s._v(" "),n("p",[s._v("本瓜读源码的过程中，发现源码中有较大的篇幅在描述关于"),n("strong",[s._v("transition")]),s._v("。在官方文档中，transition 也是作为独立的重要一节来说明。"),n("a",{attrs:{href:"https://cn.vuejs.org/v2/guide/transitions.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("进入/离开 & 列表过渡"),n("OutboundLink")],1),s._v("，Vue 动画&过渡，是容易忽视的点。")]),s._v(" "),n("h3",{attrs:{id:"六、全家桶"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、全家桶"}},[s._v("#")]),s._v(" 六、全家桶")]),s._v(" "),n("p",[s._v("自从用上了 Vue 全家桶，腿也不疼了，腰也不酸了。咦，一口气写五个页面，妈妈再也不用担心我的学习了。（好像有点串广告了......）")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("Vue-Router")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方的路由管理器"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("分为两种模式：hash 和 history")]),s._v(" "),n("ul",[n("li",[s._v("默认 hash 模式，通过加锚点的方式")]),s._v(" "),n("li",[s._v("history 利用 history.pushState API实现")])]),s._v(" "),n("p",[s._v("原生：\nHTML5引入了 history.pushState() 和 history.replaceState() 方法，它们分别可以添加和修改历史记录条目。这些方法通常与window.onpopstate 配合使用。"),n("a",{attrs:{href:"https://www.renfei.org/blog/html5-introduction-3-history-api.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("详情链接"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("Vuex")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://vuex.vuejs.org/zh/guide/",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方状态管理"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("由以下几部分核心组成：")]),s._v(" "),n("ol",[n("li",[s._v("state：数据状态；")]),s._v(" "),n("li",[s._v("mutations：更改状态（计算状态）；")]),s._v(" "),n("li",[s._v("getters：将state中的某个状态进行过滤然后获取新的状态；")]),s._v(" "),n("li",[s._v("actions：执行多个mutation，它可以进行异步操作（async ）；")]),s._v(" "),n("li",[s._v("modules：把状态和管理规则分类来装，让目录结构更清晰；")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("VueCLI")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://cli.vuejs.org",target:"_blank",rel:"noopener noreferrer"}},[s._v("官方脚手架"),n("OutboundLink")],1)]),s._v(" "),n("ul",[n("li",[s._v("VueCLI4中很重要的是 vue.config.js 这个文件的配置。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("VuePress")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://vuepress.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"}},[s._v("静态网站生成器"),n("OutboundLink")],1)]),s._v(" "),n("ul",[n("li",[s._v("采用 Vue + webpack，可以在 Markdown 中使用 Vue 组件，页面简洁大方，与 Vue 官网风格统一。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("NuxtJS")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://www.nuxtjs.cn",target:"_blank",rel:"noopener noreferrer"}},[s._v("服务端渲染"),n("OutboundLink")],1)]),s._v(" "),n("h3",{attrs:{id:"七、webpack"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#七、webpack"}},[s._v("#")]),s._v(" 七、webpack")]),s._v(" "),n("p",[s._v("只要你做前端有两年经验左右，那一样就得要求自己掌握一款打包工具了。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("webpack 原理")])]),s._v(" "),n("p",[s._v("官方解释：")]),s._v(" "),n("blockquote",[n("p",[s._v("webpack 是一个现代 JavaScript 应用程序的静态模块打包工具。当 webpack 处理应用程序时，它会在内部构建一个 依赖图(dependency graph)，此依赖图会映射项目所需的每个模块，并生成一个或多个_bundle_。")])]),s._v(" "),n("p",[s._v("核心概念：")]),s._v(" "),n("ol",[n("li",[s._v("Entry：入口，Webpack 执行构建的第一步将从 Entry 开始，可抽象成输入。")]),s._v(" "),n("li",[s._v("Module：模块，在 Webpack 里一切皆模块，一个模块对应着一个文件。Webpack 会从配置的 Entry 开始递归找出所有依赖的模块。")]),s._v(" "),n("li",[s._v("Chunk：代码块，一个 Chunk 由多个模块组合而成，用于代码合并与分割。")]),s._v(" "),n("li",[s._v("Loader：模块转换器，用于把模块原内容按照需求转换成新内容。")]),s._v(" "),n("li",[s._v("Plugin：扩展插件，在 Webpack 构建流程中的特定时机会广播出对应的事件，插件可以监听这些事件的发生，在特定时机做对应的事情。")])]),s._v(" "),n("p",[s._v("功能：")]),s._v(" "),n("p",[s._v("代码转换、文件优化、代码分割、模块合并、自动刷新、代码校验、自动发布。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("优化打包速度")])]),s._v(" "),n("ol",[n("li",[s._v("搭载 webpack-parallel-uglify-plugin 插件，加速“压缩JS=>编译成 AST=>还原JS”的过程。")]),s._v(" "),n("li",[s._v("使用 HappyPack 提升 loader 解析速度。")]),s._v(" "),n("li",[s._v("使用 DLLPlugin 和 DLLReferencePlugin 插件，提前打包。")]),s._v(" "),n("li",[s._v("tree-shaking 用来消除无用模块。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("AMD、CMD")])]),s._v(" "),n("p",[s._v("前端模块化有四种规范：CommonJS、AMD、CMD、ES6。")]),s._v(" "),n("ol",[n("li",[s._v("AMD（异步模块定义）")]),s._v(" "),n("li",[s._v("CMD（通用模块定义）")])]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("AMD（异步模块定义）")]),s._v(" "),n("th",[s._v("CMD（通用模块定义）")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("速度快")]),s._v(" "),n("td",[s._v("性能较差")])]),s._v(" "),n("tr",[n("td",[s._v("会浪费资源")]),s._v(" "),n("td",[s._v("只有真正需要才加载依赖")])]),s._v(" "),n("tr",[n("td",[s._v("预先加载所有的依赖，直到使用的时候才执行")]),s._v(" "),n("td",[s._v("直到使用的时候才定义依赖")])])])]),s._v(" "),n("ol",{attrs:{start:"3"}},[n("li",[n("p",[s._v("Node.js是commonJS规范的主要实践者：module、"),n("strong",[s._v("module.exports（exports）")]),s._v("、"),n("strong",[s._v("require")]),s._v("、global。")])]),s._v(" "),n("li",[n("p",[s._v("ES6 在语言标准的层面上，实现了模块功能，主要由两个命令构成："),n("strong",[s._v("export")]),s._v("和"),n("strong",[s._v("import")]),s._v("。export命令用于规定模块的对外接口，import命令用于输入其他模块提供的功能。")])])]),s._v(" "),n("p",[s._v("问：比较 import 和 require 的区别？")]),s._v(" "),n("table",[n("thead",[n("tr",[n("th",[s._v("import")]),s._v(" "),n("th",[s._v("require")])])]),s._v(" "),n("tbody",[n("tr",[n("td",[s._v("ES6标准中的模块化解决方案")]),s._v(" "),n("td",[s._v("是node中遵循CommonJS规范的模块化解决方案")])]),s._v(" "),n("tr",[n("td",[s._v("不支持动态引入")]),s._v(" "),n("td",[s._v("支持动态引入")])]),s._v(" "),n("tr",[n("td",[s._v("是关键词")]),s._v(" "),n("td",[s._v("不是关键词")])]),s._v(" "),n("tr",[n("td",[s._v("编译时加载，必须放在模块顶部")]),s._v(" "),n("td",[s._v("运行时加载，理论上来说放在哪里都可以")])]),s._v(" "),n("tr",[n("td",[s._v("性能较好")]),s._v(" "),n("td",[s._v("性能较差")])]),s._v(" "),n("tr",[n("td",[s._v("实时绑定方式，即导入和导出的值都指向同一个内存地")]),s._v(" "),n("td",[s._v("导出时是值拷贝，就算导出的值变化了，导入的值也不会变化")])]),s._v(" "),n("tr",[n("td",[s._v("会编译成require/exports来执行")]),s._v(" "),n("td",[s._v("-")])])])]),s._v(" "),n("p",[s._v("更多："),n("a",{attrs:{href:"https://juejin.im/post/5aaa37c8f265da23945f365c",target:"_blank",rel:"noopener noreferrer"}},[s._v("前端模块化：CommonJS,AMD,CMD,ES6"),n("OutboundLink")],1)]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("实现plugin插件（腾讯WXG考点）")])]),s._v(" "),n("ol",[n("li",[s._v("创建 plugins/demo-plugin.js 文件；")]),s._v(" "),n("li",[s._v("传递参数 Options；")]),s._v(" "),n("li",[s._v("通过 Compilation 写入文件；")]),s._v(" "),n("li",[s._v("管理 Warnings 和 Errors")])]),s._v(" "),n("p",[n("a",{attrs:{href:"https://juejin.im/post/5cc6b457518825634d444365",target:"_blank",rel:"noopener noreferrer"}},[s._v("从零实现一个 Webpack Plugin"),n("OutboundLink")],1)]),s._v(" "),n("h2",{attrs:{id:"串联四-你最喜欢什么算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#串联四-你最喜欢什么算法"}},[s._v("#")]),s._v(" 串联四：你最喜欢什么算法？")]),s._v(" "),n("p",[s._v("其实本瓜想回答：我最喜欢减法！因为幸福生活需要用减法。😄")]),s._v(" "),n("p",[s._v("算法这一个 part 也已久远，既然逃不掉，那就正面挑战它！其实也没那么难。")]),s._v(" "),n("p",[s._v("一图胜万言\n"),n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734ba39822bcd7f?w=664&h=532&f=png&s=38129",alt:""}})]),s._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"#999"}},[s._v("原创脑图，转载请说明出处")])])]),s._v(" "),n("p",[s._v("串联知识点：数据结构、基础算法、排序算法、进阶算法。")]),s._v(" "),n("p",[s._v("串联记忆：")]),s._v(" "),n("p",[n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("算法算法我不怕")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("数据结构打趴下")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("遍历排序我最溜")])]),n("br"),s._v(" "),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("指针动态贪心刷")])])]),s._v(" "),n("h3",{attrs:{id:"一、数据结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、数据结构"}},[s._v("#")]),s._v(" 一、数据结构")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("队列")])]),s._v(" "),n("blockquote",[n("p",[s._v("先入先出。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("栈")])]),s._v(" "),n("blockquote",[n("p",[s._v("先入后出。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("堆")])]),s._v(" "),n("p",[s._v("堆通常是一个可以被看做一棵树的数组对象。")]),s._v(" "),n("p",[s._v("堆总是满足下列性质：")]),s._v(" "),n("ol",[n("li",[s._v("堆中某个节点的值总是不大于或不小于其父节点的值；")]),s._v(" "),n("li",[s._v("堆总是一棵完全二叉树。")])]),s._v(" "),n("ul",[n("li",[s._v("完全二叉树：在一颗二叉树中，若除最后一层外的其余层都是满的，并且最后一层要么是满的，要么在右边缺少连续若干节点，则此二叉树为完全二叉树（Complete Binary Tree）—— wiki。")])]),s._v(" "),n("p",[s._v("（本瓜曾被拷问过这个点，大厂就是会考《数据结构》，别逃避，出来混迟早是要还的😭）。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("链表")])]),s._v(" "),n("ul",[n("li",[s._v("循环列表（考点）")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 循环链表\nfunction Node(element){\n    this.element = element;\n    this.prev = null;\n    this.next = null;\n}\nfunction display(){\n    var current = this.head;\n    //检查头节点当循环到头节点时退出循环\n    while(!(current.next == null) && !(current.next.element=='head')){\n        print(current.next.element);\n        current = current.next;\n    }\n}\nfunction Llist(){\n    this.head = new Node('head');\n    this.head.next = this.head;\n    this.find = find;\n    this.insert = insert;\n    this.display = display;\n    this.findPrevious = findPrevious;\n    this.remove = remove;\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br")])]),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("哈希")])]),s._v(" "),n("blockquote",[n("p",[s._v("散列函数（英语：Hash function）又称散列算法、哈希函数。以 Key:Value 的方式存储数据。")])]),s._v(" "),n("p",[s._v("哈希表最大的特点是可以快速定位到要查找的数据，查询的时间复杂度接近O(1)。本瓜建议大家可以把这里所有的数据结构的“增删改查”操作的时间复杂度都理一下，也是会被考的。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("时间复杂度、空间复杂度")])]),s._v(" "),n("p",[s._v("简单理解：")]),s._v(" "),n("ol",[n("li",[s._v("循环的次数写成 n 的表达式，就是时间复杂度。")]),s._v(" "),n("li",[s._v("申请的变量数量写成 n 的表达式，就是空间复杂度。")])]),s._v(" "),n("p",[s._v("时间复杂度更多重要一点，常见的时间复杂度：O(1)、O(n)、O(log"),n("sup",[s._v("n")]),s._v(")、O(n"),n("sup",[s._v("2")]),s._v(")。"),n("strong",[s._v("本瓜小TIP")]),s._v("：面试/笔试如果不知道怎么算，就在这里面猜吧。实在不行就答：O(n) ~ O(n"),n("sup",[s._v("2")]),s._v(") 之间，大概率不会错🐶。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("树的遍历（广度、深度）")])]),s._v(" "),n("p",[s._v("广度优先遍历（BFS）：")]),s._v(" "),n("p",[s._v("需要用到队列（Queue）来存储节点对象,队列的特点就是先进先出。"),n("a",{attrs:{href:"https://www.cnblogs.com/xiaolovewei/p/7763867.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("示例"),n("OutboundLink")],1)]),s._v(" "),n("p",[s._v("深度优先遍历（DFS）：")]),s._v(" "),n("ol",[n("li",[s._v("前序（根结点 -> 左子树 -> 右子树）")]),s._v(" "),n("li",[s._v("中序（左子树 -> 根结点 -> 右子树）")]),s._v(" "),n("li",[s._v("后序（左子树 -> 右子树 -> 根结点）")])]),s._v(" "),n("h3",{attrs:{id:"二、基础算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、基础算法"}},[s._v("#")]),s._v(" 二、基础算法")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("递归思想")])]),s._v(" "),n("ul",[n("li",[s._v("著名的斐波那契数列，你要知道！")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function result(){\n    if(n==1||n==2){\n        return 1\n    }\n    return reslt(n-2)+result(n-1)\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[s._v("函数柯里化，你也要知道！")])]),s._v(" "),n("blockquote",[n("p",[s._v("函数柯里化：是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。—— wiki")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    // 普通方式\n    var add1 = function(a, b, c){\n        return a + b + c;\n    }\n    // 柯里化\n    var add2 = function(a) {\n        return function(b) {\n            return function(c) {\n                return a + b + c;\n            }\n        }\n    }\n    // demo\n    var foo = function(x) {\n        return function(y) {\n            return x + y\n        }\n    }\n    foo(3)(4)       // 7\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("这样处理参数，可以直接追加，而不需要初始传参就写完全。这里只是浅谈，更多请自行探索。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("二分法")])]),s._v(" "),n("p",[s._v("要求手写二分法，实在不行，能默写也可以啊！")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('// 二分法：先排序，再找目标\nfunction binary_search(arr,target) {\n    let min=0\n    let max=arr.length-1\n    while(min<=max){\n    \tlet mid=Math.ceil((min+max)/2)\n    \tif(arr[mid]==target){\n    \t\treturn mid\n    \t}else if(arr[mid]>target){\n    \t\tmax=mid-1\n    \t}else if(arr[mid]<target){\n    \t\tmin=mid+1\n    \t}\n    }\n\treturn "null"\n}\nconsole.log(binary_search([1,5,7,19,88],19))//3\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br")])]),n("h3",{attrs:{id:"三、排序算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、排序算法"}},[s._v("#")]),s._v(" 三、排序算法")]),s._v(" "),n("p",[s._v("排序是比较常用也比较重要的一块，此处并未全列出。仅强调"),n("strong",[s._v("快排")]),s._v("和"),n("strong",[s._v("冒泡")]),s._v("，会用双循环也行啊。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("快速排序")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 快排：选取基准，比基准大的放右边，比基准小的放左边，然后两边用递归\nfunction quickSort(arr, i, j) {\n  if(i < j) {\n    let left = i;\n    let right = j;\n    let pivot = arr[left];\n    while(i < j) {\n      while(arr[j] >= pivot && i < j) {  // 从后往前找比基准小的数\n        j--;\n      }\n      if(i < j) {\n        arr[i++] = arr[j];\n      }\n      while(arr[i] <= pivot && i < j) {  // 从前往后找比基准大的数\n        i++;\n      }\n      if(i < j) {\n        arr[j--] = arr[i];\n      }\n    }\n    arr[i] = pivot;\n    quickSort(arr, left, i-1);\n    quickSort(arr, i+1, right);\n    return arr;\n  }\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br")])]),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("冒泡排序")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 冒泡：双层循环\n    var arr=[10,20,50,100,40,200];\n    for(var i=0;i<arr.length-1;i++){\n        for(var j=0;j<arr.length-1-i;j++){\n        if(arr[j]>arr[j+1]){\n            var temp=arr[j]\n            arr[j]=arr[j+1]\n            arr[j+1]=temp\n        }\n    }\n    }\n    console.log(arr)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br")])]),n("h3",{attrs:{id:"四、进阶算法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、进阶算法"}},[s._v("#")]),s._v(" 四、进阶算法")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("双指针")])]),s._v(" "),n("blockquote",[n("p",[s._v("看到“有序”和“数组”。立刻把双指针法调度进你的大脑内存。普通双指针走不通，立刻想对撞指针！")])]),s._v(" "),n("p",[s._v("示例：合并两个有序数组（双指针解法）")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("示例: 输入:\nnums1 = [1,2,3,0,0,0], m = 3\nnums2 = [2,5,6], n = 3\n输出: [1,2,2,3,5,6]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("/**\n * @param {number[]} nums1\n * @param {number} m\n * @param {number[]} nums2\n * @param {number} n\n * @return {void} Do not return anything, modify nums1 in-place instead.\n */\nconst merge = function(nums1, m, nums2, n) {\n    // 初始化两个指针的指向，初始化 nums1 尾部索引k\n    let i = m - 1, j = n - 1, k = m + n - 1\n    // 当两个数组都没遍历完时，指针同步移动\n    while(i >= 0 && j >= 0) {\n        // 取较大的值，从末尾往前填补\n        if(nums1[i] >= nums2[j]) {\n            nums1[k] = nums1[i] \n            i-- \n            k--\n        } else {\n            nums1[k] = nums2[j] \n            j-- \n            k--\n        }\n    }\n    \n    // nums2 留下的情况，特殊处理一下 \n    while(j>=0) {\n        nums1[k] = nums2[j]  \n        k-- \n        j--\n    }\n};\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br")])]),n("p",[s._v("高级！")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("动态规划")])]),s._v(" "),n("blockquote",[n("p",[s._v("动态规划的思想就是把一个大的问题进行拆分，细分成一个个小的子问题，且能够从这些小的子问题的解当中推导出原问题的解。")])]),s._v(" "),n("p",[s._v("同时需要满足以下两个重要性质才能进行动态规划:")]),s._v(" "),n("ol",[n("li",[s._v("最优子结构性")]),s._v(" "),n("li",[s._v("子问题重叠性质")])]),s._v(" "),n("p",[s._v("动态规划实例：斐波拉契数列（上文有提到）")]),s._v(" "),n("p",[s._v("斐波拉契数列：采用递归，虽然代码很简洁，但是明显随着次数的增加，导致递归树增长的非常庞大，耗时较久。")]),s._v(" "),n("p",[s._v("用动态规划实现斐波拉契数列，代码如下")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("    function feiBoLaQie(n) {\n        //创建一个数组，用于存放斐波拉契数组的数值\n        let val = [];\n        //将数组初始化，将数组的每一项都置为0\n        for(let i =0 ;i<=n;i++){\n            val[i] = 0;\n        }\n        if (n==1 || n==2){\n            return 1;\n        } else{\n            val[1] = 1;\n            val[2] = 2;\n            for (let j =3; j<=n;j++){\n                val[j] = val[j-1] + val[j-2];\n            }\n        }\n        return val[n-1];\n    }\n    console.log(feiBoLaQie(40));//102334155\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("通过数组 val 中保存了中间结果， 如果要计算的斐波那契数是 1 或者 2， 那么 if 语句会返回 1。 否则，数值 1 和 2 将被保存在 val 数组中 1 和 2 的位置。")]),s._v(" "),n("p",[s._v("循环将会从 3 到输入的参数之间进行遍历， 将数组的每个元素赋值为前两个元素之和， 循环结束， 数组的最后一个元素值即为最终计算得到的斐波那契数值， 这个数值也将作为函数的返回值。")]),s._v(" "),n("p",[s._v("动态规划解决速度更快。")]),s._v(" "),n("ul",[n("li",[n("a",{attrs:{href:"https://www.cnblogs.com/star-wind/p/6893212.html",target:"_blank",rel:"noopener noreferrer"}},[s._v("参考阅读"),n("OutboundLink")],1)]),s._v(" "),n("li",[n("a",{attrs:{href:"https://blog.csdn.net/m0_37686205/article/details/90182779",target:"_blank",rel:"noopener noreferrer"}},[s._v("更多动态规划示例"),n("OutboundLink")],1)])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("贪心算法")])]),s._v(" "),n("blockquote",[n("p",[s._v("贪心算法遵循一种近似解决问题的技术，期盼通过每个阶段的局部最优选择（当前最好的解），从而达到全局的最优（全局最优解）。")])]),s._v(" "),n("p",[s._v("注：贪心得到结果是一个可以接受的解，不一定总是得到最优的解。")]),s._v(" "),n("p",[s._v("示例：最少硬币找零问题")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("是给出要找零的钱数，以及可以用硬币的额度数量，找出有多少种找零方法。\n如：美国面额硬币有：1，5，10，25\n我们给36美分的零钱，看能得怎样的结果？\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function MinCoinChange(coins){\n    var coins = coins;\n    var cache = {};\n    this.makeChange = function(amount){\n        var change = [], total = 0;\n        for(var i = coins.length; i >= 0; i--){\n            var coin = coins[i];\n            while(total + coin <= amount){\n                change.push(coin);\n                total += coin;\n            }\n        }\n        return change;\n    }\n}\nvar minCoinChange = new MinCoinChange([1, 5, 10, 25]);\nminCoinChange.makeChange(36);\n//[25, 10, 1] 即一个25美分、一个10美分、一个1美分\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br")])]),n("h2",{attrs:{id:"串联五-web-安全你知道那些"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#串联五-web-安全你知道那些"}},[s._v("#")]),s._v(" 串联五：web 安全你知道那些？")]),s._v(" "),n("p",[s._v("一图胜万言\n"),n("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2020/7/14/1734bd0a618de89e?w=519&h=430&f=png&s=27865",alt:""}})]),s._v(" "),n("ul",[n("li",[n("span",{staticStyle:{color:"#999"}},[s._v("原创脑图，转载请说明出处")])])]),s._v(" "),n("p",[s._v("串联知识点：跨域、XSS（跨站脚本攻击）、CRFS（跨站请求伪造）、SQL 注入、DNS 劫持、HTTP 劫持。")]),s._v(" "),n("p",[s._v("串联记忆："),n("strong",[n("span",{staticStyle:{color:"orange"}},[s._v("三跨两劫持一注入")])])]),s._v(" "),n("h3",{attrs:{id:"一、跨域"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、跨域"}},[s._v("#")]),s._v(" 一、跨域")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("跨域定义")])]),s._v(" "),n("blockquote",[n("p",[s._v("当一个请求url的协议、域名、端口三者之间任意一个与当前页面url不同即为跨域。")])]),s._v(" "),n("p",[n("strong",[s._v("跨域限制")]),s._v(" 是浏览器的一种保护机制，若跨域，则：")]),s._v(" "),n("ol",[n("li",[s._v("无法读取非同源网页的 Cookie、LocalStorage 和 IndexedDB。")]),s._v(" "),n("li",[s._v("无法接触非同源网页的 DOM。")]),s._v(" "),n("li",[s._v("无法向非同源地址发送 AJAX 请求")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("跨域解决")])]),s._v(" "),n("p",[s._v("跨域解决：")]),s._v(" "),n("ol",[n("li",[s._v("JSONP；")]),s._v(" "),n("li",[s._v("CORS（跨域资源分享）；")])]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("// 普通跨域请求：只需服务器端设置 Access-Control-Allow-Origin。\n// 带cookie跨域请求：前后端都需要进行设置。\n\n// 如前端在 axios 中设置\naxios.defaults.withCredentials = true\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ol",{attrs:{start:"3"}},[n("li",[s._v("vue项目 设置 proxy 代理；")]),s._v(" "),n("li",[s._v("nginx 代理；")]),s._v(" "),n("li",[s._v("设置document.domain解决无法读取非同源网页的 Cookie问题；")]),s._v(" "),n("li",[s._v("跨文档通信 API：window.postMessage()；")])]),s._v(" "),n("h3",{attrs:{id:"二、xss"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、xss"}},[s._v("#")]),s._v(" 二、XSS")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("XSS 原理")])]),s._v(" "),n("blockquote",[n("p",[s._v("XSS的原理是WEB应用程序混淆了用户提交的数据和JS脚本的代码边界，导致浏览器把用户的输入当成了JS代码来执行。XSS的攻击对象是浏览器一端的普通用户。")])]),s._v(" "),n("p",[s._v("示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v('<input type="text" value="<%= getParameter("keyword") %>">\n<button>搜索</button>\n<div>\n  您搜索的关键词是：<%= getParameter("keyword") %>\n</div>\n')])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("当浏览器请求")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("http://xxx/search?keyword=\"><script>alert('XSS');<\/script>\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("p",[s._v("恶意代码，就会其执行")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("反射型 XSS")])]),s._v(" "),n("p",[s._v("存储型 XSS 的攻击步骤：")]),s._v(" "),n("ol",[n("li",[s._v("攻击者将恶意代码提交到目标网站的数据库中。")]),s._v(" "),n("li",[s._v("用户打开目标网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器。")]),s._v(" "),n("li",[s._v("用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。")]),s._v(" "),n("li",[s._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。")])]),s._v(" "),n("p",[s._v("这种攻击常见于带有用户保存数据的网站功能，如论坛发帖、商品评论、用户私信等。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("存储型 XSS")])]),s._v(" "),n("p",[s._v("反射型 XSS 的攻击步骤：")]),s._v(" "),n("ol",[n("li",[s._v("攻击者构造出特殊的 URL，其中包含恶意代码。")]),s._v(" "),n("li",[s._v("用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器。")]),s._v(" "),n("li",[s._v("用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行。")]),s._v(" "),n("li",[s._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。")])]),s._v(" "),n("p",[s._v("反射型 XSS 跟存储型 XSS 的区别是：存储型 XSS 的恶意代码存在数据库里，反射型 XSS 的恶意代码存在 URL 里。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("DOM型 XSS")])]),s._v(" "),n("p",[s._v("DOM 型 XSS 的攻击步骤：")]),s._v(" "),n("ol",[n("li",[s._v("攻击者构造出特殊的 URL，其中包含恶意代码。")]),s._v(" "),n("li",[s._v("用户打开带有恶意代码的 URL。")]),s._v(" "),n("li",[s._v("用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行。")]),s._v(" "),n("li",[s._v("恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作。")])]),s._v(" "),n("p",[s._v("DOM 型 XSS 跟前两种 XSS 的区别：DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞，而其他两种 XSS 都属于服务端的安全漏洞。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("XSS 防御")])]),s._v(" "),n("ol",[n("li",[s._v("输入过滤，不要相信任何客户端的输入；")]),s._v(" "),n("li",[s._v("对 HTML 做充分转义；")]),s._v(" "),n("li",[s._v("设置 HTTP-only：禁止 JavaScript 读取某些敏感 Cookie，攻击者完成 XSS 注入后也无法窃取此 Cookie。")]),s._v(" "),n("li",[s._v("验证码：防止脚本冒充用户提交危险操作。")]),s._v(" "),n("li",[s._v("谨慎使用：.innerHTML、.outerHTML、document.write()；")])]),s._v(" "),n("h3",{attrs:{id:"三、csrf"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、csrf"}},[s._v("#")]),s._v(" 三、CSRF")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("CSRF 原理")])]),s._v(" "),n("blockquote",[n("p",[s._v("跨站请求伪造：攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击网站发送跨站请求。利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击的网站执行某项操作的目的。")])]),s._v(" "),n("p",[s._v("曾在 09 年发生了著名的"),n("a",{attrs:{href:"https://www.theregister.com/2009/10/02/google_web_attack_protection/",target:"_blank",rel:"noopener noreferrer"}},[s._v("“谷歌邮箱窃取”"),n("OutboundLink")],1),s._v("事件，利用的就是 “CSRF”。")]),s._v(" "),n("p",[s._v("主要流程：")]),s._v(" "),n("ol",[n("li",[s._v("受害者登录a.com，并保留了登录凭证（Cookie）。")]),s._v(" "),n("li",[s._v("攻击者引诱受害者访问了b.com。")]),s._v(" "),n("li",[s._v("b.com 向 a.com 发送了一个请求：a.com/act=xx。浏览器会默认携带a.com的Cookie。")]),s._v(" "),n("li",[s._v("a.com接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求。")]),s._v(" "),n("li",[s._v("a.com以受害者的名义执行了act=xx。")]),s._v(" "),n("li",[s._v("攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让a.com执行了自己定义的操作。")])]),s._v(" "),n("p",[s._v("注：攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用 Cookie 中的信息。")]),s._v(" "),n("p",[s._v("这告诉我们冲浪的时候不能随便点链接，是有风险哒。")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("CSRF 防御")])]),s._v(" "),n("p",[s._v("防御策略：")]),s._v(" "),n("ol",[n("li",[s._v("自动防御策略：同源检测（Origin 和 Referer 验证）。")]),s._v(" "),n("li",[s._v("主动防御措施：Token验证 或者 双重Cookie验证 以及配合Samesite Cookie。")]),s._v(" "),n("li",[s._v("保证页面的幂等性，后端接口不要在GET页面中做用户操作。")])]),s._v(" "),n("h3",{attrs:{id:"四、sql-注入"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#四、sql-注入"}},[s._v("#")]),s._v(" 四、SQL 注入")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("SQL 注入原理")])]),s._v(" "),n("blockquote",[n("p",[s._v("Sql 注入攻击是通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中，再在后台 Sql 服务器上解析执行进行的攻击，它目前黑客对数据库进行攻击的最常用手段之一。")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("SQL 注入防御")])]),s._v(" "),n("p",[s._v("防御：用sql语句预编译和绑定变量，是防御sql注入的最佳方法。还可以通过严格检查参数的数据类型的方式来防御。")]),s._v(" "),n("h3",{attrs:{id:"五、dns-劫持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#五、dns-劫持"}},[s._v("#")]),s._v(" 五、DNS 劫持")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("DNS 劫持原理")])]),s._v(" "),n("blockquote",[n("p",[s._v("DNS劫持又称域名劫持，是指在劫持的网络范围内拦截域名解析的请求，分析请求的域名，把审查范围以外的请求放行，否则返回假的IP地址或者什么都不做使请求失去响应，其效果就是对特定的网络不能访问或访问的是假网址。其实本质就是对DNS解析服务器做手脚")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("DNS 劫持防御")])]),s._v(" "),n("p",[s._v("解决办法：")]),s._v(" "),n("p",[s._v("DNS的劫持过程是通过攻击运营商的解析服务器来达到目的。我们可以不用运营商的DNS解析而使用自己的解析服务器或者是提前在自己的App中将解析好的域名以IP的形式发出去就可以绕过运营商DNS解析，这样一来也避免了DNS劫持的问题。")]),s._v(" "),n("h3",{attrs:{id:"六、http-劫持"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#六、http-劫持"}},[s._v("#")]),s._v(" 六、HTTP 劫持")]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("HTTP 劫持原理")])]),s._v(" "),n("blockquote",[n("p",[s._v("在运营商的路由器节点上，设置协议检测，一旦发现是HTTP请求，而且是html类型请求，则拦截进行恶意处理。\n常见有两种：")])]),s._v(" "),n("ol",[n("li",[s._v("类似DNS劫持返回302让用户浏览器跳转到另外的地址。(钓鱼网站就是这么干)")]),s._v(" "),n("li",[s._v("在服务器返回的HTML数据中插入js或dom节点（广告）。（常见）")])]),s._v(" "),n("p",[n("b",{staticStyle:{color:"#f39b81","font-size":"1.2rem"}},[s._v("HTTP 劫持防御")])]),s._v(" "),n("p",[s._v("防御方法：")]),s._v(" "),n("ol",[n("li",[s._v("使用HTTPS；")]),s._v(" "),n("li",[s._v("使用禁止转码申明；")]),s._v(" "),n("li",[s._v("在开发的网页中加入代码过滤：用 js 检查所有的外链是否属于白名单；")]),s._v(" "),n("li",[s._v("联系运营商；")])]),s._v(" "),n("p",[s._v("这一 part 更多的是概念上的东西，不求完全记住，但是也要大致上能说一下。咱老话说的好："),n("strong",[s._v("知之为知之 不知为不知")]),s._v("，面试官在非关键性的问题上是不做严格要求的，千万别满嘴跑火车或者直接说不知道，这是两个极端，都不可取。")]),s._v(" "),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),n("p",[s._v("显然，前端面试“串联”问题不仅局限以上，本瓜会继续按照这个“串联联想”的思路去整理，不断去打破体系、形成体系（自己给自己挖的天坑呐）。期待在这个反复的过程中找寻真理的痕迹！")]),s._v(" "),n("p",[s._v("如果你对此文有更多想法（持续完善中），或是想与本瓜同行，可以加"),n("img",{attrs:{width:"30px",src:"https://user-gold-cdn.xitu.io/2020/7/14/1734be0db1c37f71?w=50&h=42&f=png&s=2251"}}),s._v(" "),n("b",{staticStyle:{color:"#666"}},[s._v("Ifuckinghigh")]),s._v("，期待更多交流 ~")]),s._v(" "),n("p",[n("i",[s._v("我是掘金安东尼，一个会持续输出的"),n("a",{attrs:{href:"https://tuaran.site",target:"_blank",rel:"noopener noreferrer"}},[s._v("个人站长"),n("OutboundLink")],1),s._v("。")])])])}),[],!1,null,null,null);e.default=a.exports}}]);