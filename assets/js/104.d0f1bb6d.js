(window.webpackJsonp=window.webpackJsonp||[]).push([[104],{600:function(s,e,a){"use strict";a.r(e);var n=a(2),t=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[a("sup",[s._v("每次看到干尸鬼鲛起舞，都有一种说不出的难受，不行，发出来，让大家一起难受难受~🐶")])]),s._v(" "),a("blockquote",[a("p",[a("strong",[s._v("Haskell 是一门纯的函数式语言。")]),s._v(" 也就是说计算机主要是通过函数来完成的（像在数学中一样），而不是通过“先做这个，再做那个”的命令式操作顺序进行的（像在主流的编程语言中一样）。—— "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E8%A5%BF%E8%92%99%C2%B7%E4%BD%A9%E9%A0%93%C2%B7%E7%93%8A%E6%96%AF",target:"_blank",rel:"noopener noreferrer"}},[s._v("Simon Peyton Jones"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"初见😀"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初见😀"}},[s._v("#")]),s._v(" 初见😀")]),s._v(" "),a("p",[s._v("什么是 Haskell ？我们从 wiki 上可以找到以下要点：")]),s._v(" "),a("ul",[a("li",[s._v("Haskell 是一种标准化的，通用的"),a("strong",[s._v("纯函数式编程")]),s._v("语言，有惰性求值和强静态类型；")]),s._v(" "),a("li",[s._v("在Haskell中，“函数是第一类对象”。作为一门函数编程语言，"),a("strong",[s._v("主要控制结构是函数")]),s._v("；")]),s._v(" "),a("li",[s._v("Haskell具有 "),a("strong",[s._v("“证明即程序、命题为类型”")]),s._v(" 的特征；")])]),s._v(" "),a("p",[s._v("这些概念起初可能看起来空泛，但回过头来看：“它还真就是这样！”")]),s._v(" "),a("h2",{attrs:{id:"调试🎇"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#调试🎇"}},[s._v("#")]),s._v(" 调试🎇")]),s._v(" "),a("p",[s._v("目前 Haskell 的主要编译器是 GHC，"),a("a",{attrs:{href:"https://www:haskell:org/ghc/",target:"_blank",rel:"noopener noreferrer"}},[s._v("下载地址"),a("OutboundLink")],1),s._v("，你可以创建 .hs 文件，用 "),a("a",{attrs:{href:"http://notepad-plus-plus.org/download",target:"_blank",rel:"noopener noreferrer"}},[s._v("Notepad++"),a("OutboundLink")],1),s._v(" 打开。")]),s._v(" "),a("p",[s._v("GHCi 是 GHC 的一部分，可以解析、调试 Haskell 程序。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/de9f9366f02542c3a7332430c33dfaeb~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),s._v(" "),a("p",[s._v("认识下 GHCi 中的命令：")]),s._v(" "),a("ul",[a("li",[s._v(":l 用来导入当前路径或者指定路径下的文件；")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Prelude> :l "C:\\\\Users\\\\ User\\\\Desktop\\\\HelloWorld\\\\HelloWorld.hs"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[a("p",[s._v(":r 用来重新导入当前的源代码文件；")])]),s._v(" "),a("li",[a("p",[s._v(":cd 改变当前GHCi的路径；")])])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :cd C:\\Users\\User\\Desktop\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("ul",[a("li",[s._v(":edit 用默认的文本编辑器编辑当前导入的文件;")])]),s._v(" "),a("p",[s._v("更多命令可见："),a("a",{attrs:{href:"https://www:haskell:org/hugs/pages/users_guide/index:html",target:"_blank",rel:"noopener noreferrer"}},[s._v("官网"),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"helloworld🌎"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#helloworld🌎"}},[s._v("#")]),s._v(" HelloWorld🌎")]),s._v(" "),a("p",[s._v("对于每个程序员来说，"),a("strong",[s._v("Hello,World")]),s._v(" 都是神圣的！")]),s._v(" "),a("p",[s._v("可以直接在调试器内打印：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('putStrLn "Hello,World!"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也可以新建一个文件：Helloworld.hs")]),s._v(" "),a("p",[s._v("然后 :l 引入，输入 main 运行：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :l D://ghc-haskell//test.hs\n\n*Main> main\nHello,World!\n\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("也可以通过 :cd 命令，输入 runghc ，将 .hs 文件变成 .exe 文件执行；")]),s._v(" "),a("h2",{attrs:{id:"类型🍕"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型🍕"}},[s._v("#")]),s._v(" 类型🍕")]),s._v(" "),a("p",[s._v("Haskell 的类型属于"),a("strong",[s._v("强类型")]),s._v("，即每一个数据或每一个函数都有非常精确、严格的类型。")]),s._v(" "),a("p",[s._v("注：我们使用命令 "),a("code",[s._v(":t")]),s._v(" 来查看类型；")]),s._v(" "),a("p",[s._v("Haskell 常用数据类型有：")]),s._v(" "),a("ul",[a("li",[s._v("Bool")])]),s._v(" "),a("p",[s._v("布尔类型只有 True 和 False 两个值，注意大小写；同样支持“或与非”运算：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("True||False\n\nTrue&&False\n\nnot True\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("ul",[a("li",[s._v("Char")])]),s._v(" "),a("p",[s._v("字符型，与其它语言一致")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Prelude> :t "str"\n"str" :: [Char]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("Int")])]),s._v(" "),a("p",[s._v("有符号整数，它的范围与操作系统和 GHC 位数有关。")]),s._v(" "),a("ul",[a("li",[s._v("Word")])]),s._v(" "),a("p",[s._v("无符号整数，Haskell 中的 Word 相当于 C 语言里的 unsigned int 类型；")]),s._v(" "),a("ul",[a("li",[s._v("Integer")])]),s._v(" "),a("p",[s._v("任意精度整数；")]),s._v(" "),a("ul",[a("li",[s._v("Float")])]),s._v(" "),a("p",[s._v("单精度浮点数；")]),s._v(" "),a("ul",[a("li",[s._v("Double")])]),s._v(" "),a("p",[s._v("双精度浮点数；")]),s._v(" "),a("ul",[a("li",[s._v("Rational")])]),s._v(" "),a("p",[s._v("有理数类型 Rational，即用两个任意精度的整数来表示一个小数，这在做高精度数学运算时有很多好处；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> 0.75::Rational\n3 % 4\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("String")])]),s._v(" "),a("p",[s._v("字符串类型，String 是一个 Char 的列表。")]),s._v(" "),a("p",[s._v("在 GHCi 里输入['H', 'e', 'l', 'l','o']，会得到 \"Hello\"")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> ['H', 'e', 'l', 'l','o']\n\"Hello\"\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("ul",[a("li",[s._v("tuple")])]),s._v(" "),a("p",[s._v('元组类型，如：(7758,True,"HelloWorld")，各种类型可以互相组合使用；')]),s._v(" "),a("p",[s._v("以上，都是基础的类型，可一眼带过~")]),s._v(" "),a("h2",{attrs:{id:"函数类型-🍻"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数类型-🍻"}},[s._v("#")]),s._v(" 函数类型！🍻")]),s._v(" "),a("p",[s._v("函数类型是本篇的重中之重，前面的可以随意看看，但是从此节开始请务必细究。")]),s._v(" "),a("p",[a("strong",[s._v("函数可以理解为从参数到结果的一个映射")]),s._v("，比如T1 -> T2。每一个函数都符合这样一个定义；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("add::(Int,Int)->Int // 声明 add 函数，输入是一个元组类型，元组内是两个 Int 元件，输出是一个 Int 类型；\n\nadd (x,y) = x + y // add 的具体实现\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("也可以这样直接在命令行中定义：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> let add(x,y) = (x + y) ::Int\nPrelude> add(1,2)\n3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("若 T1 或 T2 为函数，那么 T1-> T2 函数可以称为高阶函数；这也是之前说过的，将函数作为输入或输出的函数称为"),a("strong",[s._v("高级函数")]),s._v("；")]),s._v(" "),a("ul",[a("li",[s._v("Haskell 柯里化")])]),s._v(" "),a("p",[s._v("显然，两数相加传 2 个 Int 的元组，三个数相加传 3 个 Int 的元组，四个数相加，传 4 个 Int 的元组...... 这是非柯里化的，传参有极大麻烦；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("add3::(Int,Int,Int)->Int\n\nadd4::(Int,Int,Int,Int)->Int\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("Haskell 定义了柯里化（curry）函数来帮助我们改善这一点：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :t curry\ncurry :: ((a, b) -> c) -> a -> b -> c\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("// 实现加法的柯里化，支持多项连续相加，且不用提前声明项数；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> let add(x,y) = (x + y) ::Int\nPrelude> curry add(curry add((curry add)1 2)3)4\n10\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("这个是真滴强👍")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2be7ed61dc414093a328ed633b09a6fa~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),s._v(" "),a("ul",[a("li",[s._v("多态函数")])]),s._v(" "),a("p",[s._v("多态函数在 Haskell 中非常常见：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> head[1,2,3]\n1\n\nPrelude> head[True,False]\nTrue\n\nPrelude> head\"Hello\"\n'H'\n\nPrelude> zip[1,2,3][4,5,6]\n[(1,4),(2,5),(3,6)]\n\n[('a',1),('b',2),('c',3)]\n\nPrelude> fst(5,True)\n5\n\nPrelude> snd(5,True)\nTrue\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("ul",[a("li",[s._v("重载类型函数")])]),s._v(" "),a("blockquote",[a("p",[s._v("5 一直是被当成整数。但是，它还可以是一个任意精度整数，或是一个小数。这样一来，类型上可能会有一些不协调，因为 5 是一个有着很多类型的值，Haskell 中用"),a("strong",[s._v("类型类")]),s._v("（typeclass）这一概念来对这些类型做了细致的分类。")])]),s._v(" "),a("p",[s._v("我们在下一小节做更为细致的说明“类型类”~")]),s._v(" "),a("ul",[a("li",[s._v("类型别名")])]),s._v(" "),a("p",[s._v("一个数据的类型可以由多个其他的类型组成，在 Haskell 中，可以用 type 关键字将这些复杂的类型替换成为其他简单的名字；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> type RGB=(Int,Int,Int)\nPrelude> let rgb=(255,255,255) ::RGB\nPrelude> :t rgb\nrgb :: RGB\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("这样处理后，你能更清楚这个变量是干什么的~")]),s._v(" "),a("h2",{attrs:{id:"类型类-🖖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型类-🖖"}},[s._v("#")]),s._v(" 类型类！！🖖")]),s._v(" "),a("p",[s._v("在控制台输入 :t 5 查看输出：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :t 5\n5 :: Num p => p\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("5 是 Num 类型类，这个数可以是整数，也可以是小数或其他数类型；")]),s._v(" "),a("ul",[a("li",[s._v("=> 是类型类的限定符号；")])]),s._v(" "),a("p",[s._v("Haskell 除了 Num 类型类以外，还有Eq、Ord 和 Show 类型类等等；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('// 判断是否相等 Eq 类型类\nPrelude> :t (==)\n(==) :: Eq a => a -> a -> Bool\n\n// 判断大小 Ord 类型类\nPrelude> :t (<)\n(<) :: Ord a => a -> a -> Bool\n\n// 使用 Show 打印 <\nPrelude> :m + Text.Show.Functions\nPrelude Text.Show.Functions> show(<)\n"<function>"\n\n// 枚举类型类\nPrelude> [1..10]\n[1,2,3,4,5,6,7,8,9,10]\n\n......\n\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/11b1613896d64378a7ac9e90c7af6f9e~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),s._v(" "),a("p",[s._v("上图不在灰色方框内的部分全部是类型类；")]),s._v(" "),a("blockquote",[a("p",[s._v("Haskell 给很多“类型”分成了“类型类”，归为一类的类型有着共同的属性，不同类型所归的类就称为类型类。")])]),s._v(" "),a("p",[s._v("每个类型类下面都写了一些该类型类中预定义的函数，我们可以接着打印输出体验：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// fromInteger 是 Num 类型类下的函数，可以将一个一个的整数转为一个重载的数类型 a\nPrelude> :t fromInteger\nfromInteger :: Num a => Integer -> a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("有时需要将一个整数转为复数类型或者比值类型，这时就可以使用它。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :m Data.Ratio\nPrelude Data.Ratio> fromInteger 5 :: Ratio Int\n5 % 1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("还有熟悉的向下取整方法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :t floor\nfloor :: (RealFrac a, Integral b) => a -> b\n\nPrelude> floor(1.2)\n1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("类型类中定义了一些函数，如果定义了一个新的类型，只要这个类型实现了类型类中声明的函数这个类型就属于该类型类了；")]),s._v(" "),a("h2",{attrs:{id:"小结🤖"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结🤖"}},[s._v("#")]),s._v(" 小结🤖")]),s._v(" "),a("p",[s._v("入门第一篇，类型在程序语言中非常重要！")]),s._v(" "),a("p",[s._v("强类型：可以帮助我们检查错误、对程序进行抽象（函数式编程关键）、具有文档说明作用。")]),s._v(" "),a("p",[s._v("可以看出，Haskell 的严格定义类型和 javaScript 中还是有较大差异，一个强类型，一个弱类型~")]),s._v(" "),a("p",[s._v("强类型适合大型项目的维护，弱类型与动态性结合，开发简单，处理灵活；")]),s._v(" "),a("p",[s._v("Haskell 的类型类，以及类型类底下的各种函数，真的太好用了吧~ 不用理会类型转换，特别是像 js 中的隐式转换，真的太爽了~")]),s._v(" "),a("p",[s._v("在逐渐学习的过程中，不断提升强类型设计精髓的理解。")]),s._v(" "),a("p",[s._v("看到这里，点个赞吧~ 👍 掘文不易，还需鼓励~ 👏")]),s._v(" "),a("blockquote",[a("p",[s._v("我是掘金安东尼，输出暴露输入，技术洞见生活，再会~")])])])}),[],!1,null,null,null);e.default=t.exports}}]);