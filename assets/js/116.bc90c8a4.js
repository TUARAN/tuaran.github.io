(window.webpackJsonp=window.webpackJsonp||[]).push([[116],{611:function(s,n,a){"use strict";a.r(n);var e=a(2),t=Object(e.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("这是【JS如何函数式编程】系列文章第三篇。点赞👍关注👀，持续追踪😄")]),s._v(" "),a("p",[s._v("前两篇传送门：")]),s._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6968259661304692750",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（一）》"),a("OutboundLink")],1)]),s._v(" "),a("li",[a("a",{attrs:{href:"https://juejin.cn/post/6969016132741103624",target:"_blank",rel:"noopener noreferrer"}},[s._v("《XDM，JS如何函数式编程？看这就够了！（二）》"),a("OutboundLink")],1)])]),s._v(" "),a("p",[s._v("在第二篇，我们谈了基础之基础，重要之重要——"),a("strong",[s._v("“偏函数”")]),s._v("，偏函数通过函数封装，实现了减少传参数量的目的，解决了手动指定实参的麻烦。")]),s._v(" "),a("p",[s._v("更具重要意义的是：")]),s._v(" "),a("p",[a("strong",[s._v("当函数只有一个形参时，我们能够比较容易地组合它们。这种单元函数，便于进行后续的组合函数；")])]),s._v(" "),a("p",[s._v("没错，本篇就是谈关于 "),a("strong",[s._v("“组合函数”")]),s._v("。它是函数编程的重中之重之重之重重重！")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://imagelol.com/image/ILeQXR",target:"_blank",rel:"noopener noreferrer"}},[a("img",{attrs:{src:"https://s3.jpg.cm/2021/06/08/ILeQXR.png",alt:"ILeQXR.png"}}),a("OutboundLink")],1)]),s._v(" "),a("h2",{attrs:{id:"组合函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组合函数"}},[s._v("#")]),s._v(" 组合函数")]),s._v(" "),a("h3",{attrs:{id:"含义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#含义"}},[s._v("#")]),s._v(" 含义")]),s._v(" "),a("p",[a("strong",[s._v("函数编程就像拼乐高！")])]),s._v(" "),a("p",[s._v("乐高有各式各样的零部件，我们将它们组装拼接，拼成一个更大的组件或模型。")]),s._v(" "),a("p",[s._v("函数编程也有各种功能的函数，我们将它们组装拼接，用于实现某个特定的功能。")]),s._v(" "),a("p",[s._v("下面来看一个例子，比如我们要使用这两个函数来分析文本字符串：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function words(str) {\n    return String( str )\n        .toLowerCase()\n        .split( /\\s|\\b/ )\n        .filter( function alpha(v){\n            return /^[\\w]+$/.test( v );\n        } );\n}\n\nfunction unique(list) {\n    var uniqList = [];\n\n    for (let i = 0; i < list.length; i++) {\n        if (uniqList.indexOf( list[i] ) === -1 ) {\n            uniqList.push( list[i] );\n        }\n    }\n\n    return uniqList;\n}\n\nvar text = "To compose two functions together";\n\nvar wordsFound = words( text );\nvar wordsUsed = unique( wordsFound );\n\nwordsUsed;\n\n//  ["to", "compose", "two", "functions", "together"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("不用细看，只用知道：我们先用 words 函数处理了 text，然后用 unique 函数处理了上一处理的结果 wordsFound；")]),s._v(" "),a("p",[s._v("这样的过程就好比生产线上加工商品，流水线加工。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://s3.jpg.cm/2021/06/08/ILdMAw.md.png",alt:"ILdMAw.md.png"}})]),s._v(" "),a("p",[s._v("想象一下，如果你是工厂老板，还会怎样优化流程、节约成本？")]),s._v(" "),a("p",[s._v("这里作者给了一种解决方式："),a("strong",[s._v("去掉传送带！")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://s3.jpg.cm/2021/06/07/IL5R48.png",alt:"IL5R48.png"}})]),s._v(" "),a("p",[s._v("即减少中间变量，我们可以这样调用：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var wordsUsed = unique( words( text ) );\n\nwordsUsed\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("确实，少了中间变量，更加清晰，还能再优化吗？")]),s._v(" "),a("p",[s._v("我们还可以进一步把整个处理流程封装到一个函数内：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function uniqueWords(str) {\n    return unique( words( str ) );\n}\n\nuniqueWords(text)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("这样就像是一个黑盒，无需管里面的流程，只用知道这个盒子输入是什么！输出是什么！输入输出清晰，功能清晰，非常“干净”！如图：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://s3.jpg.cm/2021/06/07/IL5qDi.png",alt:"IL5qDi.png"}})]),s._v(" "),a("p",[s._v("与此同时，它还能被搬来搬去，或再继续组装。")]),s._v(" "),a("p",[s._v("我们回到 uniqueWords() 函数的内部，它的数据流也是清晰的：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("uniqueWords <-- unique <-- words <-- text\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"封装盒子"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#封装盒子"}},[s._v("#")]),s._v(" 封装盒子")]),s._v(" "),a("p",[s._v("上面的封装 uniqueWords 盒子很 nice ，如果要不断的封装像 uniqueWords 的盒子，我们要一个一个的去写吗？")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function uniqueWords(str) {\n    return unique( words( str ) );\n}\n\nfunction uniqueWords_A(str) {\n    return unique_A( words_A( str ) );\n}\n\nfunction uniqueWords_B(str) {\n    return unique_B( words_B( str ) );\n}\n\n...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("所以，一切为了偷懒，我们可以写一个功能更加强大的函数来实现自动封装盒子：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function compose2(fn2,fn1) {\n    return function composed(origValue){\n        return fn2( fn1( origValue ) );\n    };\n}\n\n// ES6 箭头函数形式写法\nvar compose2 =\n    (fn2,fn1) =>\n        origValue =>\n            fn2( fn1( origValue ) );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s3.jpg.cm/2021/06/07/IL5eS5.png",alt:"IL5eS5.png"}})]),s._v(" "),a("p",[s._v("接着，调用就变成了这样：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var uniqueWords = compose2( unique, words );\n\nvar uniqueWords_A = compose2( unique_A, words_A );\n\nvar uniqueWords_B = compose2( unique_B, words_B );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("太清晰了！")]),s._v(" "),a("h3",{attrs:{id:"任意组合"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#任意组合"}},[s._v("#")]),s._v(" 任意组合")]),s._v(" "),a("p",[s._v("上面，我们组合了两个函数，实际上我们也可以组合 N 个函数；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("finalValue <-- func1 <-- func2 <-- ... <-- funcN <-- origValue\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s3.jpg.cm/2021/06/07/IL5l2C.png",alt:"IL5l2C.png"}})]),s._v(" "),a("p",[s._v("比如用一个 compose 函数来实现（敲重点）：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function compose(...fns) {\n    return function composed(result){\n        // 拷贝一份保存函数的数组\n        var list = fns.slice();\n\n        while (list.length > 0) {\n            // 将最后一个函数从列表尾部拿出\n            // 并执行它\n            result = list.pop()( result );\n        }\n\n        return result;\n    };\n}\n\n// ES6 箭头函数形式写法\nvar compose =\n    (...fns) =>\n        result => {\n            var list = fns.slice();\n\n            while (list.length > 0) {\n                // 将最后一个函数从列表尾部拿出\n                // 并执行它\n                result = list.pop()( result );\n            }\n\n            return result;\n        };\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br"),a("span",{staticClass:"line-number"},[s._v("28")]),a("br"),a("span",{staticClass:"line-number"},[s._v("29")]),a("br")])]),a("p",[s._v("基于前面 uniqueWords(..) 的例子，我们进一步再增加一个函数来处理（过滤掉长度小于等于4的字符串）：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function skipShortWords(list) {\n    var filteredList = [];\n\n    for (let i = 0; i < list.length; i++) {\n        if (list[i].length > 4) {\n            filteredList.push( list[i] );\n        }\n    }\n\n    return filteredList;\n}\n\nvar text = "To compose two functions together";\n\nvar biggerWords = compose( skipShortWords, unique, words );\n\nvar wordsUsed = biggerWords( text );\n\nwordsUsed;\n// ["compose", "functions", "together"]\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br")])]),a("p",[s._v("这样 compose 函数就有三个入参且都是函数了。我们还可以利用偏函数的特性实现更多：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function skipLongWords(list) { /* .. */ }\n\nvar filterWords = partialRight( compose, unique, words ); // 固定 unique 函数 和 words 函数\n\nvar biggerWords = filterWords( skipShortWords );\nvar shorterWords = filterWords( skipLongWords );\n\nbiggerWords( text );\nshorterWords( text );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[s._v("filterWords 函数是一个更具有特定功能的变体（根据第一个函数的功能来过滤字符串）。")]),s._v(" "),a("h3",{attrs:{id:"compose-变体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#compose-变体"}},[s._v("#")]),s._v(" compose 变体")]),s._v(" "),a("p",[s._v("compose(..)函数非常重要，但我们可能不会在生产中使用自己写的 compose(..)，而更倾向于使用某个库所提供的方案。了解其底层工作的原理，对我们强化理解函数式编程也非常有用。")]),s._v(" "),a("p",[s._v("我们理解下  compose(..) 的另一种变体 —— 递归的方式实现：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function compose(...fns) {\n    // 拿出最后两个参数\n    var [ fn1, fn2, ...rest ] = fns.reverse();\n\n    var composedFn = function composed(...args){\n        return fn2( fn1( ...args ) );\n    };\n\n    if (rest.length == 0) return composedFn;\n\n    return compose( ...rest.reverse(), composedFn );\n}\n\n// ES6 箭头函数形式写法\nvar compose =\n    (...fns) => {\n        // 拿出最后两个参数\n        var [ fn1, fn2, ...rest ] = fns.reverse();\n\n        var composedFn =\n            (...args) =>\n                fn2( fn1( ...args ) );\n\n        if (rest.length == 0) return composedFn;\n\n        return compose( ...rest.reverse(), composedFn );\n    };\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br"),a("span",{staticClass:"line-number"},[s._v("26")]),a("br"),a("span",{staticClass:"line-number"},[s._v("27")]),a("br")])]),a("p",[s._v("通过递归进行重复的动作比在循环中跟踪运行结果更易懂，这可能需要更多时间去体会；")]),s._v(" "),a("p",[s._v("基于之前的例子，如果我们想让参数反转：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var biggerWords = compose( skipShortWords, unique, words );\n\n// 变成\n\nvar biggerWords = pipe( words, unique, skipShortWords );\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("只需要更改 compose(..) 内部实现这一句就行：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("...\n        while (list.length > 0) {\n            // 从列表中取第一个函数并执行\n            result = list.shift()( result );\n        }\n...\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br")])]),a("p",[s._v("虽然只是颠倒参数顺序，这二者没有本质上的区别。")]),s._v(" "),a("h3",{attrs:{id:"抽象能力"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#抽象能力"}},[s._v("#")]),s._v(" 抽象能力")]),s._v(" "),a("p",[s._v("你是否会疑问：什么情况下可以封装成上述的“盒子”呢？")]),s._v(" "),a("p",[s._v("这就很考验 —— 抽象的能力了！")]),s._v(" "),a("p",[s._v("实际上，"),a("strong",[s._v("有两个或多个任务存在公共部分，我们就可以进行封装了。")])]),s._v(" "),a("p",[s._v("比如：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function saveComment(txt) {\n    if (txt != "") {\n        comments[comments.length] = txt;\n    }\n}\n\nfunction trackEvent(evt) {\n    if (evt.name !== undefined) {\n        events[evt.name] = evt;\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[s._v("就可以抽象封装为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function storeData(store,location,value) {\n    store[location] = value;\n}\n\nfunction saveComment(txt) {\n    if (txt != "") {\n        storeData( comments, comments.length, txt );\n    }\n}\n\nfunction trackEvent(evt) {\n    if (evt.name !== undefined) {\n        storeData( events, evt.name, evt );\n    }\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("在做这类抽象时，有一个原则是，通常被称作 DRY（don't repeat yourself），即便我们要花时间做这些非必要的工作。")]),s._v(" "),a("p",[a("strong",[s._v("抽象能让你的代码走得更远！")]),s._v(" 比如上例，还能进一步升级：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function conditionallyStoreData(store,location,value,checkFn) {\n    if (checkFn( value, store, location )) {\n        store[location] = value;\n    }\n}\n\nfunction notEmpty(val) { return val != ""; }\n\nfunction isUndefined(val) { return val === undefined; }\n\nfunction isPropUndefined(val,obj,prop) {\n    return isUndefined( obj[prop] );\n}\n\nfunction saveComment(txt) {\n    conditionallyStoreData( comments, comments.length, txt, notEmpty );\n}\n\nfunction trackEvent(evt) {\n    conditionallyStoreData( events, evt.name, evt, isPropUndefined );\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br")])]),a("p",[s._v("这样 if 语句也被抽象封装了。")]),s._v(" "),a("blockquote",[a("p",[s._v("抽象是一个过程，程序员将一个名字与潜在的复杂程序片段关联起来，这样该名字就能够被认为代表函数的目的，而不是代表函数如何实现的。通过隐藏无关的细节，抽象降低了概念复杂度，让程序员在任意时间都可以集中注意力在程序内容中的可维护子集上。—— 《程序设计语言》")])]),s._v(" "),a("p",[s._v("我们在本系列初始提到：“一切为了创造更可读、更易理解的代码。”")]),s._v(" "),a("p",[s._v("从另一个角度，抽象就是将命令式代码变成声命式代码的过程。从“怎么做”转化成“是什么”。")]),s._v(" "),a("p",[s._v("命令式代码主要关心的是描述怎么做来准确完成一项任务。声明式代码则是描述输出应该是什么，并将具体实现交给其它部分。")]),s._v(" "),a("p",[s._v("比如 ES6 增加的结构语法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function getData() {\n    return [1,2,3,4,5];\n}\n\n// 命令式\nvar tmp = getData();\nvar a = tmp[0];\nvar b = tmp[3];\n\n// 声明式\nvar [ a ,,, b ] = getData();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br")])]),a("p",[a("strong",[s._v("开发者需要对他们程序中每个部分使用恰当的抽象级别保持谨慎，不能太过，也不能不够。")])]),s._v(" "),a("h2",{attrs:{id:"阶段小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阶段小结"}},[s._v("#")]),s._v(" 阶段小结")]),s._v(" "),a("p",[s._v("函数组合是为了符合“声明式编程风格”，即关注“是什么”，而非具体“做什么”。")]),s._v(" "),a("p",[s._v("它能将一个函数调用的输出路由跳转到另一个函数的调用上，然后一直进行下去，它借助 compose(..) 或它的变体实现。。")]),s._v(" "),a("p",[s._v("我们期望组合中的函数是一元的（输入输出尽量是一个），这个也是前篇有提到的很重要的一个点。")]),s._v(" "),a("p",[a("strong",[s._v("组合 ———— 声明式数据流 ———— 是支撑函数式编程其他特性的最重要的工具之一！")])]),s._v(" "),a("p",[s._v("以上！")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1e01b24434bd4722b9865c8dca776d3f~tplv-k3u1fbpfcp-watermark.image",alt:"v2-cc922db944e651867447654f0858d44f_b.webp"}})]),s._v(" "),a("p",[s._v("我是掘金安东尼，公众号【掘金安东尼】，输出暴露输入，以技术见生活。")])])}),[],!1,null,null,null);n.default=t.exports}}]);