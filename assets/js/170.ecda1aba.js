(window.webpackJsonp=window.webpackJsonp||[]).push([[170],{668:function(s,a,n){"use strict";n.r(a);var t=n(2),r=Object(t.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("「这是我参与2022首次更文挑战的第16天，活动详情查看："),n("a",{attrs:{href:"https://juejin.cn/post/7052884569032392740",target:"_blank",rel:"noopener noreferrer"}},[s._v("2022首次更文挑战"),n("OutboundLink")],1),s._v("」")]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("装饰器是一种包装代码的简单方法，它也是一种设计模式，能够扩展包装代码的功能而不修改它。")]),s._v(" "),n("p",[s._v("尽管装饰器在 TypeScript 和 Python 等语言中被广泛使用，但是 JavaScript 装饰器的支持仍处于第 2 阶段提案中（"),n("a",{attrs:{href:"https://github.com/tc39/proposal-decorators",target:"_blank",rel:"noopener noreferrer"}},[s._v("stage 2 proposal"),n("OutboundLink")],1),s._v("）。但是，我们可以借助 Babel 和 TypeScript 编译器使用 JavaScript 装饰器。")]),s._v(" "),n("p",[s._v("本文将详细讨论 JavaScript 装饰器，提升理解。冲~")]),s._v(" "),n("h2",{attrs:{id:"简介"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#简介"}},[s._v("#")]),s._v(" 简介")]),s._v(" "),n("p",[s._v("在 JavaScript 中，装饰器有一种特殊的语法。它们以 @ 符号为前缀，放置在我们需要装饰的代码之前。另外，可以一次使用多个装饰器。")]),s._v(" "),n("p",[s._v("代码示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("@readonly\nclass Example {\n    @log()\n    exampleFunction() {}\n}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("前面已经提到，JavaScript 装饰器支持仍处于提案阶段。但是，装饰器的概念对 JavaScript 来说并不新鲜，因为高阶函数是函数装饰器的另一种形式。")]),s._v(" "),n("p",[s._v("总的来说，我们可以在 JavaScript 中分出 3 种类型的装饰器：")]),s._v(" "),n("ul",[n("li",[n("p",[s._v("函数装饰器——用函数来包装函数。")])]),s._v(" "),n("li",[n("p",[s._v("类装饰器—— 一次应用于整个类。")])]),s._v(" "),n("li",[n("p",[s._v("类成员装饰器——应用于类的成员")])])]),s._v(" "),n("p",[s._v("目前，不能在浏览器或 Node.js 环境中运行类装饰器，因为它们需要转译器支持。但是，如果使用函数式装饰器，则可以在任何地方运行它们。")]),s._v(" "),n("h2",{attrs:{id:"函数装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#函数装饰器"}},[s._v("#")]),s._v(" 函数装饰器")]),s._v(" "),n("p",[s._v("我们可以尝试用一个函数包装另一个函数，来扩展功能而不改变原始函数。")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function multiply(x, y) {\n  console.log('Total : ' + (x*y));\n}\n\nfunction logDecorator(logger) {\n  return function (message) {\n    const result = logger.apply(this, arguments);\n    console.log(\"Logged at:\", new Date().toLocaleString());\n    return result;\n  }\n}\n\nconst wrapperFunction = logDecorator(multiply);\nwrapperFunction(10,10)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("在上面的例子中，wrapperFunction() 通过 logDecorator() 修改了 multiply() 函数，它可以像任何 JavaScript 函数一样被调用。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5e1df5e2d486410bb6e408a0f0a42cc7~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),n("p",[s._v("自从引入了高阶函数以来，JavaScript 函数装饰器就一直存在。但是，我们不能对 JavaScript 的类使用相同的方法。")]),s._v(" "),n("h2",{attrs:{id:"类装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类装饰器"}},[s._v("#")]),s._v(" 类装饰器")]),s._v(" "),n("p",[s._v("类装饰器有点不同。如果尝试使用相同的方法，将会报错 TypeError：")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4502458e857f49b3bb7bd93295800829~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),n("p",[s._v("如果你对 JavaScript this 关键字理解透彻，可以克服这个问题。但这不是最简单方法。")]),s._v(" "),n("p",[s._v("类装饰器应用于整个类。因此，我们所做的任何修改都会影响整个类。对类装饰器所做的任何事情都需要通过返回一个新的构造函数来替换类构造函数。")]),s._v(" "),n("p",[s._v("举个例子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function log(name) {\n  return function decorator(Class) {\n    return (...args) => {\n      console.log(`Arguments for ${name}: ${args}`);\n      return new Class(...args);\n    };\n  }\n}\n\n@log('Multiply')\nclass Calculator {\n    constructor (x,y) { }\n}  \n\ncalculator = new Calculator(10,10);\n// Arguments for Multiply: [10, 10]\n\nconsole.log(calculator);\n// Calculator {}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br")])]),n("p",[s._v("log() 函数接受 Calculator 类作为参数，并返回一个新函数来替换 Calculator 类的构造函数；")]),s._v(" "),n("h2",{attrs:{id:"类成员装饰器"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类成员装饰器"}},[s._v("#")]),s._v(" 类成员装饰器")]),s._v(" "),n("p",[s._v("类成员装饰器应用于类中的单个成员。这些成员可以是属性、方法、getter 或 setter，装饰器函数接受 3 个输入参数：")]),s._v(" "),n("ul",[n("li",[s._v("Target - 成员所在的类。")]),s._v(" "),n("li",[s._v("Name - 类成员的名称。")]),s._v(" "),n("li",[s._v("descriptor - 成员描述符。")])]),s._v(" "),n("p",[s._v("代码示例：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function readonly(target, name, descriptor) {\n  descriptor.writable = false;\n   return descriptor;\n}\n\nclass Example {\n  x() {}\n  @readonly\n  y() {}\n}\n\nconst myClass = new Example();\nmyClass.x = 10;\nmyClass.y = 20;\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br")])]),n("p",[s._v("在 readonly() 函数中，我们将描述符的可写属性设置为 false。然后，将它用作函数 y() 的装饰器。如果尝试修改它，会得到一个 TypeError。")]),s._v(" "),n("p",[s._v("此外，我们还可以创建自定义装饰器，并将它们用作类成员装饰器，如下：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("function log(name) {\n  return function decorator(t, n, descriptor) {\n    const original = descriptor.value;\n    if (typeof original === 'function') {\n      descriptor.value = function (...args) {\n        console.log(\"Logged at:\", new Date().toLocaleString());\n        try {\n          const result = original.apply(this, args);\n          console.log(`Result from ${name}: ${result}`);\n          return result;\n        } cach (e) {\n          console.log(`Error from $ {name}: ${e}`);\n          thro e;\n        }\n      };\n    }\n    return descriptor;\n  };\n}\n\nclass Calculator {\n  @log('Multiply')\n    multiply(x,y){\n      return x*y;\n  }\n}    \n\ncalculator = new Calculator();\ncalculator.multiply(10,10);\n\n// Logged at: 1/12/2022, 08:00:00 PM\n// Result from Multiply: 100\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br"),n("span",{staticClass:"line-number"},[s._v("16")]),n("br"),n("span",{staticClass:"line-number"},[s._v("17")]),n("br"),n("span",{staticClass:"line-number"},[s._v("18")]),n("br"),n("span",{staticClass:"line-number"},[s._v("19")]),n("br"),n("span",{staticClass:"line-number"},[s._v("20")]),n("br"),n("span",{staticClass:"line-number"},[s._v("21")]),n("br"),n("span",{staticClass:"line-number"},[s._v("22")]),n("br"),n("span",{staticClass:"line-number"},[s._v("23")]),n("br"),n("span",{staticClass:"line-number"},[s._v("24")]),n("br"),n("span",{staticClass:"line-number"},[s._v("25")]),n("br"),n("span",{staticClass:"line-number"},[s._v("26")]),n("br"),n("span",{staticClass:"line-number"},[s._v("27")]),n("br"),n("span",{staticClass:"line-number"},[s._v("28")]),n("br"),n("span",{staticClass:"line-number"},[s._v("29")]),n("br"),n("span",{staticClass:"line-number"},[s._v("30")]),n("br"),n("span",{staticClass:"line-number"},[s._v("31")]),n("br"),n("span",{staticClass:"line-number"},[s._v("32")]),n("br")])]),n("p",[s._v("Calculator 类有一个名为 multiply() 的方法，并使用 log() 函数对其进行修饰。Log() 函数接受单个参数作为输入，当我们调用装饰器 (@log('Multiply')) 时，我们可以将值传递给该参数。")]),s._v(" "),n("h2",{attrs:{id:"小结"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),n("p",[s._v("将装饰器引入 JavaScript 的主要目的是在 JavaScript 类和类属性之间共享功能。")]),s._v(" "),n("p",[s._v("但是，这并不是装饰器带来的唯一优势。")]),s._v(" "),n("p",[s._v("装饰器允许开发人员编写干净且可重用的代码。开发人员可以使用装饰器轻松地将功能的增强与代的码特性分开。")]),s._v(" "),n("p",[s._v("除此之外，装饰器语法非常简单，允许在不增加代码复杂性的情况下向类和属性添加新功能。")]),s._v(" "),n("p",[s._v("这使得代码更易于维护和调试。")]),s._v(" "),n("p",[s._v("以上，便是本篇分享~~~")]),s._v(" "),n("blockquote",[n("p",[s._v("我是掘金安东尼，输出暴露输入，技术洞见生活，再会~")])])])}),[],!1,null,null,null);a.default=r.exports}}]);