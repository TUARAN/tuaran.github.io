(window.webpackJsonp=window.webpackJsonp||[]).push([[114],{612:function(s,n,a){"use strict";a.r(n);var t=a(2),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("盲猜一个：如果你有看过")]),s._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6950878916135354398",target:"_blank",rel:"noopener noreferrer"}},[s._v("《medium 五万赞好文-《我永远不懂 JS 闭包》》"),a("OutboundLink")],1)])]),s._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://juejin.cn/post/6964649946238681125",target:"_blank",rel:"noopener noreferrer"}},[s._v("《“类”设计模式和“原型”设计模式——“复制”和“委托”的差异》"),a("OutboundLink")],1)])])]),s._v(" "),a("p",[s._v("这两篇文章，你一定会对 JS 的【函数】有更多兴趣！")]),s._v(" "),a("p",[s._v("如果你没兴趣？那我走？")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/0c45763f72d14667ad62f595bd1d22f9~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/83fac8015c7b401fa0aa24eba04c2128~tplv-k3u1fbpfcp-watermark.image",alt:"image.png"}})]),s._v(" "),a("p",[s._v("皮一下，很舒服~ 没错！"),a("strong",[s._v("JS 就是轻量级的函数式编程！")])]),s._v(" "),a("p",[s._v("拆解一下这句话，品味一下~")]),s._v(" "),a("p",[s._v("本瓜将借助"),a("a",{attrs:{href:"https://github.com/Simingchen/Functional-Light-JS",target:"_blank",rel:"noopener noreferrer"}},[s._v("《JavaScript 轻量级函数式编程》"),a("OutboundLink")],1),s._v("一书带领你先透析它的落脚点"),a("strong",[s._v("函数式编程")]),s._v("，然后再看看 JS 为什么被称为是 "),a("strong",[s._v("“轻量的”")]),s._v("！")]),s._v(" "),a("p",[s._v("此篇是《JS如何函数式编程？看这就够了！》系列的"),a("strong",[s._v("第一篇")]),s._v("，点赞👍关注👀持续追踪！")]),s._v(" "),a("h2",{attrs:{id:"函数式编程概览"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数式编程概览"}},[s._v("#")]),s._v(" 函数式编程概览")]),s._v(" "),a("h3",{attrs:{id:"fp-很重要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fp-很重要"}},[s._v("#")]),s._v(" FP 很重要")]),s._v(" "),a("p",[s._v("函数式编程（FP），不是一个新的概念，它几乎贯穿了整个编程史。直到最近几年，函数式编程才成为整个开发界的主流观念。")]),s._v(" "),a("p",[s._v("函数式编程有完善且清晰的原则，一旦我们知道这些原则，我们将能更加快速地读懂代码，定位问题。这是为什么函数式编程重要的原因！")]),s._v(" "),a("p",[s._v("比如：你可能写过一些"),a("strong",[s._v("命令式的代码")]),s._v("，像 if 语句和 for 循环这样的语句。这些语句旨在精确地指导计算机如何完成一件事情。而"),a("strong",[s._v("声明式代码")]),s._v("，以及我们努力遵循函数式编程原则所写出的代码，更专注于描述最终的结果。")]),s._v(" "),a("p",[s._v("函数式编程以另一种方式来思考代码应该如何组织才能"),a("strong",[s._v("使数据流更加明显")]),s._v("，并能让读者很快理解你的思想。")]),s._v(" "),a("blockquote",[a("p",[s._v("记住，你编写的每一行代码之后都要有人来维护，这个人可能是你的团队成员，也可能是未来的你。")])]),s._v(" "),a("h3",{attrs:{id:"fp-打基础"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fp-打基础"}},[s._v("#")]),s._v(" FP 打基础")]),s._v(" "),a("p",[s._v("函数式编程不是仅仅用 function 这个关键词来编程，就像面向对象编程不仅仅是用了对象就算是。")]),s._v(" "),a("p",[s._v("函数的真正意义是什么？")]),s._v(" "),a("p",[s._v("回到最初的起点，我们心中的函数一定是这样的：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://s3.jpg.cm/2021/05/28/IIPD2z.png",alt:""}})]),s._v(" "),a("p",[a("code",[s._v("f(x) = 2x2 + 3")]),s._v("，这是数学上真正的函数。那这和函数式编程有什么关系呢？")]),s._v(" "),a("p",[s._v("函数的本质是【映射】。以一个优雅的方式来描述一组值和另一组值的映射关系，即函数的输入值与输出值之间的关联关系。")]),s._v(" "),a("p",[s._v("在编程中，它或许有许多个输入值，或许没有。它或许有一个输出值（ return 值），或许没有。")]),s._v(" "),a("blockquote",[a("p",[s._v("如果你计划使用函数式编程，你应该尽可能多地使用函数，而不是程序。你所有编写的 function 应该接收输入值，并且返回输出值。（这么做的原因是多方面的，后续会一一介绍）")])]),s._v(" "),a("p",[s._v("这里，输入值就是函数传参，输出值就是"),a("code",[s._v("return")]),s._v("的东西。（如果你没有 return 值，或者你使用 return;，那么则会隐式地返回 undefined 值。）")]),s._v(" "),a("h3",{attrs:{id:"return-思考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#return-思考"}},[s._v("#")]),s._v(" return 思考")]),s._v(" "),a("ul",[a("li",[s._v("思考以下代码：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(x) {\n    if (x > 10) return x + 1;\n\n    var y = x / 2;\n\n    if (y > 3) {\n        if (x % 2 == 0) return x;\n    }\n\n    if (y > 1) return y;\n\n    return x;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("foo(2) 返回什么？ foo(4) 返回什么？ foo(8)， foo(12) 呢？")]),s._v(" "),a("ul",[a("li",[s._v("将上述代码变形，请思考:")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(x) {\n    var retValue;\n\n    if (retValue == undefined && x > 10) {\n        retValue = x + 1;\n    }\n\n    var y = x / 2;\n\n    if (y > 3) {\n        if (retValue == undefined && x % 2 == 0) {\n            retValue = x;\n        }\n    }\n\n    if (retValue == undefined && y > 1) {\n        retValue = y;\n    }\n\n    if (retValue == undefined) {\n        retValue = x;\n    }\n\n    return retValue;\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br"),a("span",{staticClass:"line-number"},[s._v("25")]),a("br")])]),a("p",[s._v("这样写会更容易理解吗？")]),s._v(" "),a("p",[s._v("在每个 retValue 可以被设置的分支， 这里都有个"),a("strong",[s._v("守护者")]),s._v("以确保 retValue 没有被设置过才执行。（？）")]),s._v(" "),a("p",[s._v("相比在函数中提早使用 return，我们更应该用常用的流控制（ if 逻辑 ）来控制 retValue 的赋值。到最后，我们 return retValue。")]),s._v(" "),a("p",[s._v("用 return 来实现流控制，会创造更多的隐含意义。")]),s._v(" "),a("ul",[a("li",[s._v("再来思考以下代码：")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("// 通过一个函数修改变量 y 的值\nvar y;\n\nfunction foo(x) {\n    y = (2 * Math.pow( x, 2 )) + 3;\n}\n\nfoo( 2 );\n\ny;    \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("但是我们也可以这样写：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function foo(x) {\n    return (2 * Math.pow( x, 2 )) + 3;\n}\n\nvar y = foo( 2 );\n\ny; \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("后一个版本更有优势吗？")]),s._v(" "),a("p",[s._v("答案是肯定的：有！")]),s._v(" "),a("p",[s._v("后一个版本中的 return 表示一个显式输出，而前者的 y 赋值是一个隐式输出。")]),s._v(" "),a("p",[a("strong",[s._v("通常，开发人员喜欢显式模式而不是隐式模式。")])]),s._v(" "),a("p",[s._v("为什么说后者 return 出来的就是显式的？而前者的 y 赋值是隐式的？")]),s._v(" "),a("p",[s._v("这个例子可以给你答案：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function sum(list) {\n    var total = 0;\n    for (let i = 0; i < list.length; i++) {\n        if (!list[i]) list[i] = 0; // list 使用了 nums 的引用，不是对 [1,3,9,..] 的值复制，而是引用复制。\n\n        total = total + list[i];\n    }\n\n    return total;\n}\n\nvar nums = [ 1, 3, 9, 27, , 84 ];\n\nsum( nums );            // 124\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("这段代码，除了 return 的输出，还有没有其它输出可能改变到函数外部参数 nums 的值？")]),s._v(" "),a("p",[s._v("是有的！就是在注释的一行，我们无意中改变了 nums 。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("console.log(nums) // [1, 3, 9, 27, 0, 84]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("JS 对数组、对象和函数都使用引用和引用复制，我们可以很容易地从函数中创建输出，即使是无心的。")]),s._v(" "),a("p",[a("strong",[s._v("这个隐式函数输出在函数式编程中有一个特殊的名称：副作用。")])]),s._v(" "),a("p",[s._v("没有副作用的函数也有一个特殊的名称："),a("strong",[s._v("纯函数")]),s._v("，这个概念十分重要，后面对有更多讨论！")]),s._v(" "),a("h3",{attrs:{id:"高阶函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#高阶函数"}},[s._v("#")]),s._v(" 高阶函数")]),s._v(" "),a("p",[s._v("一个函数如果可以接受或返回一个甚至多个函数，它被叫做高阶函数。")]),s._v(" "),a("p",[s._v("其中最强大的就是：【闭包】。")]),s._v(" "),a("p",[s._v("我们将在的后续举例中大量使用闭包。它可能是所有函数式编程中最重要的基础。")]),s._v(" "),a("p",[s._v("此处举一小例：")]),s._v(" "),a("p",[s._v("假设你需要将两个值相加，一个你已经知道，另一个还需要后面才能知道，你可以使用闭包来"),a("strong",[s._v("记录")]),s._v("第一个输入值：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function makeAdder(x) {\n    return function sum(y){\n        return x + y;\n    };\n}\n\n//我们已经分别知道作为第一个输入的 10 和 37\nvar addTo10 = makeAdder( 10 );\nvar addTo37 = makeAdder( 37 );\n\n// 紧接着，我们指定第二个参数\naddTo10( 3 );            // 13\naddTo10( 90 );            // 100\n\naddTo37( 13 );            // 50\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("这种在连续函数调用中指定输入，是函数式编程中非常普遍的形式。")]),s._v(" "),a("p",[s._v("它可分为两类："),a("strong",[s._v("偏函数应用")]),s._v("和"),a("strong",[s._v("柯里化")]),s._v("。后续会展开。")]),s._v(" "),a("h3",{attrs:{id:"丢掉-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#丢掉-this"}},[s._v("#")]),s._v(" 丢掉 this")]),s._v(" "),a("p",[s._v("JavaScript 中的 this 绑定规则是真的难记，好消息是我们将把 this 丢弃掉，不去理会它。")]),s._v(" "),a("p",[s._v("这样做的内核原因是：this 是函数的一个隐式的输入参数。前面我们提到"),a("strong",[s._v("通常，开发人员喜欢显式模式而不是隐式模式。")]),s._v("，这样的隐式输入违背了我们的原则。")]),s._v(" "),a("h3",{attrs:{id:"具名函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#具名函数"}},[s._v("#")]),s._v(" 具名函数")]),s._v(" "),a("p",[s._v("我们提倡要用具名函数，而不是匿名函数，这更有利于我们语义化代码，比如"),a("code",[s._v("getPreferredName(..)")]),s._v("，操作意图很明确，并且可以很好的回溯问题，防止出现 "),a("code",[s._v("(anonymous function)")]),s._v(" 。")]),s._v(" "),a("p",[s._v("但是 => 箭头函数除外，箭头函数还是得有效利用。")]),s._v(" "),a("p",[s._v("=> 箭头函数令人兴奋的地方在于它几乎完全遵循函数的数学符号，特别是像 Haskell 这样的函数式编程语言。它能简化、优化代码片段中的空间。")]),s._v(" "),a("h2",{attrs:{id:"阶段小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#阶段小结"}},[s._v("#")]),s._v(" 阶段小结")]),s._v(" "),a("p",[s._v("函数是强大的！")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("我们学习函数式编程的全部理由是为了书写更具可读性的代码。")])]),s._v(" "),a("li",[a("p",[s._v("程序中，函数不仅仅是一个语句或者操作的集合，而是需要一个或多个输入（理想情况下只需一个！）和一个输出。开发人员喜欢显式输入输出而不是隐式输入输出。")])]),s._v(" "),a("li",[a("p",[s._v("函数内部的函数可以取到闭包外部变量，并记住它们以备日后使用。这是所有程序设计中最重要的概念之一，也是函数式编程的基础。")])]),s._v(" "),a("li",[a("p",[s._v("要警惕匿名函数，特别是 => 箭头函数。虽然在编程时用起来很方便，但是会对增加代码阅读的负担。")])]),s._v(" "),a("li",[a("p",[s._v("别用 this 敏感的函数。这不需要理由。")])])])])}),[],!1,null,null,null);n.default=e.exports}}]);