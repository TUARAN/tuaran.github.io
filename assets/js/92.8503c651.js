(window.webpackJsonp=window.webpackJsonp||[]).push([[92],{592:function(e,n,s){"use strict";s.r(n);var a=s(2),t=Object(a.a)({},(function(){var e=this,n=e.$createElement,s=e._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("接上一篇"),s("a",{attrs:{href:"https://juejin.cn/post/7010532564817412109",target:"_blank",rel:"noopener noreferrer"}},[e._v("《听君一席话，如听一席话，解释解释“惰性求值”~》"),s("OutboundLink")],1),e._v("，有掘友问：“我懂惰性求值的意思了，但是在 JS 中如何实现 thunk 的呢？”")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/727569b82364495b8ebbd694c81102e2~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),s("p",[e._v("JS 不像 Haskell，其自身从语言设计层面不支持惰性求值，但是可以通过语法去 "),s("strong",[e._v("模拟实现")]),e._v(" 这一特性；")]),e._v(" "),s("p",[e._v("想一想，我们可以用什么来 JS 语法来模拟这一“延迟计算”的特性？")]),e._v(" "),s("p",[e._v("没思路的话，看前篇这一句：")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cf9bc31b5bcc46b0b18b2d6b235c309c~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),s("p",[e._v("在《Haskell趣学指南》中，thunk 被翻译成 "),s("strong",[e._v("保证")]),e._v("；")]),e._v(" "),s("p",[e._v("在《Haskell 函数式编程入门》，thunk 被解释为：")]),e._v(" "),s("blockquote",[s("p",[e._v("thunk 意为形实替换程序（有时候也称为延迟计算，suspended computation）。它指的是在计算的过程中，一些函数的参数或者一些结果通过一段程序来代表，这被称为 thunk。"),s("strong",[e._v("可以简单地把 thunk 看做是一个未求得完全结果的表达式与求得该表达式结果所需要的环境变量组成的函数，这个表达式与环境变量形成了一个无参数的闭包（parameterless closure）")]),e._v("，所以 thunk 中有求得这个表达式所需要的所有信息，只是在不需要的时候不求而已。")])]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("那意思是用 Promise 模拟吗？")]),e._v(" "),s("p",[e._v("事实上，不行！")]),e._v(" "),s("p",[s("code",[e._v("Promise")]),e._v(" 一旦执行，它就开始执行了，你只知道是在 "),s("code",[e._v("Pending")]),e._v("，但不知道是刚开始执行，或者是快执行完了，还是其它哪个执行阶段；获取 "),s("code",[e._v("Promise")]),e._v(" 的时候，内部的异步任务就已经启动了，执行无法中途取消（这也是 Promise 的弊端之一：）；")]),e._v(" "),s("p",[e._v("代码🌰")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6826885e79bf44fa942be55c6ec3a08c~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),s("p",[e._v("Promise 是立即求值，不是惰性求值！")]),e._v(" "),s("hr"),e._v(" "),s("p",[e._v("那手上还有什么牌？")]),e._v(" "),s("p",[e._v("“延迟执行”不就是“暂停以后再执行”嘛？"),s("code",[e._v("thunk")]),e._v("更像是 "),s("code",[e._v("Generator")]),e._v(" ！！👏")]),e._v(" "),s("p",[e._v("赋值的时候，我不进行计算，把你包装成一个 "),s("code",[e._v("<suspended>")]),e._v(" 暂停等待，等你调用 "),s("code",[e._v("next()")]),e._v(" 的时候，我再计算；")]),e._v(" "),s("p",[e._v("代码🌰")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/cd3f14e59a704f8eac016ef3c462f67e~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),s("p",[e._v("这不就是最简单版本的 JS 惰性求值 Thunk 的实现吗？")]),e._v(" "),s("p",[e._v("Haskell 中的无限列表不就是 MDN 中 Generator 所实现的 "),s("a",{attrs:{href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator",target:"_blank",rel:"noopener noreferrer"}},[e._v("无限迭代器"),s("OutboundLink")],1),e._v(" 吗？")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('function* idMaker(){\n    let index = 0;\n    while(true)\n        yield index++;\n}\n\nlet gen = idMaker(); // "Generator { }"\n\nconsole.log(gen.next().value);\n// 0\nconsole.log(gen.next().value);\n// 1\nconsole.log(gen.next().value);\n// 2\n// ...\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br")])]),s("p",[s("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6a5e2c25cbde4a5f8cabf9bbfbf1a6c5~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),e._v(" "),s("p",[e._v("实际上 Lazy.js 也正是借助 Generator 实现“惰性”的！")]),e._v(" "),s("p",[e._v("以实现 "),s("code",[e._v("take")]),e._v(" 方法为例🌰：")]),e._v(" "),s("p",[e._v("在 Haskell 中，"),s("code",[e._v("take")]),e._v(" 函数可以从头连续地取得一个列表的几个元素；")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Prelude> take 3 [1,2,3,4,5]\n[1,2,3]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("JS 模拟实现 "),s("code",[e._v("take")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("function* take(n,items){\n  let i = 0;\n  if (n < 1) return;\n  for (let item of items) {\n    yield item;\n    i++;\n    if (i >= n) {\n      return;\n    }\n  }\n}\n\nlet thunk=take(3,[1,2,3,4,5])\n\nconsole.log(thunk.next()) // {value: 1, done: false}\nconsole.log(thunk.next()) // {value: 2, done: false}\nconsole.log(thunk.next()) // {value: 3, done: false}\nconsole.log(thunk.next()) // {value: undefined, done: true} \n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br")])]),s("p",[e._v("使用 lazy.js 是类似这样调用的：")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("Lazy(stream)\n  .take(5) // 仅仅阅读数据中的前五块内容\n  .each(processData);\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br")])]),s("hr"),e._v(" "),s("p",[s("strong",[e._v("小结")])]),e._v(" "),s("p",[e._v("专栏介绍引用的是这句话：")]),e._v(" "),s("p",[e._v("如果要整体了解一个人的核心 JavaScript 技能，我最感兴趣的是他们会如何使用闭包以及如何充分利用异步。—— Jake Archibald")]),e._v(" "),s("p",[e._v("再回看 wiki 上关于闭包的这句解释：")]),e._v(" "),s("ul",[s("li",[e._v("闭包的用途："),s("code",[e._v("因为闭包只有在被调用时才执行操作")]),e._v("（暂且不论用于生成这个闭包对象本身的开销，比如 C++ 中按值捕获意味着执行复制构造函数），即“"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%83%B0%E6%80%A7%E6%B1%82%E5%80%BC",title:"惰性求值",target:"_blank",rel:"noopener noreferrer"}},[e._v("惰性求值"),s("OutboundLink")],1),e._v("”，所以它可以被用来定义控制结构。例如：在"),s("a",{attrs:{href:"https://zh.wikipedia.org/wiki/Smalltalk",title:"Smalltalk",target:"_blank",rel:"noopener noreferrer"}},[e._v("Smalltalk"),s("OutboundLink")],1),e._v("语言中，所有的控制结构，包括分支条件（if/then/else）和循环（while和for），都是通过闭包实现的。用户也可以使用闭包定义自己的控制结构。")])]),e._v(" "),s("p",[e._v("现在看来，惰性求值似乎能连接“如何使用闭包”和“如何充分利用异步”！！")]),e._v(" "),s("p",[e._v("“惰性”的思想深入函数式编程，还有最重要的 Monad，把具有“副作用”的部分延后处理，也与“惰性”呼应，后面有机会再讨论~")]),e._v(" "),s("p",[e._v("好啦，以上便是本篇分享~")]),e._v(" "),s("p",[e._v("掘文不易，点赞鼓励👍👍👍")]),e._v(" "),s("blockquote",[s("p",[e._v("我是掘金安东尼，公众号同名，输出暴露输入，技术洞见生活，再会~")])])])}),[],!1,null,null,null);n.default=t.exports}}]);