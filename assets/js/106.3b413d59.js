(window.webpackJsonp=window.webpackJsonp||[]).push([[106],{608:function(s,e,a){"use strict";a.r(e);var n=a(2),l=Object(n.a)({},(function(){var s=this,e=s.$createElement,a=s._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("表达式是编程语言中最常用到的基础之一，本片让我们来看看在 Haskell 中表达式是怎样的？")]),s._v(" "),a("p",[s._v("先看个小例子感受一下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> isTwo n = if n==2 then True else False\nPrelude> isTwo 2\nTrue\nPrelude> isTwo 3\nFalse\nPrelude> :t isTwo\nisTwo :: (Eq a, Num a) => a -> Bool\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("这是一个非常简单的 if..then..else 表达式，isTwo 是一个函数，n 是入参；可以看到，Haskell 的表达式并没有像在 JS 中的括号进行包裹；")]),s._v(" "),a("p",[s._v("当然，你也可以写像 JS 中的等号运算符；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> isFive = (==5)\nPrelude> isFive 5\nTrue\nPrelude> :t isFive\nisFive :: (Eq a, Num a) => a -> Bool\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("和 JS 还有一个大不同是：Hskell 里的 if..then..else 的 else 后的表达式不可省略；")]),s._v(" "),a("p",[s._v("也就是说，必须定义条件成立的时候返回的值，也必须定义条件不成立的时候返回的值，并且两者返回的类型必须相同，这样一定程度上保证了函数定义的完整性。")]),s._v(" "),a("p",[s._v("实际上，if..then..else 是一种结构性的表达式，也可以理解为一种运算符，属于："),a("strong",[s._v("混合位置运算符")]),s._v("；")]),s._v(" "),a("p",[s._v("而普通的加法，处于两个参数中间，称为："),a("strong",[s._v("中缀运算符")]),s._v("；")]),s._v(" "),a("p",[s._v("函数，位于一个参数前面，可理解为："),a("strong",[s._v("前缀运算符")]),s._v("；")]),s._v(" "),a("p",[s._v("没错，函数式编程的“输入 => 计算 => 得值”的思想处处都有体现；")]),s._v(" "),a("p",[s._v("看了 if else ，再看看 switch 怎么写：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('Prelude> :{\nPrelude| week n = case n of\nPrelude|     1 -> "Mon"\nPrelude|     2 -> "Tues"\nPrelude|     3 -> "Wed"\nPrelude|     4 -> "Thurs"\nPrelude|     5 -> "Fri"\nPrelude|     6 -> "Sat"\nPrelude|     7 -> "Sun"\nPrelude|     _ -> error "invalid"\nPrelude| :}\nPrelude> week 4\n"Thurs"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("Haskell 中无需 break 关键字，当它匹配到一个条件后，就会自动跳出；")]),s._v(" "),a("p",[s._v("_ 下划线是定义默认的其它条件；")]),s._v(" "),a("p",[s._v("还有另一种方式可以表达条件运算 —— 模式匹配；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :{\nPrelude| abs4 n\nPrelude|     | n > 4 = n\nPrelude|     | otherwise = -n\nPrelude| :}\nPrelude> abs4 2\n-2\nPrelude> :t abs4\nabs4 :: (Ord p, Num p) => p -> p\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br")])]),a("p",[a("code",[s._v("|")]),s._v(" 将函数的参数按特定的条件分开；")]),s._v(" "),a("p",[s._v("在模式匹配中，更精确更有指向性的模式总是放在相对通用和宽泛的模式前面（优先匹配）；")]),s._v(" "),a("p",[s._v("本瓜觉得跟这里的"),a("strong",[s._v("模式匹配")]),s._v("跟"),a("strong",[s._v("责任链模式")]),s._v("有点类似，按照顺序去匹配，把更有可能正确的条件判断放在最前，优先去执行判断，满足条件立即跳出；")]),s._v(" "),a("p",[s._v("不过 JS 实现责任链要进行封装，Haskell 直接原生语法就支持，"),a("code",[s._v("|")]),s._v(" 就是对 if..then..else 的封装；")]),s._v(" "),a("p",[s._v("前文已提到：加号、减号等，这些本质和函数是一样的，"),a("strong",[s._v("函数也是运算符")]),s._v("，加减号也是函数!")]),s._v(" "),a("p",[s._v("可以在 GHC 控制台打印类型看看：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :t (+)\n(+) :: Num a => a -> a -> a\nPrelude> :t (-)\n(-) :: Num a => a -> a -> a\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("只不过它们属于不同位置的运算符（前缀、中缀、后缀、混合位置）；")]),s._v(" "),a("p",[s._v("实际上，运算符共有 3 个属性：")]),s._v(" "),a("ul",[a("li",[a("ol",[a("li",[s._v("优先级（在 Haskell 中，有十个优先级（0 ~ 9））；")])])]),s._v(" "),a("li",[a("ol",{attrs:{start:"2"}},[a("li",[s._v("结合性（分为左结合、右结合、无结合）；")])])]),s._v(" "),a("li",[a("ol",{attrs:{start:"3"}},[a("li",[s._v("位置（前、中、后、混合）；")])])])]),s._v(" "),a("p",[s._v("提供一个优先级和结合性的表：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b941922b09b84460a81002df3ce7b7ca~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("p",[a("sup",[s._v("图片来源：异步社区")])]),s._v(" "),a("p",[s._v("比如运算符 "),a("code",[s._v("!!")]),s._v(" ：表示从一个列表中取出第 n 个元素（从 0 开始）")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> [1,2,3,4,5]!! 1\n2\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("再比如 "),a("code",[s._v("mod")]),s._v(" ：表示取余")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> mod 7 2\n1\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("有一个很重要的运算符要特别提醒："),a("code",[s._v("$")])]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> :t ($)\n($) :: (a -> b) -> a -> b\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("用来干嘛的呢？")]),s._v(" "),a("p",[s._v("当你想定义 "),a("code",[s._v("f (g (h x))")]),s._v(" 时，可以简写为 "),a("code",[s._v("f $ g $ h x")]),s._v(" ，这样写函数的连续调用更轻便、易读；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("Prelude> let f1 = (*2)\nPrelude> let f2 = (+1)\nPrelude> f1 $ f2 7\n16\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("自右向左调用，回答了之前 compose 自右向左调的原因：与函数书写的嵌套顺序一致；")]),s._v(" "),a("p",[a("code",[s._v("$")]),s._v("、"),a("code",[s._v("$!")]),s._v("、"),a("code",[s._v("$!!")]),s._v(" 后面还有大用处（惰性求值），先在这里作简单认识；")]),s._v(" "),a("h2",{attrs:{id:"小结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),a("p",[s._v("本篇我们又学习了 Haskell 的新的知识点：")]),s._v(" "),a("ol",[a("li",[s._v("if else 是怎么写的，与 JS 差异在哪；")]),s._v(" "),a("li",[s._v("switch 是怎么写的，与 JS 差异在哪；")]),s._v(" "),a("li",[s._v("模式匹配（与责任链模式类似）；")]),s._v(" "),a("li",[s._v("函数与运算符等价（非常重要）；")]),s._v(" "),a("li",[s._v("运算符的三个属性；")]),s._v(" "),a("li",[s._v("一些特殊的运算符，比如："),a("code",[s._v("!!")]),s._v("、"),a("code",[s._v("$")]),s._v(" 等；")])]),s._v(" "),a("p",[s._v("这些都是为后面揭开 Haskell 函数式编程神秘面纱的基础，期间也能一窥这种把函数当计算的奇妙之处，即使不能在开发生产中用到 Haskell，对于平常的编程思考也是大有裨益的，希望你有受用到~~")]),s._v(" "),a("p",[s._v("以上。")]),s._v(" "),a("blockquote",[a("p",[s._v("我是掘金安东尼，公众号同名，输出暴露输入，技术洞见生活，再会~")])])])}),[],!1,null,null,null);e.default=l.exports}}]);