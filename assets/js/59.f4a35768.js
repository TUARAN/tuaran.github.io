(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{551:function(s,n,e){"use strict";e.r(n);var a=e(2),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("BFS —— 广度优先搜索，咱们在数据结构课一定会学的。一起的还有前、中、后序遍历、DFS（深度优先搜索）， 它们都是二叉树遍历的算法！")]),s._v(" "),e("p",[s._v("实话讲，除了在学校学的时候大概知道这个，后来就陆续忘了......再后来，刷题可能会又捡起来，然后又忘......唉，学了忘，忘了学......")]),s._v(" "),e("p",[s._v("可是，这不就是学习的过程么？So，just do it!")]),s._v(" "),e("blockquote",[e("p",[s._v("深化复习的最佳限度就是 45 分钟或 9 遍 —— 薛金星")])]),s._v(" "),e("p",[s._v("一图胜千言：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2ce3677454774812b82162663a7bf2c7~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),e("p",[s._v("如图所示，就是 BFS 的遍历过程，逐层遍历，直至结束；")]),s._v(" "),e("p",[s._v("下面，通过动图具体来看结点进队列和出队列的过程：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3a6be54c692e4681a1a299d704e9333d~tplv-k3u1fbpfcp-watermark.image?",alt:"4529bf559c6a2d84d550eebaee027c3b7ae25069e4ec91f27b29a4c6358d6662.gif"}})]),s._v(" "),e("p",[s._v("直观感受，这和滑动窗口也类似呀，只不过窗口大小随着层级变化而变化；")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2143f7d1713447ab9c9ffd8844bdadf9~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),e("p",[s._v("以 BFS 算法遍历 Dom 树为例，JavaScript 实现：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v('function breadthFirstSearch(node) {  \n    var nodes = [];  \n    if (node != null) {  \n        var queue = [];  \n        queue.unshift(node); // 将初始节点放入队中\n        while (queue.length != 0) {\n            var item = queue.shift(); // 提取队首元素\n            nodes.push(item);\n            var children = item.children; \n            for (var i = 0; i < children.length; i++) // 遍历全部子元素\n                queue.push(children[i]);  // 推入队中\n        }  \n    }  \n    return nodes;  \n}\n\nbreadthFirstSearch(document.getElementsByTagName("body")[0])\n')])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br")])]),e("p",[s._v("递归实现：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function breadthFirstSearch(node) {\n    var nodes = [];\n    var i = 0;\n    if (!(node == null)) {\n        nodes.push(node);\n        breadthFirstSearch(node.nextElementSibling); // 优先遍历兄弟节点\n        node = nodes[i++];\n        breadthFirstSearch(node.firstElementChild); // 再遍历子节点\n    }\n    return nodes;\n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br")])]),e("p",[s._v("用递归来做更清晰，但如果层级太深，会导致堆栈溢出："),e("code",[s._v("Maximum call stack size exceeded")]),s._v("，可以在遍历过程中进行操作，不返回遍历数组即可；")]),s._v(" "),e("p",[s._v("递归真好用，来道题吧？")]),s._v(" "),e("ul",[e("li",[s._v("二叉搜索树的最近公共祖先")])]),s._v(" "),e("blockquote",[e("p",[s._v("题：给定一个二叉搜索树, 找到该树中两个指定节点的最近公共祖先。")]),s._v(" "),e("p",[s._v("百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”")])]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f7c6cd2e4298445aa2341682c41726b9~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),e("p",[s._v("示例 1:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8\n输出: 6 \n解释: 节点 2 和节点 8 的最近公共祖先是 6。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("示例 2:")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("输入: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4\n输出: 2\n解释: 节点 2 和节点 4 的最近公共祖先是 2, 因为根据定义最近公共祖先节点可以为节点本身。\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br")])]),e("p",[s._v("注：所有节点的值都是唯一的；p、q 为不同节点且均存在于给定的二叉搜索树中。")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/",target:"_blank",rel:"noopener noreferrer"}},[s._v("题目来源"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("解题思路：")]),s._v(" "),e("ol",[e("li",[s._v("二叉搜索树特点是，若它的左子树不空，则左子树上所有结点的值均小于它的根结点的值； 若它的右子树不空，则右子树上所有结点的值均大于它的根结点的值；")]),s._v(" "),e("li",[s._v("基于第 1 点，可得：若 p、q 都小于根节点，则在左子树上；若 p、q 都大于根节点，则都在右子树上；若一大一小，则最近公共祖先节点就是根节点；")])]),s._v(" "),e("p",[s._v("JavaScript 递归实现：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("const lowestCommonAncestor = (root, p, q) => {\n    if (p.val < root.val && q.val < root.val) {\n        return lowestCommonAncestor(root.left, p, q);\n    }\n    if (p.val > root.val && q.val > root.val) {\n        return lowestCommonAncestor(root.right, p, q);\n    }\n    return root;\n};\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br")])]),e("blockquote",[e("p",[s._v("我是掘金安东尼，公众号同名，输出暴露输入，技术洞见生活，下次再会~~")])])])}),[],!1,null,null,null);n.default=t.exports}}]);