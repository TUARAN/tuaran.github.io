(window.webpackJsonp=window.webpackJsonp||[]).push([[215],{710:function(s,a,n){"use strict";n.r(a);var e=n(2),t=Object(e.a)({},(function(){var s=this,a=s.$createElement,n=s._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[n("p",[s._v("持续创作，加速成长！这是我参与「掘金日新计划 · 6 月更文挑战」的第22天，"),n("a",{attrs:{href:"https://juejin.cn/post/7099702781094674468",title:"https://juejin.cn/post/7099702781094674468",target:"_blank",rel:"noopener noreferrer"}},[s._v("点击查看活动详情"),n("OutboundLink")],1)]),s._v(" "),n("hr"),s._v(" "),n("p",[s._v("我们前段时间写过好几篇关于 RxJS 的文章，RxJS api 操作符理解起来确实比较复杂，RxJS 是函数式编程中的 lodash 库，它消除了“时序”而带来的困扰，它核心思想是：函数式 + 响应式。")]),s._v(" "),n("p",[s._v("本篇， 要讲的不是 RxJS，而是另外一个函数式编程库 Ramda.js ，它同样也可以与 loadsh 对比理解，不过它的设计思路又不同了，它最大的特点是："),n("strong",[s._v("所有函数都可以柯里化传参")]),s._v("！以此来践行函数式编程思想。")]),s._v(" "),n("p",[n("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/6fffcb3d19ff4cef9f3218e93c76290f~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),n("p",[s._v("往下看，后面我们就能明白：Ramda 所有 Api 都能柯里化的意义所在。")]),s._v(" "),n("h2",{attrs:{id:"function-first-data-last"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#function-first-data-last"}},[s._v("#")]),s._v(" "),n("strong",[s._v("Function first，Data last")])]),s._v(" "),n("p",[s._v("在 lodash 中，我们是这样写的，")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var square = n => n * n;\n_.map([4, 8], square)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("p",[s._v("参数在前，执行函数在后。")]),s._v(" "),n("p",[s._v("而在 Ramda 中，强调："),n("strong",[s._v("函数在前，参数在后")]),s._v("。")]),s._v(" "),n("p",[s._v("这样做有什么好处呢？")]),s._v(" "),n("p",[s._v("就是为了更好实现：柯里化。柯里化只需要参数一个一个的在后追加")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var R = require('ramda');\nR.map(square, [4, 8])\n\n// 等同于\n\nvar R = require('ramda');\nR.map(square)([4, 8])\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br")])]),n("p",[s._v("再举个栗子：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var R = require('ramda');\n\nconst odd = x => x%2 === 1\nconst data = [3, 5, 6];\n\nR.filter(odd, data); // [3, 5]\n\n// 等同于\nR.filter(odd)(data); // [3, 5]\n\n// 也可以延迟调用\nconst filter1 = R.filter(odd);\n// filter1 等待参数的传入\n// 后续再传入 data\nconst filter2 = filter1(data)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br"),n("span",{staticClass:"line-number"},[s._v("7")]),n("br"),n("span",{staticClass:"line-number"},[s._v("8")]),n("br"),n("span",{staticClass:"line-number"},[s._v("9")]),n("br"),n("span",{staticClass:"line-number"},[s._v("10")]),n("br"),n("span",{staticClass:"line-number"},[s._v("11")]),n("br"),n("span",{staticClass:"line-number"},[s._v("12")]),n("br"),n("span",{staticClass:"line-number"},[s._v("13")]),n("br"),n("span",{staticClass:"line-number"},[s._v("14")]),n("br"),n("span",{staticClass:"line-number"},[s._v("15")]),n("br")])]),n("p",[s._v("如果不借用 Ramda.js , 需要自行实现柯里化，就会显得麻烦：")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const _curry = f => a => b => f(a, b)\nconst odd = x => x%2 === 1\n\nconst _filter = _curry( (fn, arr) => arr.filter(fn) );\n_filter(odd)([3,5,6]) // [3, 5]\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("Ramda 非常强调："),n("code",[s._v("R.api(fn, data)")]),s._v(" 这样的范式；")]),s._v(" "),n("h2",{attrs:{id:"api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#api"}},[s._v("#")]),s._v(" API")]),s._v(" "),n("p",[s._v("来看看 Ramda 有哪些神奇的、好用的、常用的 API~")]),s._v(" "),n("ul",[n("li",[s._v("map")])]),s._v(" "),n("p",[s._v("map 让每个成员依次执行通过某个函数；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const double = x => x * 2;\n\nR.map(double, [1, 2, 3]); //=> [2, 4, 6]\n\nR.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("filter")])])]),s._v(" "),n("p",[s._v("用于过滤；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const isEven = n => n % 2 === 0;\n\nR.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\nR.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("add")])])]),s._v(" "),n("p",[s._v("求和；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("R.add(2, 3);       //=>  5\nR.add(7)(10);      //=> 17\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("multiply")])])]),s._v(" "),n("p",[s._v("求积；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("R.multiply(2)(5)  // 10\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("compose")])])]),s._v(" "),n("p",[s._v("函数组合，从右到左；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("R.compose(Math.abs, R.add(1), R.multiply(2))(-4)\n\n// |-4*2 + 1|，等于 7\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("pipe")])])]),s._v(" "),n("p",[s._v("函数组合，从左到右；")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("var negative = x => -1 * x;\nvar increaseOne = x => x + 1;\n\nvar f = R.pipe(Math.pow, negative, increaseOne)(3,4);\n\n// -(3^4) + 1 ，等于 -80\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br"),n("span",{staticClass:"line-number"},[s._v("6")]),n("br")])]),n("ul",[n("li",[n("strong",[s._v("curry")])])]),s._v(" "),n("p",[s._v("将多个参数转换为单个参数")]),s._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[s._v("const addFourNumbers = (a, b, c, d) => a + b + c + d;\n\nconst curriedAddFourNumbers = R.curry(addFourNumbers);\n\ncurriedAddFourNumbers(1, 2)(3)(4)\n")])]),s._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[s._v("1")]),n("br"),n("span",{staticClass:"line-number"},[s._v("2")]),n("br"),n("span",{staticClass:"line-number"},[s._v("3")]),n("br"),n("span",{staticClass:"line-number"},[s._v("4")]),n("br"),n("span",{staticClass:"line-number"},[s._v("5")]),n("br")])]),n("p",[s._v("Ramda 还有其它丰富的 api，也可以结合 compose/pipe 自定义特定功能函数，用这些方法来简化程序，让代码变成函数式风格；")]),s._v(" "),n("p",[s._v("以上的例子都可在 "),n("a",{attrs:{href:"https://jsrun.net/DTNKp/edit",target:"_blank",rel:"noopener noreferrer"}},[n("OutboundLink")],1),n("a",{attrs:{href:"https://jsrun.net/DTNKp/edit",target:"_blank",rel:"noopener noreferrer"}},[s._v("https://jsrun.net/DTNKp/edit"),n("OutboundLink")],1),s._v(" 可以在线运行测试；")]),s._v(" "),n("p",[s._v("更多 Ramda api 可见文档：https://ramda.cn/")]),s._v(" "),n("blockquote",[n("p",[s._v("OK，以上便是本篇分享。点赞关注评论，为好文助力👍")]),s._v(" "),n("p",[s._v("我是掘金安东尼 🤠 100 万阅读量人气前端技术博主 💥 INFP 写作人格坚持 1000 日更文 ✍ 关注我，陪你一起度过漫长编程岁月 🌏")])])])}),[],!1,null,null,null);a.default=t.exports}}]);