(window.webpackJsonp=window.webpackJsonp||[]).push([[153],{647:function(s,n,a){"use strict";a.r(n);var t=a(2),e=Object(t.a)({},(function(){var s=this,n=s.$createElement,a=s._self._c||n;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("p",[s._v("本文为稀土掘金技术社区首发签约文章，14天内禁止转载，14天后未获授权禁止转载，侵权必究!")]),s._v(" "),a("h2",{attrs:{id:"专栏简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#专栏简介"}},[s._v("#")]),s._v(" 专栏简介")]),s._v(" "),a("blockquote",[a("p",[s._v("作为一名 5 年经验的 JavaScript 技能拥有者，笔者时常在想，它的核心是什么？后来我确信答案是：闭包和异步。而函数式编程能完美串联了这两大核心，从高阶函数到函数组合；从无副作用到延迟处理；从函数响应式到事件流，从命令式风格到代码重用。所以，本专栏将从函数式编程角度来再看 JavaScript 精要，欢迎关注！"),a("a",{attrs:{href:"https://juejin.cn/column/7140154838981017613",title:"https://juejin.cn/column/7140154838981017613",target:"_blank",rel:"noopener noreferrer"}},[s._v("传送门"),a("OutboundLink")],1)])]),s._v(" "),a("h2",{attrs:{id:"前文回顾"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前文回顾"}},[s._v("#")]),s._v(" 前文回顾")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7144851873411891207",title:"https://juejin.cn/post/7144851873411891207",target:"_blank",rel:"noopener noreferrer"}},[s._v("# ✨从历史讲起，JavaScript 基因里写着函数式编程"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7147454421822078984",title:"https://juejin.cn/post/7147454421822078984",target:"_blank",rel:"noopener noreferrer"}},[s._v("# ✨从柯里化讲起，一网打尽 JavaScript 重要的高阶函数"),a("OutboundLink")],1)]),s._v(" "),a("p",[a("a",{attrs:{href:"https://juejin.cn/post/7152279659969773598",target:"_blank",rel:"noopener noreferrer"}},[s._v("# ✨从纯函数讲起，一窥最深刻的函子 Monad"),a("OutboundLink")],1)]),s._v(" "),a("p",[s._v("我们从闭包起源开始、再到百变柯里化等一票高阶函数，再讲到纯函数、纯函数的组合以及简化演算；")]),s._v(" "),a("p",[s._v("学到了：")]),s._v(" "),a("ol",[a("li",[s._v("闭包的设计就是因为 lambda 表达式只能接受一个参数的设计导致的，诞生 1930 ；")]),s._v(" "),a("li",[s._v("柯里化是闭包的孪生子，柯里化思想是高阶函数的重要指导；")]),s._v(" "),a("li",[s._v("原来编程函数也可以和数学函数一样运算推导，无副作用的纯函数、函数组合，代码更易读；")])]),s._v(" "),a("p",[s._v("本篇将展开“延迟处理”这一话题，闲言少叙，冲了~")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2feb830fa0a8482abfa20f5caeb3f651~tplv-k3u1fbpfcp-watermark.image?",alt:"21a4462309f790523982fc3802f3d7ca7bcbd513.gif"}})]),s._v(" "),a("h2",{attrs:{id:"延迟处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#延迟处理"}},[s._v("#")]),s._v(" 延迟处理")]),s._v(" "),a("p",[s._v("认真读前面几篇，虽然没有专门讲“延迟处理”，但实际上处处都体现着“延迟处理”。")]),s._v(" "),a("p",[s._v("首先闭包是延迟处理：函数在声明的时候，确定了上下作用域关系。比如以下代码：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function addA(A){\n    return function(B){\n        return B+A\n    }\n}\n\nlet count = addA(7)\nconsole.log(count(8)) // 15\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("调用 "),a("code",[s._v("addA(7)")]),s._v(" 函数，它说：我并不会执行运算，而会返回给你一个新的函数，以及一个“闭包”，这个闭包里面是被引用的变量值。等到时候你要计算的时候，再从这里面拿值就行了~")]),s._v(" "),a("p",[s._v("其次，柯里化和闭包同宗同源，由 "),a("code",[s._v("add(1,2,3)")]),s._v(" 柯里化为 "),a("code",[s._v("add(1)(2)(3)()")]),s._v(",在判定最后的参数为空之前，都是一个待执行的函数，不会进行真正的运算处理。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function addCurry() {\n    let arr = [...arguments]\n    let fn = function () {\n        if(arguments.length === 0) {\n\t    return arr.reduce((a, b) => a + b) // 当参数为空时才执行求和计算；\n        } else {\n            arr.push(...arguments)\n            return fn\n        }\n    }\n    return fn\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("接着，纯函数中，我们不能保证一直写出不带副作用的函数，HTTP 操作/ IO 操作/ DOM 操作等这些行为是业务场景必做的，于是想了个法子：用一个“盒子”把不纯的函数包裹住，然后一个盒子连着一个盒子声明调用关系，直到最后执行 "),a("code",[s._v("monad.value()")]),s._v(" 时才会暴露出副作用，尽最大可能的限制住了副作用的影响，延迟了它的影响。")]),s._v(" "),a("p",[s._v("所以，“延迟处理”思想几乎是根植在函数式编程的每一个要点中~")]),s._v(" "),a("p",[s._v("还没完，从专栏的整体角度来看，至此行文已到中段，除了围绕“闭包”这一核心点，另外一个核心点“异步”也要逐渐拉开帷幕、闪亮登场。")]),s._v(" "),a("p",[a("strong",[s._v("延迟处理是在函数式编程背景下连接 JavaScript 闭包和异步两大核心的重要桥梁。")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5fb86509c9944fc0ab2e56803c4ad99b~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("h2",{attrs:{id:"惰性求值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性求值"}},[s._v("#")]),s._v(" 惰性求值")]),s._v(" "),a("p",[s._v("“延迟处理”在函数式编程语言中还有一个更加官方、学术的名称，即“惰性求值”。")]),s._v(" "),a("p",[s._v("🌰我们不妨再用一段代码作简要示例：")]),s._v(" "),a("p",[s._v("// 示例代码 1")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("myFunction")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("longCalculation1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("longCalculation2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("longCalculation3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br")])]),a("p",[s._v("这是一段求值函数，"),a("code",[s._v("result1、result2、result3")]),s._v(" 依次经过一段长运算，然后再走一段条件判断，return 结果；")]),s._v(" "),a("p",[s._v("这段代码的不合理之处在于，每次调用 "),a("code",[s._v("myFunction()")]),s._v(" 都要把 3 个 "),a("code",[s._v("longCalculation")]),s._v(" 计算，很耗时，结果只需要得到其中的某一个运算结果。")]),s._v(" "),a("p",[s._v("于是，根据问题，我们优化代码策略为：需要用到哪个计算，才计算哪个。（言外之意：惰性求值）")]),s._v(" "),a("p",[s._v("// 示例代码 2")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("myFunction")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" c")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("longCalculation1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result1 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result1"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("longCalculation2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("if")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("result2 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("100")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n     "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("else")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" result3 "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("longCalculation3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" result3"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br")])]),a("p",[s._v("优化后的这个写法在逻辑上更合理，但是 "),a("code",[s._v("if...else...")]),s._v(" 嵌套总让人看的难受。")]),s._v(" "),a("p",[s._v("因为 JavaScript 本身不是惰性求值语言，它和比如 C 语言这类主流语言一样，是【及早求值】，惰性求值语言有比如 Haskell 这类纯粹的函数式编程语言，用 Haskell 实现上述函数为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("myFunction :: Int -> Int -> Int -> Int\nmyFunction a b c =\n  let result1 = longCalculation1 a b\n      result2 = longCalculation2 b c\n      result3 = longCalculation3 a c\n  in if result1 < 10\n       then result1\n       else if result2 < 100\n         then result2\n         else result3\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[s._v("看上去，这似乎和 JavaScript 示例代码 1 一样，但是它实际上实现的却是 JavaScript 示例代码 2 的效果；")]),s._v(" "),a("p",[s._v("在 GHC 编译器中，result1, result2, 和 result3 被存储为 "),a("strong",[s._v("“thunk”")]),s._v(" ，并且编译器知道在什么情况下，才需要去计算结果，否则将不会提前去计算！这太牛皮了~")]),s._v(" "),a("p",[s._v("在《Haskell 函数式编程入门》，thunk 被解释为：")]),s._v(" "),a("blockquote",[a("p",[s._v("thunk 意为形实替换程序（有时候也称为延迟计算，suspended computation）。它指的是在计算的过程中，一些函数的参数或者一些结果通过一段程序来代表，这被称为 thunk。可以简单地把 thunk 看做是一个未求得完全结果的表达式与求得该表达式结果所需要的环境变量组成的函数，这个表达式与环境变量形成了一个无参数的闭包（parameterless closure） ，所以 thunk 中有求得这个表达式所需要的所有信息，只是在不需要的时候不求而已。")])]),s._v(" "),a("p",[s._v("虽然 JavaScript 本身语言的设计不是惰性求值，但并不意味着它不能用惰性的思想来编程~")]),s._v(" "),a("p",[a("strong",[s._v("从惰性编程的角度来思考问题，可以消除代码中不必要的计算，也可以帮你重构程序，使之能更加直接地面向问题。")])]),s._v(" "),a("h2",{attrs:{id:"惰性编程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#惰性编程"}},[s._v("#")]),s._v(" 惰性编程")]),s._v(" "),a("p",[s._v("什么是惰性编程？")]),s._v(" "),a("p",[s._v("惰性编程是一种将对函数或请求的处理延迟到真正需要结果时进行的通用概念。")]),s._v(" "),a("p",[s._v("有很多应用程序都采用了这种概念，有的非常明显，有些则不太明显。")]),s._v(" "),a("p",[s._v("比如 JavaScript 的“父亲” Scheme 中就有简单的惰性编程，它有两个特殊的结构，"),a("code",[s._v("delay")]),s._v(" 和 "),a("code",[s._v("force")]),s._v("，delay 接收一个代码块，不会立即执行它们，而是将代码和参数作为一个 promise 存储起来。而 force promise 则会运行这段代码，产生一个返回值；")]),s._v(" "),a("p",[s._v("这里提到 promise？在 JS 中也有 Promise，它是 JS 实现惰性的关键吗？")]),s._v(" "),a("p",[s._v("我们不妨用代码来测试一下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('const st=()=>{\n    return new Promise((resolve,reject)=>{\n        setTimeout(()=>{\n            console.log("done promise")\n            resolve(true)\n        },1000)\n    })\n}\nlet a = st()\nconsole.log(a)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/471491980a3040119abd2819c99358f5~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("p",[s._v("可以看到，"),a("code",[s._v("Promise")]),s._v(" 并不是惰性的，它一旦执行，状态就转为 "),a("code",[s._v("Pending")]),s._v("，不能暂停。我们无法知道 "),a("code",[s._v("Promise")]),s._v(" 是刚开始执行，或者是快执行完了，还是其它哪个具体执行阶段；内部的异步任务就已经启动了，执行无法中途取消；这些问题也是面试中常考的 Promise 的缺点有哪些。")]),s._v(" "),a("p",[s._v("好在，后来，"),a("code",[s._v("Generator")]),s._v(" 函数的出现，把 JavaScript 异步编程带入了一个全新的阶段。")]),s._v(" "),a("p",[a("strong",[s._v("ES6 引入的 Generator ，为 JavaScript 赋予了惰性的能力！")]),s._v(" 👏")]),s._v(" "),a("h2",{attrs:{id:"generator"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#generator"}},[s._v("#")]),s._v(" Generator")]),s._v(" "),a("h3",{attrs:{id:"thunk"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#thunk"}},[s._v("#")]),s._v(" Thunk")]),s._v(" "),a("p",[a("code",[s._v("Generator")]),s._v(" 就像是 Haskell 中的 "),a("code",[s._v("thunk")]),s._v("，赋值的时候，我不进行计算，把你包装成一个 "),a("code",[s._v("<suspended>")]),s._v(" 暂停等待，等你调用 "),a("code",[s._v("next()")]),s._v(" 的时候，我再计算；")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("function* gen(x){\n const y = yield x + 6;\n return y;\n}\n\nconst g = gen(1);\ng.next() // { value: 7, done: false }\ng.next() // { value: undefined, done: true }\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("调用 "),a("code",[s._v("Generator")]),s._v(" 函数后，该函数并不执行，返回的也不是函数运行结果，而是一个指向内部状态的指针对象，也就是遍历器对象。下一步，必须调用遍历器对象的 "),a("code",[s._v("next")]),s._v(" 方法，使得指针移向下一个状态。")]),s._v(" "),a("p",[s._v("在异步场景下同样适用，将上述 promise 的测试代码改造为：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function * st1(){\n    setTimeout(()=>{\n        console.log("done promise")\n    },1000)\n    yield("done promise")\n}\nlet aThunk = st1()\nconsole.log(aThunk)\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b8f98917fac24bfca3ff85cd5d9be7c4~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("p",[s._v("只有执行 "),a("code",[s._v("aThunk.next()")]),s._v(" 时，异步才开始执行。")]),s._v(" "),a("h3",{attrs:{id:"迭代生成器"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迭代生成器"}},[s._v("#")]),s._v(" 迭代生成器")]),s._v(" "),a("p",[s._v("Promise 不能随用随停，而 Generator 可以。我们通过 Generator 生成的序列值是可以迭代的，迭代过程可以操作，比方说在循环中迭代生成器：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("//基本的生成器函数产生序列值。\nfunction* gen(){\n    yield 'first';\n    yield 'second';\n    yield 'third';\n}\n//创建生成器。\nvar generator = gen();\n\n//循环直到序列结束。\nwhile(true) {\n    //获取序列中的下一项。\n    let item = generator.next();\n    //下一个值等于 'third' 吗\n    if(item.value === 'third') {\n        break;\n    }\n    console.log('while', item.value);\n}\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br")])]),a("p",[s._v("当 "),a("code",[s._v("item.value === 'third'")]),s._v("，break 跳出循环，迭代结束。")]),s._v(" "),a("h3",{attrs:{id:"循环-请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#循环-请求"}},[s._v("#")]),s._v(" 循环+请求")]),s._v(" "),a("p",[s._v("综合循环和异步的问题，抛一个经典的面试题：")]),s._v(" "),a("blockquote",[a("p",[s._v("如何依次请求一个 api 数组中的接口，需保证一个请求结束后才开始另一个请求？")])]),s._v(" "),a("p",[s._v("代码实现如下：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("async function* generateSequence(items) {\n  for (const i of items) {\n    await new Promise(resolve => setTimeout(resolve, i));\n    yield i;\n  }\n}\n\n(async () => {\n  let generator = generateSequence(['3000','8000','1000','4000']);\n  for await (let value of generator) {\n    console.log(value);\n  }\n})();\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br")])]),a("p",[s._v("这里用 setTimeout 模拟了异步请求，代码可复制到控制台中自行跑一跑、试一试。")]),s._v(" "),a("h3",{attrs:{id:"无限序列"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#无限序列"}},[s._v("#")]),s._v(" 无限序列")]),s._v(" "),a("p",[s._v("在函数式编程语言中有一个特殊的数据结构 —— 无限列表，Generator 也可以帮助 JS 实现这一结构：")]),s._v(" "),a("p",[s._v("🌰比如生成一个无限增长的 id 序列：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('function* idMaker(){\n    let index = 0;\n    while(true)\n        yield index++;\n}\n\nlet gen = idMaker(); // "Generator { }"\n\nconsole.log(gen.next().value);\n// 0\nconsole.log(gen.next().value);\n// 1\nconsole.log(gen.next().value);\n// 2\n// ...\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br")])]),a("p",[s._v("🌰比如实现一个循环交替的无限序列：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('//一个通用生成器将无限迭代\n//提供的参数，产生每个项。\nfunction* alternate(...seq) {\n    while (true) {\n        for (let item of seq) {\n            yield item;\n        }\n    }\n}\n\n//使用新值创建新的生成器实例\n//来迭代每个项。\nlet alternator = alternator(\'one\', \'two\', \'three\');\n\n//从无限序列中获取前10个项。\nfor (let i = 0; i < 6; i++) {\n    console.log(`"${alternator.next().value}"`);\n}\n// "one"\n// "two"\n// "three"\n// "one"\n// "two"\n// "three"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br"),a("span",{staticClass:"line-number"},[s._v("9")]),a("br"),a("span",{staticClass:"line-number"},[s._v("10")]),a("br"),a("span",{staticClass:"line-number"},[s._v("11")]),a("br"),a("span",{staticClass:"line-number"},[s._v("12")]),a("br"),a("span",{staticClass:"line-number"},[s._v("13")]),a("br"),a("span",{staticClass:"line-number"},[s._v("14")]),a("br"),a("span",{staticClass:"line-number"},[s._v("15")]),a("br"),a("span",{staticClass:"line-number"},[s._v("16")]),a("br"),a("span",{staticClass:"line-number"},[s._v("17")]),a("br"),a("span",{staticClass:"line-number"},[s._v("18")]),a("br"),a("span",{staticClass:"line-number"},[s._v("19")]),a("br"),a("span",{staticClass:"line-number"},[s._v("20")]),a("br"),a("span",{staticClass:"line-number"},[s._v("21")]),a("br"),a("span",{staticClass:"line-number"},[s._v("22")]),a("br"),a("span",{staticClass:"line-number"},[s._v("23")]),a("br"),a("span",{staticClass:"line-number"},[s._v("24")]),a("br")])]),a("p",[s._v("由于 while 循环永远不会退出，for 循环将自己重复。也就是说，参数值会交替出现了。")]),s._v(" "),a("p",[s._v("无限序列是有现实意义的，很多数字组合都是无限的，比如素数，斐波纳契数，奇数等等；")]),s._v(" "),a("h2",{attrs:{id:"结语"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结语"}},[s._v("#")]),s._v(" 结语")]),s._v(" "),a("p",[s._v("看到这里，大家有没有感觉 Generator 和之前讲过的什么东西有点像？")]),s._v(" "),a("p",[s._v("纯函数的衍生 compose 组合函数，把一个一个函数组装、拼接形成链条；Generator 自定义生成序列，依次执行。二者有异曲同工之妙。前者侧重函数封装、后者侧重异步处理，但二者都有“延迟处理”的思想。真掘了！")]),s._v(" "),a("p",[s._v("JavaScript 也能借助 闭包、柯里化、组合函数、Generator 实现惰性编程，减少不必要的计算、精确控制序列的执行、实现无限列表等。。。")]),s._v(" "),a("p",[s._v("不愧是你，真胶水语言，啥都能干！")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/9ccd7fd489744702a5b28fe0dcad2682~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),a("p",[s._v("OK，以上便是本篇分享，专栏第 4 篇，希望各位工友喜欢~ 欢迎点赞、收藏、评论 🤟")]),s._v(" "),a("p",[s._v("后文会重点讲：JS 异步核心、响应式事件流、RxJS等，敬请期待~")]),s._v(" "),a("p",[s._v("关注专栏 "),a("a",{attrs:{href:"https://juejin.cn/column/7140154838981017613",title:"https://juejin.cn/column/7140154838981017613",target:"_blank",rel:"noopener noreferrer"}},[s._v("# JavaScript 函数式编程精要 —— 签约作者安东尼"),a("OutboundLink")],1)]),s._v(" "),a("blockquote",[a("p",[s._v("我是掘金安东尼 🤠 100 万人气前端技术博主 💥 INFP 写作人格坚持 1000 日更文 ✍ 关注我，安东尼陪你一起度过漫长编程岁月 🌏")])])])}),[],!1,null,null,null);n.default=e.exports}}]);