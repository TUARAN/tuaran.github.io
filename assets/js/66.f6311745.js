(window.webpackJsonp=window.webpackJsonp||[]).push([[66],{563:function(e,v,r){"use strict";r.r(v);var s=r(2),_=Object(s.a)({},(function(){var e=this,v=e.$createElement,r=e._self._c||v;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("hr"),e._v(" "),r("p",[e._v("接上一篇"),r("a",{attrs:{href:"https://juejin.cn/post/7029093184332365855",target:"_blank",rel:"noopener noreferrer"}},[e._v("《Js 异步处理演进，Callback=>Promise=>Observer》"),r("OutboundLink")],1),e._v("，可能不少掘友对 "),r("strong",[e._v("Observer")]),e._v(" 还心存疑虑，本篇继续解惑~")]),e._v(" "),r("blockquote",[r("p",[e._v("Observable 称它为可观察对象，它并不是 Angular 的东西，而是 ES7 的一种用来管理异步数据的标准。")])]),e._v(" "),r("p",[r("strong",[e._v("Observable 可观察对象是开辟一个连续的通信通道给观察者 Observer，彼此之前形成一种关系，而这种关系需要由 Subscription 来确立，而在整个通道中允许对数据进行转换我们称为操作符 Operator。")])]),e._v(" "),r("p",[e._v("有一个形象的比喻：")]),e._v(" "),r("p",[e._v("你订了一个银行卡余额变化短信通知的服务，那么这个时候，每次只要你转账或者是购买商品在使用这张银行卡消费之后，银行的系统就会给你推送一条短信，通知你消费了多少多少钱；")]),e._v(" "),r("p",[e._v("这个场景下，银行卡余额就是 Observable，用户就是 Observer，用户在银行办理这个服务，就是 Subscription，银行卡余额发生转账或购买商品产生了变动，就是 Operator。")]),e._v(" "),r("p",[e._v("将上面的过程转化为代码：")]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("import { Observable } from 'rxjs/Rx';\n\nlet sub = Observable\n    .interval(1000)\n    .map(second => second + '秒')\n    .subscribe(res => {\n        console.log(res);\n    });\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br")])]),r("p",[e._v("利用 Observable.interval 每隔 1 秒产生一个数据，然后交给 map 操作号将内容进行转换（银行卡余额发生变动），最后交给观察者打印结果（通知用户余额发生变化）。")]),e._v(" "),r("p",[e._v("如果你想取消这个服务，可以调用 "),r("code",[e._v("sub.unsubscribe()")]),e._v("；")]),e._v(" "),r("p",[r("strong",[e._v("整个过程都在体现一个思想：数据流！这和函数式编程思路一致，数据流就像是工厂流水线，从原材料到成品，经过一层层的处理，所见即所做，非常清晰！（分离材料与加工机器，就是分离 Observable 和 Subscribe）")])]),e._v(" "),r("p",[e._v("接下来，我们再具体看看 Observable 细节：")]),e._v(" "),r("ul",[r("li",[e._v("创建")])]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const Rx = require('rxjs/Rx')\n\nconst myObservable = Rx.Observable.create(observer => {\n  observer.next('foo');\n  setTimeout(() => observer.next('bar'), 1000);\n});\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br")])]),r("p",[e._v("我们可以调用 "),r("code",[e._v("Observable.create")]),e._v(" 方法来创建一个 "),r("code",[e._v("Observable")]),e._v("，入参是 "),r("code",[e._v("observer")]),e._v("，在函数内部通过调用 "),r("code",[e._v("observer.next()")]),e._v(" 便可生成有一系列值的一个 "),r("code",[e._v("Observable")]),e._v("。")]),e._v(" "),r("ul",[r("li",[e._v("内置方法")])]),e._v(" "),r("div",{staticClass:"language- line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[e._v("const observer = {\n\tnext: function(value) {\n\t\tconsole.log(value);\n\t},\n\terror: function(error) {\n\t\tconsole.log(error)\n\t},\n\tcomplete: function() {\n\t\tconsole.log('complete')\n\t}\n}\n")])]),e._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[e._v("1")]),r("br"),r("span",{staticClass:"line-number"},[e._v("2")]),r("br"),r("span",{staticClass:"line-number"},[e._v("3")]),r("br"),r("span",{staticClass:"line-number"},[e._v("4")]),r("br"),r("span",{staticClass:"line-number"},[e._v("5")]),r("br"),r("span",{staticClass:"line-number"},[e._v("6")]),r("br"),r("span",{staticClass:"line-number"},[e._v("7")]),r("br"),r("span",{staticClass:"line-number"},[e._v("8")]),r("br"),r("span",{staticClass:"line-number"},[e._v("9")]),r("br"),r("span",{staticClass:"line-number"},[e._v("10")]),r("br"),r("span",{staticClass:"line-number"},[e._v("11")]),r("br")])]),r("p",[r("code",[e._v("next")]),e._v("、"),r("code",[e._v("error")]),e._v("、"),r("code",[e._v("complete")]),e._v("，都是可选项；")]),e._v(" "),r("p",[e._v("打个比方：用户订牛奶厂商的牛奶，牛奶厂商是 Observable，用户是 Observer。用户打电话（subscribe）给牛奶商，牛奶商送牛奶（next），用户收到牛奶后喝牛奶；送奶过程可能发生意外，送奶失败（error）；或者送奶顺利全部完成（complete）；")]),e._v(" "),r("ul",[r("li",[e._v("Operator：RxJS 提供了大量的 API，熟悉他们需要时间和经验；")])]),e._v(" "),r("p",[r("strong",[e._v("创建数据流")])]),e._v(" "),r("ul",[r("li",[e._v("单值："),r("code",[e._v("of")]),e._v("、"),r("code",[e._v("empty")]),e._v("、"),r("code",[e._v("never")])]),e._v(" "),r("li",[e._v("多值："),r("code",[e._v("from")])]),e._v(" "),r("li",[e._v("定时："),r("code",[e._v("interval")]),e._v("、"),r("code",[e._v("timer")])]),e._v(" "),r("li",[e._v("事件："),r("code",[e._v("fromEvent")])]),e._v(" "),r("li",[e._v("Promise："),r("code",[e._v("fromPromise")])]),e._v(" "),r("li",[e._v("自定义："),r("code",[e._v("create")])])]),e._v(" "),r("p",[r("strong",[e._v("转换")])]),e._v(" "),r("ul",[r("li",[e._v("改变数据形态："),r("code",[e._v("map")]),e._v(", "),r("code",[e._v("mapTo")]),e._v(", "),r("code",[e._v("pluck")])]),e._v(" "),r("li",[e._v("过滤一些值："),r("code",[e._v("filter")]),e._v(", "),r("code",[e._v("skip")]),e._v(", "),r("code",[e._v("first")]),e._v(", "),r("code",[e._v("last")]),e._v(", "),r("code",[e._v("take")])]),e._v(" "),r("li",[e._v("时间轴上的操作："),r("code",[e._v("delay")]),e._v(", "),r("code",[e._v("timeout")]),e._v(", "),r("code",[e._v("throttle")]),e._v(", "),r("code",[e._v("debounce")]),e._v(", "),r("code",[e._v("audit")]),e._v(", "),r("code",[e._v("bufferTime")])]),e._v(" "),r("li",[e._v("累加："),r("code",[e._v("reduce")]),e._v(", "),r("code",[e._v("scan")])]),e._v(" "),r("li",[e._v("异常处理："),r("code",[e._v("throw")]),e._v(", "),r("code",[e._v("catch")]),e._v(", "),r("code",[e._v("retry")]),e._v(", "),r("code",[e._v("finally")])]),e._v(" "),r("li",[e._v("条件执行："),r("code",[e._v("takeUntil")]),e._v(", "),r("code",[e._v("delayWhen")]),e._v(", "),r("code",[e._v("retryWhen")]),e._v(", "),r("code",[e._v("subscribeOn")]),e._v(", "),r("code",[e._v("ObserveOn")])]),e._v(" "),r("li",[e._v("转接："),r("code",[e._v("switch")])])]),e._v(" "),r("p",[r("strong",[e._v("组合")])]),e._v(" "),r("ul",[r("li",[r("code",[e._v("concat")]),e._v(" 保持原来的序列顺序连接两个数据流")]),e._v(" "),r("li",[r("code",[e._v("merge")]),e._v(" 合并序列")]),e._v(" "),r("li",[r("code",[e._v("race")]),e._v(" 预设条件为其中一个数据流完成")]),e._v(" "),r("li",[r("code",[e._v("forkJoin")]),e._v(" 预设条件为所有数据流都完成")]),e._v(" "),r("li",[r("code",[e._v("zip")]),e._v(" 取各来源数据流最后一个值合并为对象")]),e._v(" "),r("li",[r("code",[e._v("combineLatest")]),e._v(" 取各来源数据流最后一个值合并为数组")])]),e._v(" "),r("p",[e._v("Observable 的优势在于：")]),e._v(" "),r("ul",[r("li",[e._v("降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系；")]),e._v(" "),r("li",[e._v("符合 "),r("strong",[e._v("依赖倒置原则")]),e._v("；")]),e._v(" "),r("li",[e._v("目标与观察者之间建立了一套触发机制；")]),e._v(" "),r("li",[e._v("支持广播通信多播；")])]),e._v(" "),r("blockquote",[r("p",[e._v("依赖倒置原则：依赖倒置原则（Dependence Inversion Principle）是程序要依赖于抽象接口，不要依赖于具体实现。简单的说就是要求对抽象进行编程，不要对实现进行编程，这样就降低了客户与实现模块间的耦合。")])]),e._v(" "),r("p",[e._v("多播（即一个Observable，多个subscribe）：")]),e._v(" "),r("p",[r("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a859253ee8fb449aac5d0e94c2ded433~tplv-k3u1fbpfcp-watermark.awebp",alt:""}})]),e._v(" "),r("hr"),e._v(" "),r("p",[e._v("以上就是关于 "),r("strong",[e._v("RxJS Observable")]),e._v(" 进一步在概念上的解惑~~")]),e._v(" "),r("p",[e._v("觉得还不错，点个赞吧👍👍👍")]),e._v(" "),r("p",[e._v("更多推荐阅读：")]),e._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://juejin.cn/post/6910943445569765384",target:"_blank",rel:"noopener noreferrer"}},[e._v("RxJS——给你如丝一般顺滑的编程体验（篇幅较长，建议收藏）"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://cipchk.gitbooks.io/angular-practice/content/rxjs/what.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("angular-practice-rxjs"),r("OutboundLink")],1)]),e._v(" "),r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000005051034",target:"_blank",rel:"noopener noreferrer"}},[e._v("RxJs 核心概念之Observable"),r("OutboundLink")],1)])]),e._v(" "),r("blockquote",[r("p",[e._v("我是掘金安东尼，公众号同名，日拱一卒、日掘一金，再会~")])])])}),[],!1,null,null,null);v.default=_.exports}}]);