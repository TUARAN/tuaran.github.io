(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{680:function(s,n,e){"use strict";e.r(n);var a=e(2),t=Object(a.a)({},(function(){var s=this,n=s.$createElement,e=s._self._c||n;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("p",[s._v("看到标题，xdm 可能有点懵？没关系，看完本篇，就会有种豁然开朗的感觉~")]),s._v(" "),e("p",[s._v("这里的 "),e("strong",[s._v("被观察者")]),s._v(" 指的是：Observer Pattern（观察者模式）中的被观察对象；")]),s._v(" "),e("p",[e("strong",[s._v("迭代者")]),s._v(" 这指的是：Iterator Pattern（迭代器模式）中的迭代对象；")]),s._v(" "),e("p",[s._v("没错，接下来，将分别解析这两种模式，冲 （￣︶￣）↗")]),s._v(" "),e("h2",{attrs:{id:"被观察者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#被观察者"}},[s._v("#")]),s._v(" 被观察者")]),s._v(" "),e("p",[s._v("观察者模式，我们总是常见：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function clickHandler(event) {\n    console.log('user click!');\n} \n\ndocument.body.addEventListener('click', clickHandler)\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("以上代码中，被观察者是 "),e("code",[s._v("document.body")]),s._v("，它主动注册了一个监听方法来监听点击事件，一旦发生点击，就把 event 信息带给 "),e("code",[s._v("clickHandler")]),s._v(" 方法，然后执行；这便是观察者模式~")]),s._v(" "),e("p",[s._v("除了用原生 api "),e("code",[s._v("addEventListener")]),s._v("，其实我们也可以自己写一个更加解耦的监听方法：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("class Subject { // 被观察者对象\n\n    constructor() {\n        this.listeners = []; \n    } \n    \n    addListener(listener) { // 加入监听\n        if(typeof listener === 'function') { \n            this.listeners.push(listener) \n        } else { \n            throw new Error('listener 必須是 function')\n        } \n    } \n    \n    removeListener(listener) { // 移除监听\n        this.listeners.splice(this.listeners.indexOf(listener), 1) \n    } \n    \n    notify(message) { // 发送通知\n        this.listeners.forEach(listener => { \n             listener(message); \n        }) \n    } \n    \n}\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br"),e("span",{staticClass:"line-number"},[s._v("17")]),e("br"),e("span",{staticClass:"line-number"},[s._v("18")]),e("br"),e("span",{staticClass:"line-number"},[s._v("19")]),e("br"),e("span",{staticClass:"line-number"},[s._v("20")]),e("br"),e("span",{staticClass:"line-number"},[s._v("21")]),e("br"),e("span",{staticClass:"line-number"},[s._v("22")]),e("br"),e("span",{staticClass:"line-number"},[s._v("23")]),e("br"),e("span",{staticClass:"line-number"},[s._v("24")]),e("br"),e("span",{staticClass:"line-number"},[s._v("25")]),e("br")])]),e("p",[s._v("构建实例：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var sub = new Subject(); // new 一个 ob 实例\n\nfunction listener1(message) { \n    console.log(message + 'from listener1'); \n} \n\nfunction listener2(message) { \n    console.log(message + 'from listener2');\n\n} \n\nsub.addListener(listener1); // 加监听1\n\nsub.addListener(listener2); // 加监听2\n\nsub.notify('I push a commit ') // push 信息给监听器1、2\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[s._v("每当 "),e("code",[s._v("notify")]),s._v(" 执行，sub 都会推送信息给 "),e("code",[s._v("listener1")]),s._v(" 和 "),e("code",[s._v("listener2")]),s._v("；")]),s._v(" "),e("p",[s._v("被观察者会主动 push 信息（或者称为数据）给多个观察它的对象（监听器），就是典型的观察者模式。")]),s._v(" "),e("p",[s._v("题外说一句：很多 xd 会把【观察者模式】和【发布订阅模式】弄混，这里特意说明一下，二者区别在于：")]),s._v(" "),e("ol",[e("li",[e("p",[s._v("观察者模式只需要 2 个角色便可成型，即 观察者 和 被观察者 ，其中 被观察者 是重点。")])]),s._v(" "),e("li",[e("p",[s._v("而发布订阅需要至少 3 个角色来组成，包括 发布者 、 订阅者 和 发布订阅中心 ，其中 发布订阅中心 是重点。")])])]),s._v(" "),e("h2",{attrs:{id:"迭代者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#迭代者"}},[s._v("#")]),s._v(" 迭代者")]),s._v(" "),e("p",[s._v("JS Iterator（迭代器）我们也并不陌生，它在 ES6 被提出：")]),s._v(" "),e("p",[s._v("示例代码如下：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var arr = [1, 2, 3];\n\nvar iterator = arr[Symbol.iterator]();\n\niterator.next();\n// { value: 1, done: false }\n\niterator.next();\n// { value: 2, done: false }\n\niterator.next();\n// { value: 3, done: false }\n\niterator.next();\n// { value: undefined, done: true }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br")])]),e("p",[s._v("Iterator 最大的魅力在于 "),e("strong",[s._v("延迟计算")]),s._v("，关于这点，在本瓜以前的文章可以找到一些相关讨论：")]),s._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7012119635516456967",target:"_blank",rel:"noopener noreferrer"}},[s._v("你觉得“惰性求值”在 JS 中会怎么实现？"),e("OutboundLink")],1)]),s._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.cn/post/7010532564817412109",target:"_blank",rel:"noopener noreferrer"}},[s._v("听君一席话，如听一席话，解释解释“惰性求值”~"),e("OutboundLink")],1)]),s._v(" "),e("p",[s._v("举个栗子🌰")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("function* getNumbers(words) {\n\t\tfor (let word of words) {\n\t\t\tif (/^[0-9]+$/.test(word)) {\n\t\t\t    yield parseInt(word, 10);\n\t\t\t}\n\t\t}\n}\n\nconst iterator = getNumbers('今天是 3 月 8 号');\n\niterator.next();\n// { value: 3, done: false }\niterator.next();\n// { value: 8, done: false }\niterator.next();\n// { value: undefined, done: true }\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br"),e("span",{staticClass:"line-number"},[s._v("8")]),e("br"),e("span",{staticClass:"line-number"},[s._v("9")]),e("br"),e("span",{staticClass:"line-number"},[s._v("10")]),e("br"),e("span",{staticClass:"line-number"},[s._v("11")]),e("br"),e("span",{staticClass:"line-number"},[s._v("12")]),e("br"),e("span",{staticClass:"line-number"},[s._v("13")]),e("br"),e("span",{staticClass:"line-number"},[s._v("14")]),e("br"),e("span",{staticClass:"line-number"},[s._v("15")]),e("br"),e("span",{staticClass:"line-number"},[s._v("16")]),e("br")])]),e("p",[e("code",[s._v("getNumbers")]),s._v(" 方法用于获取字符串里面的数字，当我们执行 "),e("code",[s._v("iterator = getNumbers('今天是 3 月 8 号')")]),s._v(" 这一句代码时，程序并没有开始计算，直到我们逐个执行 "),e("code",[s._v("iterator.next()")]),s._v(" 才会逐个得到运算结果。这就是延迟计算。")]),s._v(" "),e("p",[s._v("Iterator 就像是在 pull 数据，运行一次 "),e("code",[s._v(".next()")]),s._v(" 就拉取一次数据；")]),s._v(" "),e("h2",{attrs:{id:"小结"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#小结"}},[s._v("#")]),s._v(" 小结")]),s._v(" "),e("p",[s._v("OK，结合以上代码，我们分析了 “为什么说：被观察者是 push 数据，迭代者是 pull 数据？”")]),s._v(" "),e("p",[s._v("一图胜千言：")]),s._v(" "),e("p",[e("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a43f05b647c34e1c819e88e486a4efb1~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),s._v(" "),e("p",[s._v("不过说到底，我们为什么要把这两种设计模式单拎出来作这样解释呢？")]),s._v(" "),e("p",[s._v("噢，其实是为了理解 "),e("strong",[s._v("RxJS Observable")]),s._v("，它是二者思想的结合；")]),s._v(" "),e("p",[s._v("它大致长这样：")]),s._v(" "),e("div",{staticClass:"language- line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[s._v("var observable = Rx.Observable \n    .create(function(observer) { \n    observer.next('Jerry'); // RxJS 4.x 以前的版本用 onNext \n    observer.next('Anna'); \n})\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("p",[s._v("我们后面再来逐渐揭开它的面纱~~ 这里只用先理解其背景思想，有个大致概念和印象即可；")]),s._v(" "),e("blockquote",[e("p",[s._v("我是掘金安东尼，输出暴露输入，技术洞见生活，再会啦~~")])])])}),[],!1,null,null,null);n.default=t.exports}}]);