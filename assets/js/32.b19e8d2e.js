(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{533:function(t,_,a){"use strict";a.r(_);var v=a(2),s=Object(v.a)({},(function(){var t=this,_=t.$createElement,a=t._self._c||_;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("本文首发在掘金"),a("a",{attrs:{href:"https://juejin.cn/post/6905692756190953480/#heading-0",target:"_blank",rel:"noopener noreferrer"}},[t._v("会一会改变世界的图算法——Dijkstra（狄克斯特拉）算法"),a("OutboundLink")],1)]),t._v(" "),a("h2",{attrs:{id:"小序"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#小序"}},[t._v("#")]),t._v(" 小序")]),t._v(" "),a("p",[t._v("最近在看《算法图解》这本书，对【狄克斯特拉算法】这一章颇有感触。")]),t._v(" "),a("p",[t._v("狄克斯特拉算法是非常著名的算法，是"),a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/121814681",target:"_blank",rel:"noopener noreferrer"}},[t._v("改变世界的十大算法"),a("OutboundLink")],1),t._v("之一，用于"),a("span",{staticStyle:{color:"red"}},[a("strong",[t._v("解决【赋权】【有向无环图】的【单源最短路径】问题")])]),t._v("。")]),t._v(" "),a("blockquote",[a("p",[t._v("如果没有这种算法，因特网肯定没有现在的高效率。只要能以“图”模型表示的问题，都能用这个算法找到“图”中两个节点间的最短距离。狄克斯特拉算法的稳定性至今仍无法被取代。")])]),t._v(" "),a("p",[t._v("注：狄克斯特拉算法的"),a("span",{staticStyle:{color:"orange"}},[t._v("原始版本")]),t._v("仅适用于找到两个顶点之间的最短路径，后来更常见的"),a("span",{staticStyle:{color:"orange"}},[t._v("变体")]),t._v("固定了一个顶点作为源结点然后找到该顶点到图中所有其它结点的最短路径，产生一个最短路径树（树是没有环的图）。本文讨论的是后者。")]),t._v(" "),a("h2",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义"}},[t._v("#")]),t._v(" 定义")]),t._v(" "),a("p",[t._v("如果觉着序言中加红标粗的这句释义难理解？让咱一一拆解，您就明白了。倘若知晓概念，可选跳过此节。")]),t._v(" "),a("h3",{attrs:{id:"何为图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为图"}},[t._v("#")]),t._v(" 何为图")]),t._v(" "),a("ul",[a("li",[t._v("图由【"),a("strong",[t._v("节点")]),t._v("】和【"),a("strong",[t._v("边")]),t._v("】组成，用来模拟不同东西的连接关系。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4a2883760507401d8f1babd1cd8f263a~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 1-1")]),t._v(" "),a("p",[t._v("我们发现我们太多的现实场景都与图这种结构相关。人与人之间的关联，地点与地点之间的关联，各类拓扑图等。后文会例举具体场景案例。")]),t._v(" "),a("h3",{attrs:{id:"何为有向无环图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为有向无环图"}},[t._v("#")]),t._v(" 何为有向无环图")]),t._v(" "),a("p",[t._v("何为有向？")]),t._v(" "),a("p",[t._v("图 1-1 是无向图，而图 1-2 则是有向图，区别在于后者标注了点与点之间关联方向。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/025717315798461d9379132f10ec0523~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 1-2")]),t._v(" "),a("p",[t._v("何为无环？")]),t._v(" "),a("blockquote",[a("p",[t._v("如果一个有向图从任意顶点出发无法经过若干条边回到该点，则这个图是一个有向无环图。")])]),t._v(" "),a("ul",[a("li",[t._v("Q&A\nQ：图 1-2 是有向无环的吗？")])]),t._v(" "),a("p",[t._v("A：不是，因为 A 经过 C 之后又回到了 A。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/846e42b70ab64d70a836b44c9cbf4f78~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 1-3")]),t._v(" "),a("p",[t._v("那图 1-3 是有向无环的吗？")]),t._v(" "),a("p",[t._v("答：是的，欲知更多在 "),a("a",{attrs:{href:"https://zh.wikipedia.org/wiki/%E6%9C%89%E5%90%91%E6%97%A0%E7%8E%AF%E5%9B%BE",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://zh.wikipedia.org/wiki/有向无环图"),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"何为赋权"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为赋权"}},[t._v("#")]),t._v(" 何为赋权")]),t._v(" "),a("p",[t._v("这里的“权”即“权重”，“赋权”即是给图的边赋权重值。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5c07e2d05936432aae62dc2b38813477~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 1-4")]),t._v(" "),a("p",[t._v("比如图 1-4 从点 1 到点 2，需要走 10 步，从点 1 到点 5 需要 100 步，这里的 10 和 100 即为“权重值”。")]),t._v(" "),a("p",[t._v("特注：Dijkstra 算法边权非负。")]),t._v(" "),a("h3",{attrs:{id:"何为单源最短路径"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#何为单源最短路径"}},[t._v("#")]),t._v(" 何为单源最短路径")]),t._v(" "),a("p",[t._v("最短路径是计算给定的两个节点之间最短（最小权重）的路径，如果起点确定，则叫单源最短路径。")]),t._v(" "),a("p",[t._v("最短路径有很多现实应用：很多地图均提供了导航功能，它们就使用了最短路径算法或其变种。我们在很多社交平台上查看某人的简介时，平台会展示你们之间有多少共同好友，并列出之间的关系，也是基于此算法。")]),t._v(" "),a("p",[t._v("我们现在在回看这句定义：")]),t._v(" "),a("p",[t._v("狄克斯特拉算法用于"),a("strong",[t._v("解决【赋权】【有向无环图】的【单源最短路径】问题")]),t._v("。")]),t._v(" "),a("p",[t._v("您是否明了？只需紧扣“赋权”、“有向无环图”、“单源最短路径”这三个关键词。粗犷点讲，这个算法就是用于找两点之间的最短距离的。")]),t._v(" "),a("h2",{attrs:{id:"实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#实现"}},[t._v("#")]),t._v(" 实现")]),t._v(" "),a("p",[t._v("那么重点来了，狄克斯特拉算法到底是怎样实现的呢？")]),t._v(" "),a("p",[t._v("回到《算法图解》一书，我们可以看到最直观的例子。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3f556ae932164937a744bce0f87dd7f9~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 2-1")]),t._v(" "),a("p",[t._v("在图 2-1 中，从起点到终点的最短路径是多少呢？")]),t._v(" "),a("p",[t._v("如果您使用广度优先搜索（BFS），得到的答案将是 7（具体实现，按下不表），但这明显不是最优解。我们可以人眼识别，看出正确答案应该是 6，即从起点 —— 到 B 点 —— 到 A 点 —— 到终点。")]),t._v(" "),a("p",[t._v("如果通过计算机，正确答案是怎么算出来的呢？正是咱们的主角——"),a("strong",[t._v("狄克斯特拉算法")]),t._v("。")]),t._v(" "),a("h3",{attrs:{id:"四步走"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四步走"}},[t._v("#")]),t._v(" 四步走")]),t._v(" "),a("p",[t._v("狄克斯特拉算法包括 4 个步骤：")]),t._v(" "),a("ol",[a("li",[t._v("找出“最便宜”的节点，即可在最短时间内到达的节点。")]),t._v(" "),a("li",[t._v("更新该节点的邻居的开销，其含义将稍后介绍。")]),t._v(" "),a("li",[t._v("重复这个过程，直到对图中的每个节点都这样做了。")]),t._v(" "),a("li",[t._v("计算最终路径。")])]),t._v(" "),a("ul",[a("li",[t._v("第一步：找出“最便宜”节点")])]),t._v(" "),a("p",[t._v("咱先看第一步，你起点，有两条路可选，去到 A 需 6 步，去到 B 需 2 步，先不管其它节点，B 点即最便宜节点 记录以下集合，这点非常重要。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/1bec2f3170a84603be6a3c9c87c7a367~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 2-2\n"),a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e3b27f7c842e4f3194b74ec5e3d161c8~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 2-3")]),t._v(" "),a("ul",[a("li",[t._v("第二步：计算经过节点 B 前往各个邻居所需时间。")])]),t._v(" "),a("p",[t._v("起点经过 B 点 到 A 需 5 步，起点经过 B 点 到终点需 7 步，之前的集合中起点到 A 点需要 6 步，到终点是正无穷，现在有了"),a("strong",[t._v("更优解")]),t._v("，则需要"),a("span",{staticStyle:{color:"red"}},[a("strong",[t._v("更新")])]),t._v("该开销集合，得出图 2-4。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53c70223cc894b7f9e407711bd06ed56~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 2-3\n"),a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/983f1c5b155d4e7ba342592d88753604~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 2-4")]),t._v(" "),a("ul",[a("li",[t._v("第三步：重复！！！")])]),t._v(" "),a("p",[t._v("如何重复？我们已经基于 B 点做了更新操作，我们需要对剩下节点做类似的操作。图 2-4 表中，除了 B ，A 点的开销最小，所以我们需要对 A 点开刀了。—— “"),a("strong",[t._v("更新节点 A 所有邻居的开销。")]),t._v("”")]),t._v(" "),a("p",[t._v("起点经过 A 点到终点需要 1 步，5 + 1 = 6 ，小于图 2-4 中终点开销所需值 7，我们应该"),a("span",{staticStyle:{color:"red"}},[a("strong",[t._v("更新")])]),t._v("开销集合。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/a6a3c5ed7b644e778d1fe2ad9dfd1013~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 2-5")]),t._v(" "),a("p",[t._v("我们对每个节点都采用了狄克斯特拉算法（无需对终点这样做），"),a("strong",[t._v("所以图 2-5 是最后的开销集合，也是最终最优解。从起点到终点最少只需 6 步！")])]),t._v(" "),a("ul",[a("li",[t._v("第四步？")])]),t._v(" "),a("p",[t._v("细心的朋友可能发现了，说好的四步呢？上面怎么只有三步？这里作者在留了个“心机”，其实上面的例子只是算出了最小的开销的值，并未得出实现最小开销的最终路径，即缺少了一个回溯的过程。")]),t._v(" "),a("p",[t._v("如何计算最终路径？作者这里又举了一个例子，且此例要更为复杂一些。不过本瓜认为："),a("strong",[t._v("狄克斯特拉算法的核心在于第二步、第三步（开销数组的更新）")]),t._v("，第四步得出具体路径只是增加一个父子关系进行回溯补充。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/f734788335554a13ac55e216762618fd~tplv-k3u1fbpfcp-watermark.image",alt:""}}),t._v(" 图 2-6")]),t._v(" "),a("p",[t._v("如图 2-6 ，问：从乐谱到钢琴的最短路径是多少？")]),t._v(" "),a("p",[t._v("答案是： 乐谱 —— 唱片 —— 架子鼓 —— 钢琴，你知道其中开销集合的具体更新过程吗？我想有人面试应该遇到过这题。"),a("a",{attrs:{href:"https://image.xjq.icu/books/%E7%AE%97%E6%B3%95%E5%9B%BE%E8%A7%A3.pdf",target:"_blank",rel:"noopener noreferrer"}},[t._v("了解更多"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v("本瓜简述：由点【乐谱】出发，相邻【唱片】和【海报】两点，将它们放到"),a("strong",[t._v("开销数组")]),t._v("中，值分别为 0 和 5。0 小于 5，所以基于【海报】，执行第二步，拿到【乐谱】通过【海报】达到其相邻的点的值，分别是【吉他】30 和【架子鼓】35，此时开销数组里面有四个值：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("开销")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("海报")]),t._v(" "),a("td",[t._v("0（已遍历相邻值）")])]),t._v(" "),a("tr",[a("td",[t._v("唱片")]),t._v(" "),a("td",[t._v("5")])]),t._v(" "),a("tr",[a("td",[t._v("吉他")]),t._v(" "),a("td",[t._v("30")])]),t._v(" "),a("tr",[a("td",[t._v("架子鼓")]),t._v(" "),a("td",[t._v("35")])]),t._v(" "),a("tr",[a("td",[t._v("...")]),t._v(" "),a("td",[t._v("...")])])])]),t._v(" "),a("p",[t._v("5<30<35，进行重复操作，以【唱片】为基础，拿到【乐谱】到它相邻的点的值。分别为【吉他】20，【架子鼓】25，都小于开销数组中的值，进行更新。此时的开销数组为：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("开销")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("海报")]),t._v(" "),a("td",[t._v("0（已遍历相邻值）")])]),t._v(" "),a("tr",[a("td",[t._v("唱片")]),t._v(" "),a("td",[t._v("5（已遍历相邻值）")])]),t._v(" "),a("tr",[a("td",[t._v("吉他")]),t._v(" "),a("td",[t._v("20")])]),t._v(" "),a("tr",[a("td",[t._v("架子鼓")]),t._v(" "),a("td",[t._v("25")])]),t._v(" "),a("tr",[a("td",[t._v("...")]),t._v(" "),a("td",[t._v("...")])])])]),t._v(" "),a("p",[t._v("继续遍历，20 < 25，此时应该基于【吉他】，【吉他】与钢琴相连，【乐谱】通过【唱片】到【吉他】再到【钢琴】，需 40，更新数组。25 < 40，再基于【架子鼓】遍历，架子鼓也只和【钢琴】相连，【乐谱】——【唱片】——【架子鼓】——【钢琴】，值为 35，35 小于 40 ，更新。最终只有【钢琴】这一点没遍历，而【钢琴】又是终点，则执行结束啦。最终是：")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("名称")]),t._v(" "),a("th",[t._v("开销")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("海报")]),t._v(" "),a("td",[t._v("0（已遍历相邻值）")])]),t._v(" "),a("tr",[a("td",[t._v("唱片")]),t._v(" "),a("td",[t._v("5（已遍历相邻值）")])]),t._v(" "),a("tr",[a("td",[t._v("吉他")]),t._v(" "),a("td",[t._v("20（已遍历相邻值）")])]),t._v(" "),a("tr",[a("td",[t._v("架子鼓")]),t._v(" "),a("td",[t._v("25（已遍历相邻值）")])]),t._v(" "),a("tr",[a("td",[t._v("钢琴")]),t._v(" "),a("td",[t._v("35（终点，无需遍历）")])])])]),t._v(" "),a("p",[t._v("能轻松过一遍，算法思想就没啥问题啦~")]),t._v(" "),a("p",[t._v("其实，最短路径不一定是物理距离，也可以转化其它度量指标，比如钱、时间等等。将生活中的场景抽象成此类算法问题，妈妈再也不用担心我走弯路了~")]),t._v(" "),a("p",[t._v("狄克斯特拉！牛！")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/15ed4558bfa44ab6a166d63fea0a7bec~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),a("p",[t._v("致敬此算法的作者 —— Edsger Wybe Dijkstra，他在1972年获得图灵奖。")]),t._v(" "),a("h3",{attrs:{id:"代码"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#代码"}},[t._v("#")]),t._v(" 代码")]),t._v(" "),a("p",[t._v("算法思想很重要，但 TALK IS CHEAP!! 这里用 py 实现。同时也找到一篇 JS 实现-"),a("a",{attrs:{href:"https://levelup.gitconnected.com/finding-the-shortest-path-in-javascript-dijkstras-algorithm-8d16451eea34",target:"_blank",rel:"noopener noreferrer"}},[t._v("Finding the Shortest Path in Javascript: Dijkstra’s Algorithm"),a("OutboundLink")],1),t._v(" 挖个坑，有空翻译。/(ㄒoㄒ)/~~")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b040c258c19409ab374fb9cb2417b33~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('node = find_lowest_cost_node(costs) // 在未处理的节点中找出开销最小的节点\nwhile node is not None: // 这个while循环在所有节点都被处理过后结束\n    cost = costs[node]\n    neighbors = graph[node]\n    for n in neighbors.keys(): // 遍历当前节点的所有邻居\n    \tnew_cost = cost + neighbors[n]\n        if costs[n] > new_cost: // 如果经当前节点前往该邻居更近，\n        costs[n] = new_cost // 就更新该邻居的开销\n        parents[n] = node // 同时将该邻居的父节点设置为当前节点\n    processed.append(node) // 将当前节点标记为处理过\n    node = find_lowest_cost_node(costs) // 找出接下来要处理的节点，并循环\n\n// 找出开销最低的节点\ndef find_lowest_cost_node(costs):\n   lowest_cost = float("inf")\n   lowest_cost_node = None\n   for node in costs: // 遍历所有的节点\n      cost = costs[node]\n      if cost < lowest_cost and node not in processed:// 如果当前节点的开销更低且未处理过，\n          lowest_cost = cost // 就将其视为开销最低的节点\n          lowest_cost_node = node\n   return lowest_cost_node\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br")])]),a("p",[t._v("costs 数组即为开销数组，可以得到最小开销，也就是最短路径。")]),t._v(" "),a("p",[t._v("有兴趣也可看北大屈婉玲教授的视频——"),a("a",{attrs:{href:"https://www.youtube.com/watch?v=RFEqcXSo_Zg&t=203s",target:"_blank",rel:"noopener noreferrer"}},[t._v("《单源最短路径问题及算法》"),a("OutboundLink")],1),t._v("，讲的非常清晰。")]),t._v(" "),a("h2",{attrs:{id:"迷思"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#迷思"}},[t._v("#")]),t._v(" 迷思")]),t._v(" "),a("h3",{attrs:{id:"美丽心灵"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#美丽心灵"}},[t._v("#")]),t._v(" 美丽心灵")]),t._v(" "),a("p",[a("strong",[t._v("狄克斯特拉算法实际上是一个贪婪算法。因为该算法总是试图优先访问每一步循环中距离起始点最近的下一个结点。")])]),t._v(" "),a("p",[t._v("本瓜正好最近在看一部电影——《美丽心灵》，又加深了对“纳什均衡”的认知。")]),t._v(" "),a("blockquote",[a("p",[t._v("在博弈论中，纳什均衡（英语：Nash equilibrium，或称纳什均衡点）是指在包含两个或以上参与者的非合作博弈（Non-cooperative game）中，假设每个参与者都知道其他参与者的均衡策略的情况下，没有参与者可以透过改变自身策略使自身受益时的一个概念解。—— 维基百科")]),t._v(" "),a("p",[t._v("在一个博弈过程中，无论对方的策略选择如何，当事人一方都会选择某个确定的策略，则该策略被称作支配性策略。如果任意一位参与者在其他所有参与者的策略确定的情况下，其选择的策略是最优的，那么这个组合就被定义为纳什平衡。—— 百度百科")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/dd06efa819ba4f68b93eba6fc05f40ce~tplv-k3u1fbpfcp-watermark.image",alt:""}})]),t._v(" "),a("p",[t._v("二者综合，本瓜产生了困惑：")]),t._v(" "),a("p",[t._v("在这个狄克斯特拉算法中，我们每走一步都是一次博弈。如果将每一步的博弈交给不同的人去做，都达到自身的最优解，那么最终的解是否一定是最优的呢......？这涉及算法的稳定性？还是概念混淆了，还是有点哲学那味了？Anyway, 这东西还挺有意思的。算法、博弈论、最优解......")]),t._v(" "),a("h3",{attrs:{id:"概念整理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念整理"}},[t._v("#")]),t._v(" 概念整理")]),t._v(" "),a("ul",[a("li",[t._v("图算法")])]),t._v(" "),a("blockquote",[a("p",[t._v("“在我所知道的算法中，图算法应该是最有用的”。—— Aditya Bhargava（《算法图解》作者）")])]),t._v(" "),a("p",[t._v("图算法有三类核心：路径搜索、中心性计算、社群发现。")]),t._v(" "),a("p",[t._v("图算法还有最基础的两个"),a("strong",[t._v("遍历算法")]),t._v("：")]),t._v(" "),a("ol",[a("li",[t._v("广度优先搜索（BFS）")]),t._v(" "),a("li",[t._v("深度优先搜索（DFS）")])]),t._v(" "),a("p",[t._v("学过《数据结构》的应该都不陌生。同时，BFS 可以拿出与狄克斯特拉算法做对比，前者可用于在非加权图中查找最短路径，后者用于加权图中。还要提一嘴的是，如果图的权为负数，要使用【贝尔曼-福德算法】。有兴趣再拓展⑧。")]),t._v(" "),a("h3",{attrs:{id:"工具"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#工具"}},[t._v("#")]),t._v(" 工具")]),t._v(" "),a("ul",[a("li",[t._v("Dijkstra's Algorithm Solver（绘制）："),a("a",{attrs:{href:"https://mdahshan.github.io/dijkstra/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://mdahshan.github.io/dijkstra/"),a("OutboundLink")],1)])]),t._v(" "),a("h2",{attrs:{id:"以上"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#以上"}},[t._v("#")]),t._v(" 以上")]),t._v(" "),a("p",[t._v("撰文不易，还需鼓励。年轻人，讲点武德 ~ 喜欢就点赞，反感就三连。谢谢~")]),t._v(" "),a("p",[t._v("我是掘金安东尼，一位持续输出的个人站长~")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/53f3ce36d17c41efb4fb2540cca9e635~tplv-k3u1fbpfcp-watermark.image",alt:""}})])])}),[],!1,null,null,null);_.default=s.exports}}]);