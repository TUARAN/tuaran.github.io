(window.webpackJsonp=window.webpackJsonp||[]).push([[56],{553:function(v,_,t){"use strict";t.r(_);var p=t(2),a=Object(p.a)({},(function(){var v=this,_=v.$createElement,t=v._self._c||_;return t("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[t("blockquote",[t("p",[t("strong",[v._v("圈复杂度用来衡量代码结构的复杂程度；")])])]),v._v(" "),t("h2",{attrs:{id:"公式法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#公式法"}},[v._v("#")]),v._v(" 公式法")]),v._v(" "),t("p",[v._v("如图是一张简单的程序流程控制图：")]),v._v(" "),t("p",[t("img",{attrs:{src:"https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/79373658fb984b2fb5801ec1a60a3f81~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),v._v(" "),t("p",[v._v("程序由红色的节点开始运行，然后进入循环（红色节点下由三个节点组成），离开循环后有条件分支，最后运行蓝色节点后结束；")]),v._v(" "),t("p",[v._v("由此流程控制图，我们便可以开始计算该程序的 "),t("strong",[v._v("圈复杂度")]),v._v("；")]),v._v(" "),t("p",[v._v("计算公式："),t("code",[v._v("M = E − N + 2*P")])]),v._v(" "),t("p",[t("em",[v._v("E")]),v._v(" 为图中边的个数，"),t("em",[v._v("N")]),v._v(" 为图中节点的个数，"),t("em",[v._v("P")]),v._v(" 为图中连通分量的个数。")]),v._v(" "),t("p",[v._v("此图中，E = 9, N = 8, P = 1，因该程序圈复杂度为 9 - 8 + (2*1) = 3 ；")]),v._v(" "),t("p",[v._v("边的个数和节点的个数很好理解，但：")]),v._v(" "),t("p",[v._v("什么是 "),t("strong",[v._v("连通分量")]),v._v("？")]),v._v(" "),t("ul",[t("li",[v._v("原来，在无向图中，如果任意两个顶点之间都能够连通，则称此无向图为连通图；")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/5deda953c8cf41f589685090971da580~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),v._v(" "),t("p",[v._v("虽然 V1 和 V3 没有直接关联，但从 V1 到 V3 存在两条路径，分别是 V1-V2-V3 和 V1-V4-V3，因此称 V1 和 V3 之间是连通的。")]),v._v(" "),t("ul",[t("li",[v._v("若无向图不是连通图，但图中存储某个子图符合连通图的性质，则称该子图为 "),t("strong",[v._v("连通分量")]),v._v("；如图示：")])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/8e9a023ca24d49bc8a1cfbecfe4d95d7~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),v._v(" "),t("ul",[t("li",[t("p",[v._v("而在有向图中，若任意两个顶点 Vi 和 Vj，满足从 Vi 到 Vj 以及从 Vj 到 Vi 都连通，也就是都含有至少一条通路，则称此有向图为 "),t("strong",[v._v("强连通图")]),v._v("；")])]),v._v(" "),t("li",[t("p",[v._v("若有向图本身不是强连通图，但其包含的最大连通子图具有强连通图的性质，则称该子图为 "),t("strong",[v._v("强连通分量")]),v._v("。")])])]),v._v(" "),t("p",[t("img",{attrs:{src:"https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3d44bcc0548c4023870a164bbcc2b184~tplv-k3u1fbpfcp-watermark.image?",alt:"image.png"}})]),v._v(" "),t("p",[v._v("注意：圈复杂度计算中，计算变量是连通分量，而不是强连通分量！")]),v._v(" "),t("h2",{attrs:{id:"判定法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#判定法"}},[v._v("#")]),v._v(" 判定法")]),v._v(" "),t("p",[v._v("上面通过公式来计算圈复杂度，似乎有点太过麻烦，计算边、节点、连通分量，都要费不少劲！")]),v._v(" "),t("p",[v._v("有没有更加粗暴简单的方法呢？答案就是：判定法！")]),v._v(" "),t("p",[t("strong",[v._v("当程序遇到这些判定条件时，圈复杂度在原有基础上加 1 即可；")])]),v._v(" "),t("ul",[t("li",[v._v("if 语句")]),v._v(" "),t("li",[v._v("while 语句")]),v._v(" "),t("li",[v._v("for 语句")]),v._v(" "),t("li",[v._v("case 语句")]),v._v(" "),t("li",[v._v("catch 语句")]),v._v(" "),t("li",[v._v("and 和 or 布尔操作")]),v._v(" "),t("li",[v._v("? : 三元运算符")])]),v._v(" "),t("p",[v._v("接着以上节程序控制图为例，正常顺序的圈复杂度为 1，遇到 for 循环 +1，然后遇到 if 语句，再 +1 ，最后结果为 3；")]),v._v(" "),t("p",[v._v("怎样，是不是够粗暴简单？判定法用于简单程序的圈复杂度计算还是很有效果的；")]),v._v(" "),t("p",[v._v("需要注意的是：对于多分支的 case 结构或多个 if - else 结构，必须统计全部实际的判定条件数；")]),v._v(" "),t("hr"),v._v(" "),t("p",[v._v("圈复杂度是评判代码优劣的标准之一，"),t("strong",[v._v("通常来说，圈复杂度不要大于 5 ，否则代码将会被判定为 不易读！")])]),v._v(" "),t("p",[v._v("降低圈复杂度大致有如下方法：")]),v._v(" "),t("ul",[t("li",[v._v("简化、合并条件表达式")]),v._v(" "),t("li",[v._v("将条件判定提炼出独立函数")]),v._v(" "),t("li",[v._v("将大函数拆成小函数")]),v._v(" "),t("li",[v._v("以明确函数取代参数")]),v._v(" "),t("li",[v._v("替换算法")])]),v._v(" "),t("p",[v._v("从先计算后降低圈复杂度的角度来优化代码，使代码更加易读、易扩展、易维护，这就叫【专业】！")]),v._v(" "),t("blockquote",[t("p",[v._v("我是掘金安东尼，公众号同名，输出暴露输入，技术洞见生活，下次再会~")])])])}),[],!1,null,null,null);_.default=a.exports}}]);